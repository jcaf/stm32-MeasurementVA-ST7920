
STM32Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006548  08006548  00016548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006700  08006700  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006700  08006700  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006700  08006700  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000010  08006714  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08006714  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c21  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282c  00000000  00000000  00032c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00035488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00036330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019119  00000000  00000000  000370e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132af  00000000  00000000  00050201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090219  00000000  00000000  000634b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f36c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  000f371c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800652c 	.word	0x0800652c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800652c 	.word	0x0800652c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fec1 	bl	800118c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe11 	bl	800103c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 feb3 	bl	800118c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fea9 	bl	800118c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe39 	bl	80010c0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe2f 	bl	80010c0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f001 fce3 	bl	8001e50 <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f001 f94a 	bl	800172c <__aeabi_dsub>
 8000498:	f001 fcda 	bl	8001e50 <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_fdiv>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	464f      	mov	r7, r9
 80004b0:	4646      	mov	r6, r8
 80004b2:	46d6      	mov	lr, sl
 80004b4:	0245      	lsls	r5, r0, #9
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0047      	lsls	r7, r0, #1
 80004ba:	1c0c      	adds	r4, r1, #0
 80004bc:	0a6d      	lsrs	r5, r5, #9
 80004be:	0e3f      	lsrs	r7, r7, #24
 80004c0:	0fc6      	lsrs	r6, r0, #31
 80004c2:	2f00      	cmp	r7, #0
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fdiv+0x1c>
 80004c6:	e070      	b.n	80005aa <__aeabi_fdiv+0xfe>
 80004c8:	2fff      	cmp	r7, #255	; 0xff
 80004ca:	d100      	bne.n	80004ce <__aeabi_fdiv+0x22>
 80004cc:	e075      	b.n	80005ba <__aeabi_fdiv+0x10e>
 80004ce:	00eb      	lsls	r3, r5, #3
 80004d0:	2580      	movs	r5, #128	; 0x80
 80004d2:	04ed      	lsls	r5, r5, #19
 80004d4:	431d      	orrs	r5, r3
 80004d6:	2300      	movs	r3, #0
 80004d8:	4699      	mov	r9, r3
 80004da:	469a      	mov	sl, r3
 80004dc:	3f7f      	subs	r7, #127	; 0x7f
 80004de:	0260      	lsls	r0, r4, #9
 80004e0:	0a43      	lsrs	r3, r0, #9
 80004e2:	4698      	mov	r8, r3
 80004e4:	0063      	lsls	r3, r4, #1
 80004e6:	0e1b      	lsrs	r3, r3, #24
 80004e8:	0fe4      	lsrs	r4, r4, #31
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d04e      	beq.n	800058c <__aeabi_fdiv+0xe0>
 80004ee:	2bff      	cmp	r3, #255	; 0xff
 80004f0:	d046      	beq.n	8000580 <__aeabi_fdiv+0xd4>
 80004f2:	4642      	mov	r2, r8
 80004f4:	00d0      	lsls	r0, r2, #3
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	04d2      	lsls	r2, r2, #19
 80004fa:	4302      	orrs	r2, r0
 80004fc:	4690      	mov	r8, r2
 80004fe:	2200      	movs	r2, #0
 8000500:	3b7f      	subs	r3, #127	; 0x7f
 8000502:	0031      	movs	r1, r6
 8000504:	1aff      	subs	r7, r7, r3
 8000506:	464b      	mov	r3, r9
 8000508:	4061      	eors	r1, r4
 800050a:	b2c9      	uxtb	r1, r1
 800050c:	4313      	orrs	r3, r2
 800050e:	2b0f      	cmp	r3, #15
 8000510:	d900      	bls.n	8000514 <__aeabi_fdiv+0x68>
 8000512:	e0b5      	b.n	8000680 <__aeabi_fdiv+0x1d4>
 8000514:	486e      	ldr	r0, [pc, #440]	; (80006d0 <__aeabi_fdiv+0x224>)
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	58c3      	ldr	r3, [r0, r3]
 800051a:	469f      	mov	pc, r3
 800051c:	2300      	movs	r3, #0
 800051e:	4698      	mov	r8, r3
 8000520:	0026      	movs	r6, r4
 8000522:	4645      	mov	r5, r8
 8000524:	4692      	mov	sl, r2
 8000526:	4653      	mov	r3, sl
 8000528:	2b02      	cmp	r3, #2
 800052a:	d100      	bne.n	800052e <__aeabi_fdiv+0x82>
 800052c:	e089      	b.n	8000642 <__aeabi_fdiv+0x196>
 800052e:	2b03      	cmp	r3, #3
 8000530:	d100      	bne.n	8000534 <__aeabi_fdiv+0x88>
 8000532:	e09e      	b.n	8000672 <__aeabi_fdiv+0x1c6>
 8000534:	2b01      	cmp	r3, #1
 8000536:	d018      	beq.n	800056a <__aeabi_fdiv+0xbe>
 8000538:	003b      	movs	r3, r7
 800053a:	337f      	adds	r3, #127	; 0x7f
 800053c:	2b00      	cmp	r3, #0
 800053e:	dd69      	ble.n	8000614 <__aeabi_fdiv+0x168>
 8000540:	076a      	lsls	r2, r5, #29
 8000542:	d004      	beq.n	800054e <__aeabi_fdiv+0xa2>
 8000544:	220f      	movs	r2, #15
 8000546:	402a      	ands	r2, r5
 8000548:	2a04      	cmp	r2, #4
 800054a:	d000      	beq.n	800054e <__aeabi_fdiv+0xa2>
 800054c:	3504      	adds	r5, #4
 800054e:	012a      	lsls	r2, r5, #4
 8000550:	d503      	bpl.n	800055a <__aeabi_fdiv+0xae>
 8000552:	4b60      	ldr	r3, [pc, #384]	; (80006d4 <__aeabi_fdiv+0x228>)
 8000554:	401d      	ands	r5, r3
 8000556:	003b      	movs	r3, r7
 8000558:	3380      	adds	r3, #128	; 0x80
 800055a:	2bfe      	cmp	r3, #254	; 0xfe
 800055c:	dd00      	ble.n	8000560 <__aeabi_fdiv+0xb4>
 800055e:	e070      	b.n	8000642 <__aeabi_fdiv+0x196>
 8000560:	01ad      	lsls	r5, r5, #6
 8000562:	0a6d      	lsrs	r5, r5, #9
 8000564:	b2d8      	uxtb	r0, r3
 8000566:	e002      	b.n	800056e <__aeabi_fdiv+0xc2>
 8000568:	000e      	movs	r6, r1
 800056a:	2000      	movs	r0, #0
 800056c:	2500      	movs	r5, #0
 800056e:	05c0      	lsls	r0, r0, #23
 8000570:	4328      	orrs	r0, r5
 8000572:	07f6      	lsls	r6, r6, #31
 8000574:	4330      	orrs	r0, r6
 8000576:	bce0      	pop	{r5, r6, r7}
 8000578:	46ba      	mov	sl, r7
 800057a:	46b1      	mov	r9, r6
 800057c:	46a8      	mov	r8, r5
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d13f      	bne.n	8000606 <__aeabi_fdiv+0x15a>
 8000586:	2202      	movs	r2, #2
 8000588:	3fff      	subs	r7, #255	; 0xff
 800058a:	e003      	b.n	8000594 <__aeabi_fdiv+0xe8>
 800058c:	4643      	mov	r3, r8
 800058e:	2b00      	cmp	r3, #0
 8000590:	d12d      	bne.n	80005ee <__aeabi_fdiv+0x142>
 8000592:	2201      	movs	r2, #1
 8000594:	0031      	movs	r1, r6
 8000596:	464b      	mov	r3, r9
 8000598:	4061      	eors	r1, r4
 800059a:	b2c9      	uxtb	r1, r1
 800059c:	4313      	orrs	r3, r2
 800059e:	2b0f      	cmp	r3, #15
 80005a0:	d834      	bhi.n	800060c <__aeabi_fdiv+0x160>
 80005a2:	484d      	ldr	r0, [pc, #308]	; (80006d8 <__aeabi_fdiv+0x22c>)
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	58c3      	ldr	r3, [r0, r3]
 80005a8:	469f      	mov	pc, r3
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d113      	bne.n	80005d6 <__aeabi_fdiv+0x12a>
 80005ae:	2304      	movs	r3, #4
 80005b0:	4699      	mov	r9, r3
 80005b2:	3b03      	subs	r3, #3
 80005b4:	2700      	movs	r7, #0
 80005b6:	469a      	mov	sl, r3
 80005b8:	e791      	b.n	80004de <__aeabi_fdiv+0x32>
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d105      	bne.n	80005ca <__aeabi_fdiv+0x11e>
 80005be:	2308      	movs	r3, #8
 80005c0:	4699      	mov	r9, r3
 80005c2:	3b06      	subs	r3, #6
 80005c4:	27ff      	movs	r7, #255	; 0xff
 80005c6:	469a      	mov	sl, r3
 80005c8:	e789      	b.n	80004de <__aeabi_fdiv+0x32>
 80005ca:	230c      	movs	r3, #12
 80005cc:	4699      	mov	r9, r3
 80005ce:	3b09      	subs	r3, #9
 80005d0:	27ff      	movs	r7, #255	; 0xff
 80005d2:	469a      	mov	sl, r3
 80005d4:	e783      	b.n	80004de <__aeabi_fdiv+0x32>
 80005d6:	0028      	movs	r0, r5
 80005d8:	f001 fce8 	bl	8001fac <__clzsi2>
 80005dc:	2776      	movs	r7, #118	; 0x76
 80005de:	1f43      	subs	r3, r0, #5
 80005e0:	409d      	lsls	r5, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	427f      	negs	r7, r7
 80005e6:	4699      	mov	r9, r3
 80005e8:	469a      	mov	sl, r3
 80005ea:	1a3f      	subs	r7, r7, r0
 80005ec:	e777      	b.n	80004de <__aeabi_fdiv+0x32>
 80005ee:	4640      	mov	r0, r8
 80005f0:	f001 fcdc 	bl	8001fac <__clzsi2>
 80005f4:	4642      	mov	r2, r8
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	409a      	lsls	r2, r3
 80005fa:	2376      	movs	r3, #118	; 0x76
 80005fc:	425b      	negs	r3, r3
 80005fe:	4690      	mov	r8, r2
 8000600:	1a1b      	subs	r3, r3, r0
 8000602:	2200      	movs	r2, #0
 8000604:	e77d      	b.n	8000502 <__aeabi_fdiv+0x56>
 8000606:	23ff      	movs	r3, #255	; 0xff
 8000608:	2203      	movs	r2, #3
 800060a:	e77a      	b.n	8000502 <__aeabi_fdiv+0x56>
 800060c:	000e      	movs	r6, r1
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	2500      	movs	r5, #0
 8000612:	e7ac      	b.n	800056e <__aeabi_fdiv+0xc2>
 8000614:	2001      	movs	r0, #1
 8000616:	1ac0      	subs	r0, r0, r3
 8000618:	281b      	cmp	r0, #27
 800061a:	dca6      	bgt.n	800056a <__aeabi_fdiv+0xbe>
 800061c:	379e      	adds	r7, #158	; 0x9e
 800061e:	002a      	movs	r2, r5
 8000620:	40bd      	lsls	r5, r7
 8000622:	40c2      	lsrs	r2, r0
 8000624:	1e6b      	subs	r3, r5, #1
 8000626:	419d      	sbcs	r5, r3
 8000628:	4315      	orrs	r5, r2
 800062a:	076b      	lsls	r3, r5, #29
 800062c:	d004      	beq.n	8000638 <__aeabi_fdiv+0x18c>
 800062e:	230f      	movs	r3, #15
 8000630:	402b      	ands	r3, r5
 8000632:	2b04      	cmp	r3, #4
 8000634:	d000      	beq.n	8000638 <__aeabi_fdiv+0x18c>
 8000636:	3504      	adds	r5, #4
 8000638:	016b      	lsls	r3, r5, #5
 800063a:	d544      	bpl.n	80006c6 <__aeabi_fdiv+0x21a>
 800063c:	2001      	movs	r0, #1
 800063e:	2500      	movs	r5, #0
 8000640:	e795      	b.n	800056e <__aeabi_fdiv+0xc2>
 8000642:	20ff      	movs	r0, #255	; 0xff
 8000644:	2500      	movs	r5, #0
 8000646:	e792      	b.n	800056e <__aeabi_fdiv+0xc2>
 8000648:	2580      	movs	r5, #128	; 0x80
 800064a:	2600      	movs	r6, #0
 800064c:	20ff      	movs	r0, #255	; 0xff
 800064e:	03ed      	lsls	r5, r5, #15
 8000650:	e78d      	b.n	800056e <__aeabi_fdiv+0xc2>
 8000652:	2300      	movs	r3, #0
 8000654:	4698      	mov	r8, r3
 8000656:	2080      	movs	r0, #128	; 0x80
 8000658:	03c0      	lsls	r0, r0, #15
 800065a:	4205      	tst	r5, r0
 800065c:	d009      	beq.n	8000672 <__aeabi_fdiv+0x1c6>
 800065e:	4643      	mov	r3, r8
 8000660:	4203      	tst	r3, r0
 8000662:	d106      	bne.n	8000672 <__aeabi_fdiv+0x1c6>
 8000664:	4645      	mov	r5, r8
 8000666:	4305      	orrs	r5, r0
 8000668:	026d      	lsls	r5, r5, #9
 800066a:	0026      	movs	r6, r4
 800066c:	20ff      	movs	r0, #255	; 0xff
 800066e:	0a6d      	lsrs	r5, r5, #9
 8000670:	e77d      	b.n	800056e <__aeabi_fdiv+0xc2>
 8000672:	2080      	movs	r0, #128	; 0x80
 8000674:	03c0      	lsls	r0, r0, #15
 8000676:	4305      	orrs	r5, r0
 8000678:	026d      	lsls	r5, r5, #9
 800067a:	20ff      	movs	r0, #255	; 0xff
 800067c:	0a6d      	lsrs	r5, r5, #9
 800067e:	e776      	b.n	800056e <__aeabi_fdiv+0xc2>
 8000680:	4642      	mov	r2, r8
 8000682:	016b      	lsls	r3, r5, #5
 8000684:	0150      	lsls	r0, r2, #5
 8000686:	4283      	cmp	r3, r0
 8000688:	d219      	bcs.n	80006be <__aeabi_fdiv+0x212>
 800068a:	221b      	movs	r2, #27
 800068c:	2500      	movs	r5, #0
 800068e:	3f01      	subs	r7, #1
 8000690:	2601      	movs	r6, #1
 8000692:	001c      	movs	r4, r3
 8000694:	006d      	lsls	r5, r5, #1
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	2c00      	cmp	r4, #0
 800069a:	db01      	blt.n	80006a0 <__aeabi_fdiv+0x1f4>
 800069c:	4298      	cmp	r0, r3
 800069e:	d801      	bhi.n	80006a4 <__aeabi_fdiv+0x1f8>
 80006a0:	1a1b      	subs	r3, r3, r0
 80006a2:	4335      	orrs	r5, r6
 80006a4:	3a01      	subs	r2, #1
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d1f3      	bne.n	8000692 <__aeabi_fdiv+0x1e6>
 80006aa:	1e5a      	subs	r2, r3, #1
 80006ac:	4193      	sbcs	r3, r2
 80006ae:	431d      	orrs	r5, r3
 80006b0:	003b      	movs	r3, r7
 80006b2:	337f      	adds	r3, #127	; 0x7f
 80006b4:	000e      	movs	r6, r1
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dd00      	ble.n	80006bc <__aeabi_fdiv+0x210>
 80006ba:	e741      	b.n	8000540 <__aeabi_fdiv+0x94>
 80006bc:	e7aa      	b.n	8000614 <__aeabi_fdiv+0x168>
 80006be:	221a      	movs	r2, #26
 80006c0:	2501      	movs	r5, #1
 80006c2:	1a1b      	subs	r3, r3, r0
 80006c4:	e7e4      	b.n	8000690 <__aeabi_fdiv+0x1e4>
 80006c6:	01ad      	lsls	r5, r5, #6
 80006c8:	2000      	movs	r0, #0
 80006ca:	0a6d      	lsrs	r5, r5, #9
 80006cc:	e74f      	b.n	800056e <__aeabi_fdiv+0xc2>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	08006570 	.word	0x08006570
 80006d4:	f7ffffff 	.word	0xf7ffffff
 80006d8:	080065b0 	.word	0x080065b0

080006dc <__aeabi_fmul>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	0244      	lsls	r4, r0, #9
 80006e6:	0045      	lsls	r5, r0, #1
 80006e8:	b5c0      	push	{r6, r7, lr}
 80006ea:	0a64      	lsrs	r4, r4, #9
 80006ec:	1c0f      	adds	r7, r1, #0
 80006ee:	0e2d      	lsrs	r5, r5, #24
 80006f0:	0fc6      	lsrs	r6, r0, #31
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fmul+0x1c>
 80006f6:	e08d      	b.n	8000814 <__aeabi_fmul+0x138>
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fmul+0x22>
 80006fc:	e092      	b.n	8000824 <__aeabi_fmul+0x148>
 80006fe:	2300      	movs	r3, #0
 8000700:	2080      	movs	r0, #128	; 0x80
 8000702:	4699      	mov	r9, r3
 8000704:	469a      	mov	sl, r3
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	04c0      	lsls	r0, r0, #19
 800070a:	4304      	orrs	r4, r0
 800070c:	3d7f      	subs	r5, #127	; 0x7f
 800070e:	0278      	lsls	r0, r7, #9
 8000710:	0a43      	lsrs	r3, r0, #9
 8000712:	4698      	mov	r8, r3
 8000714:	007b      	lsls	r3, r7, #1
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	0fff      	lsrs	r7, r7, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fmul+0x44>
 800071e:	e070      	b.n	8000802 <__aeabi_fmul+0x126>
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	d100      	bne.n	8000726 <__aeabi_fmul+0x4a>
 8000724:	e086      	b.n	8000834 <__aeabi_fmul+0x158>
 8000726:	4642      	mov	r2, r8
 8000728:	00d0      	lsls	r0, r2, #3
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	3b7f      	subs	r3, #127	; 0x7f
 800072e:	18ed      	adds	r5, r5, r3
 8000730:	2300      	movs	r3, #0
 8000732:	04d2      	lsls	r2, r2, #19
 8000734:	4302      	orrs	r2, r0
 8000736:	4690      	mov	r8, r2
 8000738:	469c      	mov	ip, r3
 800073a:	0031      	movs	r1, r6
 800073c:	464b      	mov	r3, r9
 800073e:	4079      	eors	r1, r7
 8000740:	1c68      	adds	r0, r5, #1
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d81c      	bhi.n	8000780 <__aeabi_fmul+0xa4>
 8000746:	4a76      	ldr	r2, [pc, #472]	; (8000920 <__aeabi_fmul+0x244>)
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	58d3      	ldr	r3, [r2, r3]
 800074c:	469f      	mov	pc, r3
 800074e:	0039      	movs	r1, r7
 8000750:	4644      	mov	r4, r8
 8000752:	46e2      	mov	sl, ip
 8000754:	4653      	mov	r3, sl
 8000756:	2b02      	cmp	r3, #2
 8000758:	d00f      	beq.n	800077a <__aeabi_fmul+0x9e>
 800075a:	2b03      	cmp	r3, #3
 800075c:	d100      	bne.n	8000760 <__aeabi_fmul+0x84>
 800075e:	e0d7      	b.n	8000910 <__aeabi_fmul+0x234>
 8000760:	2b01      	cmp	r3, #1
 8000762:	d137      	bne.n	80007d4 <__aeabi_fmul+0xf8>
 8000764:	2000      	movs	r0, #0
 8000766:	2400      	movs	r4, #0
 8000768:	05c0      	lsls	r0, r0, #23
 800076a:	4320      	orrs	r0, r4
 800076c:	07c9      	lsls	r1, r1, #31
 800076e:	4308      	orrs	r0, r1
 8000770:	bce0      	pop	{r5, r6, r7}
 8000772:	46ba      	mov	sl, r7
 8000774:	46b1      	mov	r9, r6
 8000776:	46a8      	mov	r8, r5
 8000778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077a:	20ff      	movs	r0, #255	; 0xff
 800077c:	2400      	movs	r4, #0
 800077e:	e7f3      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000780:	0c26      	lsrs	r6, r4, #16
 8000782:	0424      	lsls	r4, r4, #16
 8000784:	0c22      	lsrs	r2, r4, #16
 8000786:	4644      	mov	r4, r8
 8000788:	0424      	lsls	r4, r4, #16
 800078a:	0c24      	lsrs	r4, r4, #16
 800078c:	4643      	mov	r3, r8
 800078e:	0027      	movs	r7, r4
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	4357      	muls	r7, r2
 8000794:	4374      	muls	r4, r6
 8000796:	435a      	muls	r2, r3
 8000798:	435e      	muls	r6, r3
 800079a:	1912      	adds	r2, r2, r4
 800079c:	0c3b      	lsrs	r3, r7, #16
 800079e:	189b      	adds	r3, r3, r2
 80007a0:	429c      	cmp	r4, r3
 80007a2:	d903      	bls.n	80007ac <__aeabi_fmul+0xd0>
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	4694      	mov	ip, r2
 80007aa:	4466      	add	r6, ip
 80007ac:	043f      	lsls	r7, r7, #16
 80007ae:	041a      	lsls	r2, r3, #16
 80007b0:	0c3f      	lsrs	r7, r7, #16
 80007b2:	19d2      	adds	r2, r2, r7
 80007b4:	0194      	lsls	r4, r2, #6
 80007b6:	1e67      	subs	r7, r4, #1
 80007b8:	41bc      	sbcs	r4, r7
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	0e92      	lsrs	r2, r2, #26
 80007be:	199b      	adds	r3, r3, r6
 80007c0:	4314      	orrs	r4, r2
 80007c2:	019b      	lsls	r3, r3, #6
 80007c4:	431c      	orrs	r4, r3
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fmul+0xf0>
 80007ca:	e09b      	b.n	8000904 <__aeabi_fmul+0x228>
 80007cc:	2301      	movs	r3, #1
 80007ce:	0862      	lsrs	r2, r4, #1
 80007d0:	401c      	ands	r4, r3
 80007d2:	4314      	orrs	r4, r2
 80007d4:	0002      	movs	r2, r0
 80007d6:	327f      	adds	r2, #127	; 0x7f
 80007d8:	2a00      	cmp	r2, #0
 80007da:	dd64      	ble.n	80008a6 <__aeabi_fmul+0x1ca>
 80007dc:	0763      	lsls	r3, r4, #29
 80007de:	d004      	beq.n	80007ea <__aeabi_fmul+0x10e>
 80007e0:	230f      	movs	r3, #15
 80007e2:	4023      	ands	r3, r4
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d000      	beq.n	80007ea <__aeabi_fmul+0x10e>
 80007e8:	3404      	adds	r4, #4
 80007ea:	0123      	lsls	r3, r4, #4
 80007ec:	d503      	bpl.n	80007f6 <__aeabi_fmul+0x11a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <__aeabi_fmul+0x248>)
 80007f2:	3280      	adds	r2, #128	; 0x80
 80007f4:	401c      	ands	r4, r3
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	dcbf      	bgt.n	800077a <__aeabi_fmul+0x9e>
 80007fa:	01a4      	lsls	r4, r4, #6
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	b2d0      	uxtb	r0, r2
 8000800:	e7b2      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000802:	4643      	mov	r3, r8
 8000804:	2b00      	cmp	r3, #0
 8000806:	d13d      	bne.n	8000884 <__aeabi_fmul+0x1a8>
 8000808:	464a      	mov	r2, r9
 800080a:	3301      	adds	r3, #1
 800080c:	431a      	orrs	r2, r3
 800080e:	4691      	mov	r9, r2
 8000810:	469c      	mov	ip, r3
 8000812:	e792      	b.n	800073a <__aeabi_fmul+0x5e>
 8000814:	2c00      	cmp	r4, #0
 8000816:	d129      	bne.n	800086c <__aeabi_fmul+0x190>
 8000818:	2304      	movs	r3, #4
 800081a:	4699      	mov	r9, r3
 800081c:	3b03      	subs	r3, #3
 800081e:	2500      	movs	r5, #0
 8000820:	469a      	mov	sl, r3
 8000822:	e774      	b.n	800070e <__aeabi_fmul+0x32>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d11b      	bne.n	8000860 <__aeabi_fmul+0x184>
 8000828:	2308      	movs	r3, #8
 800082a:	4699      	mov	r9, r3
 800082c:	3b06      	subs	r3, #6
 800082e:	25ff      	movs	r5, #255	; 0xff
 8000830:	469a      	mov	sl, r3
 8000832:	e76c      	b.n	800070e <__aeabi_fmul+0x32>
 8000834:	4643      	mov	r3, r8
 8000836:	35ff      	adds	r5, #255	; 0xff
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10b      	bne.n	8000854 <__aeabi_fmul+0x178>
 800083c:	2302      	movs	r3, #2
 800083e:	464a      	mov	r2, r9
 8000840:	431a      	orrs	r2, r3
 8000842:	4691      	mov	r9, r2
 8000844:	469c      	mov	ip, r3
 8000846:	e778      	b.n	800073a <__aeabi_fmul+0x5e>
 8000848:	4653      	mov	r3, sl
 800084a:	0031      	movs	r1, r6
 800084c:	2b02      	cmp	r3, #2
 800084e:	d000      	beq.n	8000852 <__aeabi_fmul+0x176>
 8000850:	e783      	b.n	800075a <__aeabi_fmul+0x7e>
 8000852:	e792      	b.n	800077a <__aeabi_fmul+0x9e>
 8000854:	2303      	movs	r3, #3
 8000856:	464a      	mov	r2, r9
 8000858:	431a      	orrs	r2, r3
 800085a:	4691      	mov	r9, r2
 800085c:	469c      	mov	ip, r3
 800085e:	e76c      	b.n	800073a <__aeabi_fmul+0x5e>
 8000860:	230c      	movs	r3, #12
 8000862:	4699      	mov	r9, r3
 8000864:	3b09      	subs	r3, #9
 8000866:	25ff      	movs	r5, #255	; 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e750      	b.n	800070e <__aeabi_fmul+0x32>
 800086c:	0020      	movs	r0, r4
 800086e:	f001 fb9d 	bl	8001fac <__clzsi2>
 8000872:	2576      	movs	r5, #118	; 0x76
 8000874:	1f43      	subs	r3, r0, #5
 8000876:	409c      	lsls	r4, r3
 8000878:	2300      	movs	r3, #0
 800087a:	426d      	negs	r5, r5
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	1a2d      	subs	r5, r5, r0
 8000882:	e744      	b.n	800070e <__aeabi_fmul+0x32>
 8000884:	4640      	mov	r0, r8
 8000886:	f001 fb91 	bl	8001fac <__clzsi2>
 800088a:	4642      	mov	r2, r8
 800088c:	1f43      	subs	r3, r0, #5
 800088e:	409a      	lsls	r2, r3
 8000890:	2300      	movs	r3, #0
 8000892:	1a2d      	subs	r5, r5, r0
 8000894:	4690      	mov	r8, r2
 8000896:	469c      	mov	ip, r3
 8000898:	3d76      	subs	r5, #118	; 0x76
 800089a:	e74e      	b.n	800073a <__aeabi_fmul+0x5e>
 800089c:	2480      	movs	r4, #128	; 0x80
 800089e:	2100      	movs	r1, #0
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	03e4      	lsls	r4, r4, #15
 80008a4:	e760      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008a6:	2301      	movs	r3, #1
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	2b1b      	cmp	r3, #27
 80008ac:	dd00      	ble.n	80008b0 <__aeabi_fmul+0x1d4>
 80008ae:	e759      	b.n	8000764 <__aeabi_fmul+0x88>
 80008b0:	0022      	movs	r2, r4
 80008b2:	309e      	adds	r0, #158	; 0x9e
 80008b4:	40da      	lsrs	r2, r3
 80008b6:	4084      	lsls	r4, r0
 80008b8:	0013      	movs	r3, r2
 80008ba:	1e62      	subs	r2, r4, #1
 80008bc:	4194      	sbcs	r4, r2
 80008be:	431c      	orrs	r4, r3
 80008c0:	0763      	lsls	r3, r4, #29
 80008c2:	d004      	beq.n	80008ce <__aeabi_fmul+0x1f2>
 80008c4:	230f      	movs	r3, #15
 80008c6:	4023      	ands	r3, r4
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d000      	beq.n	80008ce <__aeabi_fmul+0x1f2>
 80008cc:	3404      	adds	r4, #4
 80008ce:	0163      	lsls	r3, r4, #5
 80008d0:	d51a      	bpl.n	8000908 <__aeabi_fmul+0x22c>
 80008d2:	2001      	movs	r0, #1
 80008d4:	2400      	movs	r4, #0
 80008d6:	e747      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008d8:	2080      	movs	r0, #128	; 0x80
 80008da:	03c0      	lsls	r0, r0, #15
 80008dc:	4204      	tst	r4, r0
 80008de:	d009      	beq.n	80008f4 <__aeabi_fmul+0x218>
 80008e0:	4643      	mov	r3, r8
 80008e2:	4203      	tst	r3, r0
 80008e4:	d106      	bne.n	80008f4 <__aeabi_fmul+0x218>
 80008e6:	4644      	mov	r4, r8
 80008e8:	4304      	orrs	r4, r0
 80008ea:	0264      	lsls	r4, r4, #9
 80008ec:	0039      	movs	r1, r7
 80008ee:	20ff      	movs	r0, #255	; 0xff
 80008f0:	0a64      	lsrs	r4, r4, #9
 80008f2:	e739      	b.n	8000768 <__aeabi_fmul+0x8c>
 80008f4:	2080      	movs	r0, #128	; 0x80
 80008f6:	03c0      	lsls	r0, r0, #15
 80008f8:	4304      	orrs	r4, r0
 80008fa:	0264      	lsls	r4, r4, #9
 80008fc:	0031      	movs	r1, r6
 80008fe:	20ff      	movs	r0, #255	; 0xff
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	e731      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000904:	0028      	movs	r0, r5
 8000906:	e765      	b.n	80007d4 <__aeabi_fmul+0xf8>
 8000908:	01a4      	lsls	r4, r4, #6
 800090a:	2000      	movs	r0, #0
 800090c:	0a64      	lsrs	r4, r4, #9
 800090e:	e72b      	b.n	8000768 <__aeabi_fmul+0x8c>
 8000910:	2080      	movs	r0, #128	; 0x80
 8000912:	03c0      	lsls	r0, r0, #15
 8000914:	4304      	orrs	r4, r0
 8000916:	0264      	lsls	r4, r4, #9
 8000918:	20ff      	movs	r0, #255	; 0xff
 800091a:	0a64      	lsrs	r4, r4, #9
 800091c:	e724      	b.n	8000768 <__aeabi_fmul+0x8c>
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	080065f0 	.word	0x080065f0
 8000924:	f7ffffff 	.word	0xf7ffffff

08000928 <__aeabi_i2f>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	2800      	cmp	r0, #0
 800092c:	d013      	beq.n	8000956 <__aeabi_i2f+0x2e>
 800092e:	17c3      	asrs	r3, r0, #31
 8000930:	18c6      	adds	r6, r0, r3
 8000932:	405e      	eors	r6, r3
 8000934:	0fc4      	lsrs	r4, r0, #31
 8000936:	0030      	movs	r0, r6
 8000938:	f001 fb38 	bl	8001fac <__clzsi2>
 800093c:	239e      	movs	r3, #158	; 0x9e
 800093e:	0005      	movs	r5, r0
 8000940:	1a1b      	subs	r3, r3, r0
 8000942:	2b96      	cmp	r3, #150	; 0x96
 8000944:	dc0f      	bgt.n	8000966 <__aeabi_i2f+0x3e>
 8000946:	2808      	cmp	r0, #8
 8000948:	dd01      	ble.n	800094e <__aeabi_i2f+0x26>
 800094a:	3d08      	subs	r5, #8
 800094c:	40ae      	lsls	r6, r5
 800094e:	0276      	lsls	r6, r6, #9
 8000950:	0a76      	lsrs	r6, r6, #9
 8000952:	b2d8      	uxtb	r0, r3
 8000954:	e002      	b.n	800095c <__aeabi_i2f+0x34>
 8000956:	2400      	movs	r4, #0
 8000958:	2000      	movs	r0, #0
 800095a:	2600      	movs	r6, #0
 800095c:	05c0      	lsls	r0, r0, #23
 800095e:	4330      	orrs	r0, r6
 8000960:	07e4      	lsls	r4, r4, #31
 8000962:	4320      	orrs	r0, r4
 8000964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000966:	2b99      	cmp	r3, #153	; 0x99
 8000968:	dd0c      	ble.n	8000984 <__aeabi_i2f+0x5c>
 800096a:	2205      	movs	r2, #5
 800096c:	0031      	movs	r1, r6
 800096e:	1a12      	subs	r2, r2, r0
 8000970:	40d1      	lsrs	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	0001      	movs	r1, r0
 8000976:	0030      	movs	r0, r6
 8000978:	311b      	adds	r1, #27
 800097a:	4088      	lsls	r0, r1
 800097c:	1e41      	subs	r1, r0, #1
 800097e:	4188      	sbcs	r0, r1
 8000980:	4302      	orrs	r2, r0
 8000982:	0016      	movs	r6, r2
 8000984:	2d05      	cmp	r5, #5
 8000986:	dc12      	bgt.n	80009ae <__aeabi_i2f+0x86>
 8000988:	0031      	movs	r1, r6
 800098a:	4f0d      	ldr	r7, [pc, #52]	; (80009c0 <__aeabi_i2f+0x98>)
 800098c:	4039      	ands	r1, r7
 800098e:	0772      	lsls	r2, r6, #29
 8000990:	d009      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 8000992:	200f      	movs	r0, #15
 8000994:	4030      	ands	r0, r6
 8000996:	2804      	cmp	r0, #4
 8000998:	d005      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 800099a:	3104      	adds	r1, #4
 800099c:	014a      	lsls	r2, r1, #5
 800099e:	d502      	bpl.n	80009a6 <__aeabi_i2f+0x7e>
 80009a0:	239f      	movs	r3, #159	; 0x9f
 80009a2:	4039      	ands	r1, r7
 80009a4:	1b5b      	subs	r3, r3, r5
 80009a6:	0189      	lsls	r1, r1, #6
 80009a8:	0a4e      	lsrs	r6, r1, #9
 80009aa:	b2d8      	uxtb	r0, r3
 80009ac:	e7d6      	b.n	800095c <__aeabi_i2f+0x34>
 80009ae:	1f6a      	subs	r2, r5, #5
 80009b0:	4096      	lsls	r6, r2
 80009b2:	0031      	movs	r1, r6
 80009b4:	4f02      	ldr	r7, [pc, #8]	; (80009c0 <__aeabi_i2f+0x98>)
 80009b6:	4039      	ands	r1, r7
 80009b8:	0772      	lsls	r2, r6, #29
 80009ba:	d0f4      	beq.n	80009a6 <__aeabi_i2f+0x7e>
 80009bc:	e7e9      	b.n	8000992 <__aeabi_i2f+0x6a>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	fbffffff 	.word	0xfbffffff

080009c4 <__aeabi_dadd>:
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	464f      	mov	r7, r9
 80009c8:	4646      	mov	r6, r8
 80009ca:	46d6      	mov	lr, sl
 80009cc:	000d      	movs	r5, r1
 80009ce:	0004      	movs	r4, r0
 80009d0:	b5c0      	push	{r6, r7, lr}
 80009d2:	001f      	movs	r7, r3
 80009d4:	0011      	movs	r1, r2
 80009d6:	0328      	lsls	r0, r5, #12
 80009d8:	0f62      	lsrs	r2, r4, #29
 80009da:	0a40      	lsrs	r0, r0, #9
 80009dc:	4310      	orrs	r0, r2
 80009de:	007a      	lsls	r2, r7, #1
 80009e0:	0d52      	lsrs	r2, r2, #21
 80009e2:	00e3      	lsls	r3, r4, #3
 80009e4:	033c      	lsls	r4, r7, #12
 80009e6:	4691      	mov	r9, r2
 80009e8:	0a64      	lsrs	r4, r4, #9
 80009ea:	0ffa      	lsrs	r2, r7, #31
 80009ec:	0f4f      	lsrs	r7, r1, #29
 80009ee:	006e      	lsls	r6, r5, #1
 80009f0:	4327      	orrs	r7, r4
 80009f2:	4692      	mov	sl, r2
 80009f4:	46b8      	mov	r8, r7
 80009f6:	0d76      	lsrs	r6, r6, #21
 80009f8:	0fed      	lsrs	r5, r5, #31
 80009fa:	00c9      	lsls	r1, r1, #3
 80009fc:	4295      	cmp	r5, r2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x3e>
 8000a00:	e099      	b.n	8000b36 <__aeabi_dadd+0x172>
 8000a02:	464c      	mov	r4, r9
 8000a04:	1b34      	subs	r4, r6, r4
 8000a06:	46a4      	mov	ip, r4
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_dadd+0x4a>
 8000a0c:	e07c      	b.n	8000b08 <__aeabi_dadd+0x144>
 8000a0e:	464a      	mov	r2, r9
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x52>
 8000a14:	e0b8      	b.n	8000b88 <__aeabi_dadd+0x1c4>
 8000a16:	4ac5      	ldr	r2, [pc, #788]	; (8000d2c <__aeabi_dadd+0x368>)
 8000a18:	4296      	cmp	r6, r2
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x5a>
 8000a1c:	e11c      	b.n	8000c58 <__aeabi_dadd+0x294>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	003c      	movs	r4, r7
 8000a22:	0412      	lsls	r2, r2, #16
 8000a24:	4314      	orrs	r4, r2
 8000a26:	46a0      	mov	r8, r4
 8000a28:	4662      	mov	r2, ip
 8000a2a:	2a38      	cmp	r2, #56	; 0x38
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x6c>
 8000a2e:	e161      	b.n	8000cf4 <__aeabi_dadd+0x330>
 8000a30:	2a1f      	cmp	r2, #31
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0x72>
 8000a34:	e1cc      	b.n	8000dd0 <__aeabi_dadd+0x40c>
 8000a36:	4664      	mov	r4, ip
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b12      	subs	r2, r2, r4
 8000a3c:	4644      	mov	r4, r8
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	000f      	movs	r7, r1
 8000a42:	46a1      	mov	r9, r4
 8000a44:	4664      	mov	r4, ip
 8000a46:	4091      	lsls	r1, r2
 8000a48:	40e7      	lsrs	r7, r4
 8000a4a:	464c      	mov	r4, r9
 8000a4c:	1e4a      	subs	r2, r1, #1
 8000a4e:	4191      	sbcs	r1, r2
 8000a50:	433c      	orrs	r4, r7
 8000a52:	4642      	mov	r2, r8
 8000a54:	4321      	orrs	r1, r4
 8000a56:	4664      	mov	r4, ip
 8000a58:	40e2      	lsrs	r2, r4
 8000a5a:	1a80      	subs	r0, r0, r2
 8000a5c:	1a5c      	subs	r4, r3, r1
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	419b      	sbcs	r3, r3
 8000a62:	425f      	negs	r7, r3
 8000a64:	1bc7      	subs	r7, r0, r7
 8000a66:	023b      	lsls	r3, r7, #8
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_dadd+0xa8>
 8000a6a:	e0d0      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000a6c:	027f      	lsls	r7, r7, #9
 8000a6e:	0a7f      	lsrs	r7, r7, #9
 8000a70:	2f00      	cmp	r7, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0xb2>
 8000a74:	e0ff      	b.n	8000c76 <__aeabi_dadd+0x2b2>
 8000a76:	0038      	movs	r0, r7
 8000a78:	f001 fa98 	bl	8001fac <__clzsi2>
 8000a7c:	0001      	movs	r1, r0
 8000a7e:	3908      	subs	r1, #8
 8000a80:	2320      	movs	r3, #32
 8000a82:	0022      	movs	r2, r4
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	408f      	lsls	r7, r1
 8000a88:	40da      	lsrs	r2, r3
 8000a8a:	408c      	lsls	r4, r1
 8000a8c:	4317      	orrs	r7, r2
 8000a8e:	42b1      	cmp	r1, r6
 8000a90:	da00      	bge.n	8000a94 <__aeabi_dadd+0xd0>
 8000a92:	e0ff      	b.n	8000c94 <__aeabi_dadd+0x2d0>
 8000a94:	1b89      	subs	r1, r1, r6
 8000a96:	1c4b      	adds	r3, r1, #1
 8000a98:	2b1f      	cmp	r3, #31
 8000a9a:	dd00      	ble.n	8000a9e <__aeabi_dadd+0xda>
 8000a9c:	e0a8      	b.n	8000bf0 <__aeabi_dadd+0x22c>
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	0039      	movs	r1, r7
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	4094      	lsls	r4, r2
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	1e62      	subs	r2, r4, #1
 8000aae:	4194      	sbcs	r4, r2
 8000ab0:	40df      	lsrs	r7, r3
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	4301      	orrs	r1, r0
 8000ab6:	430c      	orrs	r4, r1
 8000ab8:	0763      	lsls	r3, r4, #29
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_dadd+0x10c>
 8000abc:	230f      	movs	r3, #15
 8000abe:	4023      	ands	r3, r4
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d005      	beq.n	8000ad0 <__aeabi_dadd+0x10c>
 8000ac4:	1d23      	adds	r3, r4, #4
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	41a4      	sbcs	r4, r4
 8000aca:	4264      	negs	r4, r4
 8000acc:	193f      	adds	r7, r7, r4
 8000ace:	001c      	movs	r4, r3
 8000ad0:	023b      	lsls	r3, r7, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x112>
 8000ad4:	e09e      	b.n	8000c14 <__aeabi_dadd+0x250>
 8000ad6:	4b95      	ldr	r3, [pc, #596]	; (8000d2c <__aeabi_dadd+0x368>)
 8000ad8:	3601      	adds	r6, #1
 8000ada:	429e      	cmp	r6, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x11c>
 8000ade:	e0b7      	b.n	8000c50 <__aeabi_dadd+0x28c>
 8000ae0:	4a93      	ldr	r2, [pc, #588]	; (8000d30 <__aeabi_dadd+0x36c>)
 8000ae2:	08e4      	lsrs	r4, r4, #3
 8000ae4:	4017      	ands	r7, r2
 8000ae6:	077b      	lsls	r3, r7, #29
 8000ae8:	0571      	lsls	r1, r6, #21
 8000aea:	027f      	lsls	r7, r7, #9
 8000aec:	4323      	orrs	r3, r4
 8000aee:	0b3f      	lsrs	r7, r7, #12
 8000af0:	0d4a      	lsrs	r2, r1, #21
 8000af2:	0512      	lsls	r2, r2, #20
 8000af4:	433a      	orrs	r2, r7
 8000af6:	07ed      	lsls	r5, r5, #31
 8000af8:	432a      	orrs	r2, r5
 8000afa:	0018      	movs	r0, r3
 8000afc:	0011      	movs	r1, r2
 8000afe:	bce0      	pop	{r5, r6, r7}
 8000b00:	46ba      	mov	sl, r7
 8000b02:	46b1      	mov	r9, r6
 8000b04:	46a8      	mov	r8, r5
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d04b      	beq.n	8000ba4 <__aeabi_dadd+0x1e0>
 8000b0c:	464c      	mov	r4, r9
 8000b0e:	1ba4      	subs	r4, r4, r6
 8000b10:	46a4      	mov	ip, r4
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x154>
 8000b16:	e123      	b.n	8000d60 <__aeabi_dadd+0x39c>
 8000b18:	0004      	movs	r4, r0
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x15c>
 8000b1e:	e1af      	b.n	8000e80 <__aeabi_dadd+0x4bc>
 8000b20:	4662      	mov	r2, ip
 8000b22:	1e54      	subs	r4, r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x166>
 8000b28:	e215      	b.n	8000f56 <__aeabi_dadd+0x592>
 8000b2a:	4d80      	ldr	r5, [pc, #512]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b2c:	45ac      	cmp	ip, r5
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x16e>
 8000b30:	e1c8      	b.n	8000ec4 <__aeabi_dadd+0x500>
 8000b32:	46a4      	mov	ip, r4
 8000b34:	e11b      	b.n	8000d6e <__aeabi_dadd+0x3aa>
 8000b36:	464a      	mov	r2, r9
 8000b38:	1ab2      	subs	r2, r6, r2
 8000b3a:	4694      	mov	ip, r2
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x17e>
 8000b40:	e0ac      	b.n	8000c9c <__aeabi_dadd+0x2d8>
 8000b42:	464a      	mov	r2, r9
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d043      	beq.n	8000bd0 <__aeabi_dadd+0x20c>
 8000b48:	4a78      	ldr	r2, [pc, #480]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b4a:	4296      	cmp	r6, r2
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x18c>
 8000b4e:	e1af      	b.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	003c      	movs	r4, r7
 8000b54:	0412      	lsls	r2, r2, #16
 8000b56:	4314      	orrs	r4, r2
 8000b58:	46a0      	mov	r8, r4
 8000b5a:	4662      	mov	r2, ip
 8000b5c:	2a38      	cmp	r2, #56	; 0x38
 8000b5e:	dc67      	bgt.n	8000c30 <__aeabi_dadd+0x26c>
 8000b60:	2a1f      	cmp	r2, #31
 8000b62:	dc00      	bgt.n	8000b66 <__aeabi_dadd+0x1a2>
 8000b64:	e15f      	b.n	8000e26 <__aeabi_dadd+0x462>
 8000b66:	4647      	mov	r7, r8
 8000b68:	3a20      	subs	r2, #32
 8000b6a:	40d7      	lsrs	r7, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	2a20      	cmp	r2, #32
 8000b70:	d005      	beq.n	8000b7e <__aeabi_dadd+0x1ba>
 8000b72:	4664      	mov	r4, ip
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	1b12      	subs	r2, r2, r4
 8000b78:	4644      	mov	r4, r8
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	4321      	orrs	r1, r4
 8000b7e:	1e4a      	subs	r2, r1, #1
 8000b80:	4191      	sbcs	r1, r2
 8000b82:	000c      	movs	r4, r1
 8000b84:	433c      	orrs	r4, r7
 8000b86:	e057      	b.n	8000c38 <__aeabi_dadd+0x274>
 8000b88:	003a      	movs	r2, r7
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x1cc>
 8000b8e:	e105      	b.n	8000d9c <__aeabi_dadd+0x3d8>
 8000b90:	0022      	movs	r2, r4
 8000b92:	3a01      	subs	r2, #1
 8000b94:	2c01      	cmp	r4, #1
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x1d6>
 8000b98:	e182      	b.n	8000ea0 <__aeabi_dadd+0x4dc>
 8000b9a:	4c64      	ldr	r4, [pc, #400]	; (8000d2c <__aeabi_dadd+0x368>)
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d05b      	beq.n	8000c58 <__aeabi_dadd+0x294>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	e741      	b.n	8000a28 <__aeabi_dadd+0x64>
 8000ba4:	4c63      	ldr	r4, [pc, #396]	; (8000d34 <__aeabi_dadd+0x370>)
 8000ba6:	1c77      	adds	r7, r6, #1
 8000ba8:	4227      	tst	r7, r4
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x1ea>
 8000bac:	e0c4      	b.n	8000d38 <__aeabi_dadd+0x374>
 8000bae:	0004      	movs	r4, r0
 8000bb0:	431c      	orrs	r4, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_dadd+0x1f4>
 8000bb6:	e169      	b.n	8000e8c <__aeabi_dadd+0x4c8>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x1fa>
 8000bbc:	e1bf      	b.n	8000f3e <__aeabi_dadd+0x57a>
 8000bbe:	4644      	mov	r4, r8
 8000bc0:	430c      	orrs	r4, r1
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_dadd+0x202>
 8000bc4:	e1d0      	b.n	8000f68 <__aeabi_dadd+0x5a4>
 8000bc6:	0742      	lsls	r2, r0, #29
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	08c0      	lsrs	r0, r0, #3
 8000bce:	e029      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000bd0:	003a      	movs	r2, r7
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x214>
 8000bd6:	e170      	b.n	8000eba <__aeabi_dadd+0x4f6>
 8000bd8:	4662      	mov	r2, ip
 8000bda:	4664      	mov	r4, ip
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	2c01      	cmp	r4, #1
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x220>
 8000be2:	e0e0      	b.n	8000da6 <__aeabi_dadd+0x3e2>
 8000be4:	4c51      	ldr	r4, [pc, #324]	; (8000d2c <__aeabi_dadd+0x368>)
 8000be6:	45a4      	cmp	ip, r4
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x228>
 8000bea:	e161      	b.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000bec:	4694      	mov	ip, r2
 8000bee:	e7b4      	b.n	8000b5a <__aeabi_dadd+0x196>
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	391f      	subs	r1, #31
 8000bf4:	40ca      	lsrs	r2, r1
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d003      	beq.n	8000c04 <__aeabi_dadd+0x240>
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	409f      	lsls	r7, r3
 8000c02:	433c      	orrs	r4, r7
 8000c04:	1e63      	subs	r3, r4, #1
 8000c06:	419c      	sbcs	r4, r3
 8000c08:	2700      	movs	r7, #0
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	430c      	orrs	r4, r1
 8000c0e:	0763      	lsls	r3, r4, #29
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dadd+0x250>
 8000c12:	e753      	b.n	8000abc <__aeabi_dadd+0xf8>
 8000c14:	46b4      	mov	ip, r6
 8000c16:	08e4      	lsrs	r4, r4, #3
 8000c18:	077b      	lsls	r3, r7, #29
 8000c1a:	4323      	orrs	r3, r4
 8000c1c:	08f8      	lsrs	r0, r7, #3
 8000c1e:	4a43      	ldr	r2, [pc, #268]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c20:	4594      	cmp	ip, r2
 8000c22:	d01d      	beq.n	8000c60 <__aeabi_dadd+0x29c>
 8000c24:	4662      	mov	r2, ip
 8000c26:	0307      	lsls	r7, r0, #12
 8000c28:	0552      	lsls	r2, r2, #21
 8000c2a:	0b3f      	lsrs	r7, r7, #12
 8000c2c:	0d52      	lsrs	r2, r2, #21
 8000c2e:	e760      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c30:	4644      	mov	r4, r8
 8000c32:	430c      	orrs	r4, r1
 8000c34:	1e62      	subs	r2, r4, #1
 8000c36:	4194      	sbcs	r4, r2
 8000c38:	18e4      	adds	r4, r4, r3
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	425f      	negs	r7, r3
 8000c40:	183f      	adds	r7, r7, r0
 8000c42:	023b      	lsls	r3, r7, #8
 8000c44:	d5e3      	bpl.n	8000c0e <__aeabi_dadd+0x24a>
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c48:	3601      	adds	r6, #1
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_dadd+0x28c>
 8000c4e:	e0b5      	b.n	8000dbc <__aeabi_dadd+0x3f8>
 8000c50:	0032      	movs	r2, r6
 8000c52:	2700      	movs	r7, #0
 8000c54:	2300      	movs	r3, #0
 8000c56:	e74c      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c58:	0742      	lsls	r2, r0, #29
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	08c0      	lsrs	r0, r0, #3
 8000c60:	001a      	movs	r2, r3
 8000c62:	4302      	orrs	r2, r0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x2a4>
 8000c66:	e1e1      	b.n	800102c <__aeabi_dadd+0x668>
 8000c68:	2780      	movs	r7, #128	; 0x80
 8000c6a:	033f      	lsls	r7, r7, #12
 8000c6c:	4307      	orrs	r7, r0
 8000c6e:	033f      	lsls	r7, r7, #12
 8000c70:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <__aeabi_dadd+0x368>)
 8000c72:	0b3f      	lsrs	r7, r7, #12
 8000c74:	e73d      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8000c76:	0020      	movs	r0, r4
 8000c78:	f001 f998 	bl	8001fac <__clzsi2>
 8000c7c:	0001      	movs	r1, r0
 8000c7e:	3118      	adds	r1, #24
 8000c80:	291f      	cmp	r1, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dadd+0x2c2>
 8000c84:	e6fc      	b.n	8000a80 <__aeabi_dadd+0xbc>
 8000c86:	3808      	subs	r0, #8
 8000c88:	4084      	lsls	r4, r0
 8000c8a:	0027      	movs	r7, r4
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	42b1      	cmp	r1, r6
 8000c90:	db00      	blt.n	8000c94 <__aeabi_dadd+0x2d0>
 8000c92:	e6ff      	b.n	8000a94 <__aeabi_dadd+0xd0>
 8000c94:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <__aeabi_dadd+0x36c>)
 8000c96:	1a76      	subs	r6, r6, r1
 8000c98:	4017      	ands	r7, r2
 8000c9a:	e70d      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d02f      	beq.n	8000d00 <__aeabi_dadd+0x33c>
 8000ca0:	464a      	mov	r2, r9
 8000ca2:	1b92      	subs	r2, r2, r6
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_dadd+0x2e8>
 8000caa:	e0ad      	b.n	8000e08 <__aeabi_dadd+0x444>
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <__aeabi_dadd+0x368>)
 8000cae:	4591      	cmp	r9, r2
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x2f0>
 8000cb2:	e10f      	b.n	8000ed4 <__aeabi_dadd+0x510>
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	0412      	lsls	r2, r2, #16
 8000cb8:	4310      	orrs	r0, r2
 8000cba:	4662      	mov	r2, ip
 8000cbc:	2a38      	cmp	r2, #56	; 0x38
 8000cbe:	dd00      	ble.n	8000cc2 <__aeabi_dadd+0x2fe>
 8000cc0:	e10f      	b.n	8000ee2 <__aeabi_dadd+0x51e>
 8000cc2:	2a1f      	cmp	r2, #31
 8000cc4:	dd00      	ble.n	8000cc8 <__aeabi_dadd+0x304>
 8000cc6:	e180      	b.n	8000fca <__aeabi_dadd+0x606>
 8000cc8:	4664      	mov	r4, ip
 8000cca:	2220      	movs	r2, #32
 8000ccc:	001e      	movs	r6, r3
 8000cce:	1b12      	subs	r2, r2, r4
 8000cd0:	4667      	mov	r7, ip
 8000cd2:	0004      	movs	r4, r0
 8000cd4:	4093      	lsls	r3, r2
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	40fe      	lsrs	r6, r7
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	4193      	sbcs	r3, r2
 8000cde:	40f8      	lsrs	r0, r7
 8000ce0:	4334      	orrs	r4, r6
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	4480      	add	r8, r0
 8000ce6:	1864      	adds	r4, r4, r1
 8000ce8:	428c      	cmp	r4, r1
 8000cea:	41bf      	sbcs	r7, r7
 8000cec:	427f      	negs	r7, r7
 8000cee:	464e      	mov	r6, r9
 8000cf0:	4447      	add	r7, r8
 8000cf2:	e7a6      	b.n	8000c42 <__aeabi_dadd+0x27e>
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	1e4a      	subs	r2, r1, #1
 8000cfc:	4191      	sbcs	r1, r2
 8000cfe:	e6ad      	b.n	8000a5c <__aeabi_dadd+0x98>
 8000d00:	4c0c      	ldr	r4, [pc, #48]	; (8000d34 <__aeabi_dadd+0x370>)
 8000d02:	1c72      	adds	r2, r6, #1
 8000d04:	4222      	tst	r2, r4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_dadd+0x346>
 8000d08:	e0a1      	b.n	8000e4e <__aeabi_dadd+0x48a>
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dadd+0x350>
 8000d12:	e0fa      	b.n	8000f0a <__aeabi_dadd+0x546>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x356>
 8000d18:	e145      	b.n	8000fa6 <__aeabi_dadd+0x5e2>
 8000d1a:	003a      	movs	r2, r7
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_dadd+0x35e>
 8000d20:	e146      	b.n	8000fb0 <__aeabi_dadd+0x5ec>
 8000d22:	0742      	lsls	r2, r0, #29
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	08c0      	lsrs	r0, r0, #3
 8000d2a:	e77b      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000d2c:	000007ff 	.word	0x000007ff
 8000d30:	ff7fffff 	.word	0xff7fffff
 8000d34:	000007fe 	.word	0x000007fe
 8000d38:	4647      	mov	r7, r8
 8000d3a:	1a5c      	subs	r4, r3, r1
 8000d3c:	1bc2      	subs	r2, r0, r7
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	41bf      	sbcs	r7, r7
 8000d42:	427f      	negs	r7, r7
 8000d44:	46b9      	mov	r9, r7
 8000d46:	0017      	movs	r7, r2
 8000d48:	464a      	mov	r2, r9
 8000d4a:	1abf      	subs	r7, r7, r2
 8000d4c:	023a      	lsls	r2, r7, #8
 8000d4e:	d500      	bpl.n	8000d52 <__aeabi_dadd+0x38e>
 8000d50:	e08d      	b.n	8000e6e <__aeabi_dadd+0x4aa>
 8000d52:	0023      	movs	r3, r4
 8000d54:	433b      	orrs	r3, r7
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x396>
 8000d58:	e68a      	b.n	8000a70 <__aeabi_dadd+0xac>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	e761      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000d60:	4cb4      	ldr	r4, [pc, #720]	; (8001034 <__aeabi_dadd+0x670>)
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x3a4>
 8000d66:	e0ad      	b.n	8000ec4 <__aeabi_dadd+0x500>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	0424      	lsls	r4, r4, #16
 8000d6c:	4320      	orrs	r0, r4
 8000d6e:	4664      	mov	r4, ip
 8000d70:	2c38      	cmp	r4, #56	; 0x38
 8000d72:	dc3d      	bgt.n	8000df0 <__aeabi_dadd+0x42c>
 8000d74:	4662      	mov	r2, ip
 8000d76:	2c1f      	cmp	r4, #31
 8000d78:	dd00      	ble.n	8000d7c <__aeabi_dadd+0x3b8>
 8000d7a:	e0b7      	b.n	8000eec <__aeabi_dadd+0x528>
 8000d7c:	2520      	movs	r5, #32
 8000d7e:	001e      	movs	r6, r3
 8000d80:	1b2d      	subs	r5, r5, r4
 8000d82:	0004      	movs	r4, r0
 8000d84:	40ab      	lsls	r3, r5
 8000d86:	40ac      	lsls	r4, r5
 8000d88:	40d6      	lsrs	r6, r2
 8000d8a:	40d0      	lsrs	r0, r2
 8000d8c:	4642      	mov	r2, r8
 8000d8e:	1e5d      	subs	r5, r3, #1
 8000d90:	41ab      	sbcs	r3, r5
 8000d92:	4334      	orrs	r4, r6
 8000d94:	1a12      	subs	r2, r2, r0
 8000d96:	4690      	mov	r8, r2
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	e02c      	b.n	8000df6 <__aeabi_dadd+0x432>
 8000d9c:	0742      	lsls	r2, r0, #29
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	08c0      	lsrs	r0, r0, #3
 8000da4:	e73b      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000da6:	185c      	adds	r4, r3, r1
 8000da8:	429c      	cmp	r4, r3
 8000daa:	419b      	sbcs	r3, r3
 8000dac:	4440      	add	r0, r8
 8000dae:	425b      	negs	r3, r3
 8000db0:	18c7      	adds	r7, r0, r3
 8000db2:	2601      	movs	r6, #1
 8000db4:	023b      	lsls	r3, r7, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dadd+0x3f6>
 8000db8:	e729      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000dba:	2602      	movs	r6, #2
 8000dbc:	4a9e      	ldr	r2, [pc, #632]	; (8001038 <__aeabi_dadd+0x674>)
 8000dbe:	0863      	lsrs	r3, r4, #1
 8000dc0:	4017      	ands	r7, r2
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4014      	ands	r4, r2
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	07fb      	lsls	r3, r7, #31
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	087f      	lsrs	r7, r7, #1
 8000dce:	e673      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000dd0:	4644      	mov	r4, r8
 8000dd2:	3a20      	subs	r2, #32
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	4662      	mov	r2, ip
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d005      	beq.n	8000de8 <__aeabi_dadd+0x424>
 8000ddc:	4667      	mov	r7, ip
 8000dde:	2240      	movs	r2, #64	; 0x40
 8000de0:	1bd2      	subs	r2, r2, r7
 8000de2:	4647      	mov	r7, r8
 8000de4:	4097      	lsls	r7, r2
 8000de6:	4339      	orrs	r1, r7
 8000de8:	1e4a      	subs	r2, r1, #1
 8000dea:	4191      	sbcs	r1, r2
 8000dec:	4321      	orrs	r1, r4
 8000dee:	e635      	b.n	8000a5c <__aeabi_dadd+0x98>
 8000df0:	4303      	orrs	r3, r0
 8000df2:	1e58      	subs	r0, r3, #1
 8000df4:	4183      	sbcs	r3, r0
 8000df6:	1acc      	subs	r4, r1, r3
 8000df8:	42a1      	cmp	r1, r4
 8000dfa:	41bf      	sbcs	r7, r7
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	427f      	negs	r7, r7
 8000e00:	4655      	mov	r5, sl
 8000e02:	464e      	mov	r6, r9
 8000e04:	1bdf      	subs	r7, r3, r7
 8000e06:	e62e      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dadd+0x44c>
 8000e0e:	e0bd      	b.n	8000f8c <__aeabi_dadd+0x5c8>
 8000e10:	4662      	mov	r2, ip
 8000e12:	4664      	mov	r4, ip
 8000e14:	3a01      	subs	r2, #1
 8000e16:	2c01      	cmp	r4, #1
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x458>
 8000e1a:	e0e5      	b.n	8000fe8 <__aeabi_dadd+0x624>
 8000e1c:	4c85      	ldr	r4, [pc, #532]	; (8001034 <__aeabi_dadd+0x670>)
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d058      	beq.n	8000ed4 <__aeabi_dadd+0x510>
 8000e22:	4694      	mov	ip, r2
 8000e24:	e749      	b.n	8000cba <__aeabi_dadd+0x2f6>
 8000e26:	4664      	mov	r4, ip
 8000e28:	2220      	movs	r2, #32
 8000e2a:	1b12      	subs	r2, r2, r4
 8000e2c:	4644      	mov	r4, r8
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	000f      	movs	r7, r1
 8000e32:	46a1      	mov	r9, r4
 8000e34:	4664      	mov	r4, ip
 8000e36:	4091      	lsls	r1, r2
 8000e38:	40e7      	lsrs	r7, r4
 8000e3a:	464c      	mov	r4, r9
 8000e3c:	1e4a      	subs	r2, r1, #1
 8000e3e:	4191      	sbcs	r1, r2
 8000e40:	433c      	orrs	r4, r7
 8000e42:	4642      	mov	r2, r8
 8000e44:	430c      	orrs	r4, r1
 8000e46:	4661      	mov	r1, ip
 8000e48:	40ca      	lsrs	r2, r1
 8000e4a:	1880      	adds	r0, r0, r2
 8000e4c:	e6f4      	b.n	8000c38 <__aeabi_dadd+0x274>
 8000e4e:	4c79      	ldr	r4, [pc, #484]	; (8001034 <__aeabi_dadd+0x670>)
 8000e50:	42a2      	cmp	r2, r4
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x492>
 8000e54:	e6fd      	b.n	8000c52 <__aeabi_dadd+0x28e>
 8000e56:	1859      	adds	r1, r3, r1
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	419b      	sbcs	r3, r3
 8000e5c:	4440      	add	r0, r8
 8000e5e:	425f      	negs	r7, r3
 8000e60:	19c7      	adds	r7, r0, r7
 8000e62:	07fc      	lsls	r4, r7, #31
 8000e64:	0849      	lsrs	r1, r1, #1
 8000e66:	0016      	movs	r6, r2
 8000e68:	430c      	orrs	r4, r1
 8000e6a:	087f      	lsrs	r7, r7, #1
 8000e6c:	e6cf      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000e6e:	1acc      	subs	r4, r1, r3
 8000e70:	42a1      	cmp	r1, r4
 8000e72:	41bf      	sbcs	r7, r7
 8000e74:	4643      	mov	r3, r8
 8000e76:	427f      	negs	r7, r7
 8000e78:	1a18      	subs	r0, r3, r0
 8000e7a:	4655      	mov	r5, sl
 8000e7c:	1bc7      	subs	r7, r0, r7
 8000e7e:	e5f7      	b.n	8000a70 <__aeabi_dadd+0xac>
 8000e80:	08c9      	lsrs	r1, r1, #3
 8000e82:	077b      	lsls	r3, r7, #29
 8000e84:	4655      	mov	r5, sl
 8000e86:	430b      	orrs	r3, r1
 8000e88:	08f8      	lsrs	r0, r7, #3
 8000e8a:	e6c8      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000e8c:	2c00      	cmp	r4, #0
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x4ce>
 8000e90:	e081      	b.n	8000f96 <__aeabi_dadd+0x5d2>
 8000e92:	4643      	mov	r3, r8
 8000e94:	430b      	orrs	r3, r1
 8000e96:	d115      	bne.n	8000ec4 <__aeabi_dadd+0x500>
 8000e98:	2080      	movs	r0, #128	; 0x80
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	0300      	lsls	r0, r0, #12
 8000e9e:	e6e3      	b.n	8000c68 <__aeabi_dadd+0x2a4>
 8000ea0:	1a5c      	subs	r4, r3, r1
 8000ea2:	42a3      	cmp	r3, r4
 8000ea4:	419b      	sbcs	r3, r3
 8000ea6:	1bc7      	subs	r7, r0, r7
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	2601      	movs	r6, #1
 8000eac:	1aff      	subs	r7, r7, r3
 8000eae:	e5da      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000eb0:	0742      	lsls	r2, r0, #29
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	08c0      	lsrs	r0, r0, #3
 8000eb8:	e6d2      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000eba:	0742      	lsls	r2, r0, #29
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	08c0      	lsrs	r0, r0, #3
 8000ec2:	e6ac      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	08c9      	lsrs	r1, r1, #3
 8000eca:	075b      	lsls	r3, r3, #29
 8000ecc:	4655      	mov	r5, sl
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	08d0      	lsrs	r0, r2, #3
 8000ed2:	e6c5      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	4642      	mov	r2, r8
 8000ed8:	075b      	lsls	r3, r3, #29
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	430b      	orrs	r3, r1
 8000ede:	08d0      	lsrs	r0, r2, #3
 8000ee0:	e6be      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	001c      	movs	r4, r3
 8000ee6:	1e63      	subs	r3, r4, #1
 8000ee8:	419c      	sbcs	r4, r3
 8000eea:	e6fc      	b.n	8000ce6 <__aeabi_dadd+0x322>
 8000eec:	0002      	movs	r2, r0
 8000eee:	3c20      	subs	r4, #32
 8000ef0:	40e2      	lsrs	r2, r4
 8000ef2:	0014      	movs	r4, r2
 8000ef4:	4662      	mov	r2, ip
 8000ef6:	2a20      	cmp	r2, #32
 8000ef8:	d003      	beq.n	8000f02 <__aeabi_dadd+0x53e>
 8000efa:	2540      	movs	r5, #64	; 0x40
 8000efc:	1aad      	subs	r5, r5, r2
 8000efe:	40a8      	lsls	r0, r5
 8000f00:	4303      	orrs	r3, r0
 8000f02:	1e58      	subs	r0, r3, #1
 8000f04:	4183      	sbcs	r3, r0
 8000f06:	4323      	orrs	r3, r4
 8000f08:	e775      	b.n	8000df6 <__aeabi_dadd+0x432>
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d0e2      	beq.n	8000ed4 <__aeabi_dadd+0x510>
 8000f0e:	003a      	movs	r2, r7
 8000f10:	430a      	orrs	r2, r1
 8000f12:	d0cd      	beq.n	8000eb0 <__aeabi_dadd+0x4ec>
 8000f14:	0742      	lsls	r2, r0, #29
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	08c0      	lsrs	r0, r0, #3
 8000f1e:	0312      	lsls	r2, r2, #12
 8000f20:	4210      	tst	r0, r2
 8000f22:	d006      	beq.n	8000f32 <__aeabi_dadd+0x56e>
 8000f24:	08fc      	lsrs	r4, r7, #3
 8000f26:	4214      	tst	r4, r2
 8000f28:	d103      	bne.n	8000f32 <__aeabi_dadd+0x56e>
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	08cb      	lsrs	r3, r1, #3
 8000f2e:	077a      	lsls	r2, r7, #29
 8000f30:	4313      	orrs	r3, r2
 8000f32:	0f5a      	lsrs	r2, r3, #29
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	0752      	lsls	r2, r2, #29
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	e690      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	430b      	orrs	r3, r1
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x582>
 8000f44:	e709      	b.n	8000d5a <__aeabi_dadd+0x396>
 8000f46:	4643      	mov	r3, r8
 8000f48:	4642      	mov	r2, r8
 8000f4a:	08c9      	lsrs	r1, r1, #3
 8000f4c:	075b      	lsls	r3, r3, #29
 8000f4e:	4655      	mov	r5, sl
 8000f50:	430b      	orrs	r3, r1
 8000f52:	08d0      	lsrs	r0, r2, #3
 8000f54:	e666      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000f56:	1acc      	subs	r4, r1, r3
 8000f58:	42a1      	cmp	r1, r4
 8000f5a:	4189      	sbcs	r1, r1
 8000f5c:	1a3f      	subs	r7, r7, r0
 8000f5e:	4249      	negs	r1, r1
 8000f60:	4655      	mov	r5, sl
 8000f62:	2601      	movs	r6, #1
 8000f64:	1a7f      	subs	r7, r7, r1
 8000f66:	e57e      	b.n	8000a66 <__aeabi_dadd+0xa2>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	1a5c      	subs	r4, r3, r1
 8000f6c:	1a87      	subs	r7, r0, r2
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	4192      	sbcs	r2, r2
 8000f72:	4252      	negs	r2, r2
 8000f74:	1abf      	subs	r7, r7, r2
 8000f76:	023a      	lsls	r2, r7, #8
 8000f78:	d53d      	bpl.n	8000ff6 <__aeabi_dadd+0x632>
 8000f7a:	1acc      	subs	r4, r1, r3
 8000f7c:	42a1      	cmp	r1, r4
 8000f7e:	4189      	sbcs	r1, r1
 8000f80:	4643      	mov	r3, r8
 8000f82:	4249      	negs	r1, r1
 8000f84:	1a1f      	subs	r7, r3, r0
 8000f86:	4655      	mov	r5, sl
 8000f88:	1a7f      	subs	r7, r7, r1
 8000f8a:	e595      	b.n	8000ab8 <__aeabi_dadd+0xf4>
 8000f8c:	077b      	lsls	r3, r7, #29
 8000f8e:	08c9      	lsrs	r1, r1, #3
 8000f90:	430b      	orrs	r3, r1
 8000f92:	08f8      	lsrs	r0, r7, #3
 8000f94:	e643      	b.n	8000c1e <__aeabi_dadd+0x25a>
 8000f96:	4644      	mov	r4, r8
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	d130      	bne.n	8001000 <__aeabi_dadd+0x63c>
 8000f9e:	0742      	lsls	r2, r0, #29
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	08c0      	lsrs	r0, r0, #3
 8000fa4:	e65c      	b.n	8000c60 <__aeabi_dadd+0x29c>
 8000fa6:	077b      	lsls	r3, r7, #29
 8000fa8:	08c9      	lsrs	r1, r1, #3
 8000faa:	430b      	orrs	r3, r1
 8000fac:	08f8      	lsrs	r0, r7, #3
 8000fae:	e639      	b.n	8000c24 <__aeabi_dadd+0x260>
 8000fb0:	185c      	adds	r4, r3, r1
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	419b      	sbcs	r3, r3
 8000fb6:	4440      	add	r0, r8
 8000fb8:	425b      	negs	r3, r3
 8000fba:	18c7      	adds	r7, r0, r3
 8000fbc:	023b      	lsls	r3, r7, #8
 8000fbe:	d400      	bmi.n	8000fc2 <__aeabi_dadd+0x5fe>
 8000fc0:	e625      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <__aeabi_dadd+0x674>)
 8000fc4:	2601      	movs	r6, #1
 8000fc6:	401f      	ands	r7, r3
 8000fc8:	e621      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8000fca:	0004      	movs	r4, r0
 8000fcc:	3a20      	subs	r2, #32
 8000fce:	40d4      	lsrs	r4, r2
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	2a20      	cmp	r2, #32
 8000fd4:	d004      	beq.n	8000fe0 <__aeabi_dadd+0x61c>
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	4666      	mov	r6, ip
 8000fda:	1b92      	subs	r2, r2, r6
 8000fdc:	4090      	lsls	r0, r2
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	431c      	orrs	r4, r3
 8000fe6:	e67e      	b.n	8000ce6 <__aeabi_dadd+0x322>
 8000fe8:	185c      	adds	r4, r3, r1
 8000fea:	428c      	cmp	r4, r1
 8000fec:	4189      	sbcs	r1, r1
 8000fee:	4440      	add	r0, r8
 8000ff0:	4249      	negs	r1, r1
 8000ff2:	1847      	adds	r7, r0, r1
 8000ff4:	e6dd      	b.n	8000db2 <__aeabi_dadd+0x3ee>
 8000ff6:	0023      	movs	r3, r4
 8000ff8:	433b      	orrs	r3, r7
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x63a>
 8000ffc:	e6ad      	b.n	8000d5a <__aeabi_dadd+0x396>
 8000ffe:	e606      	b.n	8000c0e <__aeabi_dadd+0x24a>
 8001000:	0744      	lsls	r4, r0, #29
 8001002:	4323      	orrs	r3, r4
 8001004:	2480      	movs	r4, #128	; 0x80
 8001006:	08c0      	lsrs	r0, r0, #3
 8001008:	0324      	lsls	r4, r4, #12
 800100a:	4220      	tst	r0, r4
 800100c:	d008      	beq.n	8001020 <__aeabi_dadd+0x65c>
 800100e:	4642      	mov	r2, r8
 8001010:	08d6      	lsrs	r6, r2, #3
 8001012:	4226      	tst	r6, r4
 8001014:	d104      	bne.n	8001020 <__aeabi_dadd+0x65c>
 8001016:	4655      	mov	r5, sl
 8001018:	0030      	movs	r0, r6
 800101a:	08cb      	lsrs	r3, r1, #3
 800101c:	0751      	lsls	r1, r2, #29
 800101e:	430b      	orrs	r3, r1
 8001020:	0f5a      	lsrs	r2, r3, #29
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	0752      	lsls	r2, r2, #29
 8001028:	4313      	orrs	r3, r2
 800102a:	e619      	b.n	8000c60 <__aeabi_dadd+0x29c>
 800102c:	2300      	movs	r3, #0
 800102e:	4a01      	ldr	r2, [pc, #4]	; (8001034 <__aeabi_dadd+0x670>)
 8001030:	001f      	movs	r7, r3
 8001032:	e55e      	b.n	8000af2 <__aeabi_dadd+0x12e>
 8001034:	000007ff 	.word	0x000007ff
 8001038:	ff7fffff 	.word	0xff7fffff

0800103c <__eqdf2>:
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	464e      	mov	r6, r9
 8001040:	4645      	mov	r5, r8
 8001042:	46de      	mov	lr, fp
 8001044:	4657      	mov	r7, sl
 8001046:	4690      	mov	r8, r2
 8001048:	b5e0      	push	{r5, r6, r7, lr}
 800104a:	0017      	movs	r7, r2
 800104c:	031a      	lsls	r2, r3, #12
 800104e:	0b12      	lsrs	r2, r2, #12
 8001050:	0005      	movs	r5, r0
 8001052:	4684      	mov	ip, r0
 8001054:	4819      	ldr	r0, [pc, #100]	; (80010bc <__eqdf2+0x80>)
 8001056:	030e      	lsls	r6, r1, #12
 8001058:	004c      	lsls	r4, r1, #1
 800105a:	4691      	mov	r9, r2
 800105c:	005a      	lsls	r2, r3, #1
 800105e:	0fdb      	lsrs	r3, r3, #31
 8001060:	469b      	mov	fp, r3
 8001062:	0b36      	lsrs	r6, r6, #12
 8001064:	0d64      	lsrs	r4, r4, #21
 8001066:	0fc9      	lsrs	r1, r1, #31
 8001068:	0d52      	lsrs	r2, r2, #21
 800106a:	4284      	cmp	r4, r0
 800106c:	d019      	beq.n	80010a2 <__eqdf2+0x66>
 800106e:	4282      	cmp	r2, r0
 8001070:	d010      	beq.n	8001094 <__eqdf2+0x58>
 8001072:	2001      	movs	r0, #1
 8001074:	4294      	cmp	r4, r2
 8001076:	d10e      	bne.n	8001096 <__eqdf2+0x5a>
 8001078:	454e      	cmp	r6, r9
 800107a:	d10c      	bne.n	8001096 <__eqdf2+0x5a>
 800107c:	2001      	movs	r0, #1
 800107e:	45c4      	cmp	ip, r8
 8001080:	d109      	bne.n	8001096 <__eqdf2+0x5a>
 8001082:	4559      	cmp	r1, fp
 8001084:	d017      	beq.n	80010b6 <__eqdf2+0x7a>
 8001086:	2c00      	cmp	r4, #0
 8001088:	d105      	bne.n	8001096 <__eqdf2+0x5a>
 800108a:	0030      	movs	r0, r6
 800108c:	4328      	orrs	r0, r5
 800108e:	1e43      	subs	r3, r0, #1
 8001090:	4198      	sbcs	r0, r3
 8001092:	e000      	b.n	8001096 <__eqdf2+0x5a>
 8001094:	2001      	movs	r0, #1
 8001096:	bcf0      	pop	{r4, r5, r6, r7}
 8001098:	46bb      	mov	fp, r7
 800109a:	46b2      	mov	sl, r6
 800109c:	46a9      	mov	r9, r5
 800109e:	46a0      	mov	r8, r4
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	0033      	movs	r3, r6
 80010a4:	2001      	movs	r0, #1
 80010a6:	432b      	orrs	r3, r5
 80010a8:	d1f5      	bne.n	8001096 <__eqdf2+0x5a>
 80010aa:	42a2      	cmp	r2, r4
 80010ac:	d1f3      	bne.n	8001096 <__eqdf2+0x5a>
 80010ae:	464b      	mov	r3, r9
 80010b0:	433b      	orrs	r3, r7
 80010b2:	d1f0      	bne.n	8001096 <__eqdf2+0x5a>
 80010b4:	e7e2      	b.n	800107c <__eqdf2+0x40>
 80010b6:	2000      	movs	r0, #0
 80010b8:	e7ed      	b.n	8001096 <__eqdf2+0x5a>
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	000007ff 	.word	0x000007ff

080010c0 <__gedf2>:
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	4647      	mov	r7, r8
 80010c4:	46ce      	mov	lr, r9
 80010c6:	0004      	movs	r4, r0
 80010c8:	0018      	movs	r0, r3
 80010ca:	0016      	movs	r6, r2
 80010cc:	031b      	lsls	r3, r3, #12
 80010ce:	0b1b      	lsrs	r3, r3, #12
 80010d0:	4d2d      	ldr	r5, [pc, #180]	; (8001188 <__gedf2+0xc8>)
 80010d2:	004a      	lsls	r2, r1, #1
 80010d4:	4699      	mov	r9, r3
 80010d6:	b580      	push	{r7, lr}
 80010d8:	0043      	lsls	r3, r0, #1
 80010da:	030f      	lsls	r7, r1, #12
 80010dc:	46a4      	mov	ip, r4
 80010de:	46b0      	mov	r8, r6
 80010e0:	0b3f      	lsrs	r7, r7, #12
 80010e2:	0d52      	lsrs	r2, r2, #21
 80010e4:	0fc9      	lsrs	r1, r1, #31
 80010e6:	0d5b      	lsrs	r3, r3, #21
 80010e8:	0fc0      	lsrs	r0, r0, #31
 80010ea:	42aa      	cmp	r2, r5
 80010ec:	d021      	beq.n	8001132 <__gedf2+0x72>
 80010ee:	42ab      	cmp	r3, r5
 80010f0:	d013      	beq.n	800111a <__gedf2+0x5a>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d122      	bne.n	800113c <__gedf2+0x7c>
 80010f6:	433c      	orrs	r4, r7
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <__gedf2+0x42>
 80010fc:	464d      	mov	r5, r9
 80010fe:	432e      	orrs	r6, r5
 8001100:	d022      	beq.n	8001148 <__gedf2+0x88>
 8001102:	2c00      	cmp	r4, #0
 8001104:	d010      	beq.n	8001128 <__gedf2+0x68>
 8001106:	4281      	cmp	r1, r0
 8001108:	d022      	beq.n	8001150 <__gedf2+0x90>
 800110a:	2002      	movs	r0, #2
 800110c:	3901      	subs	r1, #1
 800110e:	4008      	ands	r0, r1
 8001110:	3801      	subs	r0, #1
 8001112:	bcc0      	pop	{r6, r7}
 8001114:	46b9      	mov	r9, r7
 8001116:	46b0      	mov	r8, r6
 8001118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111a:	464d      	mov	r5, r9
 800111c:	432e      	orrs	r6, r5
 800111e:	d129      	bne.n	8001174 <__gedf2+0xb4>
 8001120:	2a00      	cmp	r2, #0
 8001122:	d1f0      	bne.n	8001106 <__gedf2+0x46>
 8001124:	433c      	orrs	r4, r7
 8001126:	d1ee      	bne.n	8001106 <__gedf2+0x46>
 8001128:	2800      	cmp	r0, #0
 800112a:	d1f2      	bne.n	8001112 <__gedf2+0x52>
 800112c:	2001      	movs	r0, #1
 800112e:	4240      	negs	r0, r0
 8001130:	e7ef      	b.n	8001112 <__gedf2+0x52>
 8001132:	003d      	movs	r5, r7
 8001134:	4325      	orrs	r5, r4
 8001136:	d11d      	bne.n	8001174 <__gedf2+0xb4>
 8001138:	4293      	cmp	r3, r2
 800113a:	d0ee      	beq.n	800111a <__gedf2+0x5a>
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e2      	bne.n	8001106 <__gedf2+0x46>
 8001140:	464c      	mov	r4, r9
 8001142:	4326      	orrs	r6, r4
 8001144:	d1df      	bne.n	8001106 <__gedf2+0x46>
 8001146:	e7e0      	b.n	800110a <__gedf2+0x4a>
 8001148:	2000      	movs	r0, #0
 800114a:	2c00      	cmp	r4, #0
 800114c:	d0e1      	beq.n	8001112 <__gedf2+0x52>
 800114e:	e7dc      	b.n	800110a <__gedf2+0x4a>
 8001150:	429a      	cmp	r2, r3
 8001152:	dc0a      	bgt.n	800116a <__gedf2+0xaa>
 8001154:	dbe8      	blt.n	8001128 <__gedf2+0x68>
 8001156:	454f      	cmp	r7, r9
 8001158:	d8d7      	bhi.n	800110a <__gedf2+0x4a>
 800115a:	d00e      	beq.n	800117a <__gedf2+0xba>
 800115c:	2000      	movs	r0, #0
 800115e:	454f      	cmp	r7, r9
 8001160:	d2d7      	bcs.n	8001112 <__gedf2+0x52>
 8001162:	2900      	cmp	r1, #0
 8001164:	d0e2      	beq.n	800112c <__gedf2+0x6c>
 8001166:	0008      	movs	r0, r1
 8001168:	e7d3      	b.n	8001112 <__gedf2+0x52>
 800116a:	4243      	negs	r3, r0
 800116c:	4158      	adcs	r0, r3
 800116e:	0040      	lsls	r0, r0, #1
 8001170:	3801      	subs	r0, #1
 8001172:	e7ce      	b.n	8001112 <__gedf2+0x52>
 8001174:	2002      	movs	r0, #2
 8001176:	4240      	negs	r0, r0
 8001178:	e7cb      	b.n	8001112 <__gedf2+0x52>
 800117a:	45c4      	cmp	ip, r8
 800117c:	d8c5      	bhi.n	800110a <__gedf2+0x4a>
 800117e:	2000      	movs	r0, #0
 8001180:	45c4      	cmp	ip, r8
 8001182:	d2c6      	bcs.n	8001112 <__gedf2+0x52>
 8001184:	e7ed      	b.n	8001162 <__gedf2+0xa2>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	000007ff 	.word	0x000007ff

0800118c <__ledf2>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	4647      	mov	r7, r8
 8001190:	46ce      	mov	lr, r9
 8001192:	0004      	movs	r4, r0
 8001194:	0018      	movs	r0, r3
 8001196:	0016      	movs	r6, r2
 8001198:	031b      	lsls	r3, r3, #12
 800119a:	0b1b      	lsrs	r3, r3, #12
 800119c:	4d2c      	ldr	r5, [pc, #176]	; (8001250 <__ledf2+0xc4>)
 800119e:	004a      	lsls	r2, r1, #1
 80011a0:	4699      	mov	r9, r3
 80011a2:	b580      	push	{r7, lr}
 80011a4:	0043      	lsls	r3, r0, #1
 80011a6:	030f      	lsls	r7, r1, #12
 80011a8:	46a4      	mov	ip, r4
 80011aa:	46b0      	mov	r8, r6
 80011ac:	0b3f      	lsrs	r7, r7, #12
 80011ae:	0d52      	lsrs	r2, r2, #21
 80011b0:	0fc9      	lsrs	r1, r1, #31
 80011b2:	0d5b      	lsrs	r3, r3, #21
 80011b4:	0fc0      	lsrs	r0, r0, #31
 80011b6:	42aa      	cmp	r2, r5
 80011b8:	d00d      	beq.n	80011d6 <__ledf2+0x4a>
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	d010      	beq.n	80011e0 <__ledf2+0x54>
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d127      	bne.n	8001212 <__ledf2+0x86>
 80011c2:	433c      	orrs	r4, r7
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d111      	bne.n	80011ec <__ledf2+0x60>
 80011c8:	464d      	mov	r5, r9
 80011ca:	432e      	orrs	r6, r5
 80011cc:	d10e      	bne.n	80011ec <__ledf2+0x60>
 80011ce:	2000      	movs	r0, #0
 80011d0:	2c00      	cmp	r4, #0
 80011d2:	d015      	beq.n	8001200 <__ledf2+0x74>
 80011d4:	e00e      	b.n	80011f4 <__ledf2+0x68>
 80011d6:	003d      	movs	r5, r7
 80011d8:	4325      	orrs	r5, r4
 80011da:	d110      	bne.n	80011fe <__ledf2+0x72>
 80011dc:	4293      	cmp	r3, r2
 80011de:	d118      	bne.n	8001212 <__ledf2+0x86>
 80011e0:	464d      	mov	r5, r9
 80011e2:	432e      	orrs	r6, r5
 80011e4:	d10b      	bne.n	80011fe <__ledf2+0x72>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d102      	bne.n	80011f0 <__ledf2+0x64>
 80011ea:	433c      	orrs	r4, r7
 80011ec:	2c00      	cmp	r4, #0
 80011ee:	d00b      	beq.n	8001208 <__ledf2+0x7c>
 80011f0:	4281      	cmp	r1, r0
 80011f2:	d014      	beq.n	800121e <__ledf2+0x92>
 80011f4:	2002      	movs	r0, #2
 80011f6:	3901      	subs	r1, #1
 80011f8:	4008      	ands	r0, r1
 80011fa:	3801      	subs	r0, #1
 80011fc:	e000      	b.n	8001200 <__ledf2+0x74>
 80011fe:	2002      	movs	r0, #2
 8001200:	bcc0      	pop	{r6, r7}
 8001202:	46b9      	mov	r9, r7
 8001204:	46b0      	mov	r8, r6
 8001206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001208:	2800      	cmp	r0, #0
 800120a:	d1f9      	bne.n	8001200 <__ledf2+0x74>
 800120c:	2001      	movs	r0, #1
 800120e:	4240      	negs	r0, r0
 8001210:	e7f6      	b.n	8001200 <__ledf2+0x74>
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1ec      	bne.n	80011f0 <__ledf2+0x64>
 8001216:	464c      	mov	r4, r9
 8001218:	4326      	orrs	r6, r4
 800121a:	d1e9      	bne.n	80011f0 <__ledf2+0x64>
 800121c:	e7ea      	b.n	80011f4 <__ledf2+0x68>
 800121e:	429a      	cmp	r2, r3
 8001220:	dd04      	ble.n	800122c <__ledf2+0xa0>
 8001222:	4243      	negs	r3, r0
 8001224:	4158      	adcs	r0, r3
 8001226:	0040      	lsls	r0, r0, #1
 8001228:	3801      	subs	r0, #1
 800122a:	e7e9      	b.n	8001200 <__ledf2+0x74>
 800122c:	429a      	cmp	r2, r3
 800122e:	dbeb      	blt.n	8001208 <__ledf2+0x7c>
 8001230:	454f      	cmp	r7, r9
 8001232:	d8df      	bhi.n	80011f4 <__ledf2+0x68>
 8001234:	d006      	beq.n	8001244 <__ledf2+0xb8>
 8001236:	2000      	movs	r0, #0
 8001238:	454f      	cmp	r7, r9
 800123a:	d2e1      	bcs.n	8001200 <__ledf2+0x74>
 800123c:	2900      	cmp	r1, #0
 800123e:	d0e5      	beq.n	800120c <__ledf2+0x80>
 8001240:	0008      	movs	r0, r1
 8001242:	e7dd      	b.n	8001200 <__ledf2+0x74>
 8001244:	45c4      	cmp	ip, r8
 8001246:	d8d5      	bhi.n	80011f4 <__ledf2+0x68>
 8001248:	2000      	movs	r0, #0
 800124a:	45c4      	cmp	ip, r8
 800124c:	d2d8      	bcs.n	8001200 <__ledf2+0x74>
 800124e:	e7f5      	b.n	800123c <__ledf2+0xb0>
 8001250:	000007ff 	.word	0x000007ff

08001254 <__aeabi_dmul>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	4657      	mov	r7, sl
 8001258:	464e      	mov	r6, r9
 800125a:	4645      	mov	r5, r8
 800125c:	46de      	mov	lr, fp
 800125e:	b5e0      	push	{r5, r6, r7, lr}
 8001260:	4698      	mov	r8, r3
 8001262:	030c      	lsls	r4, r1, #12
 8001264:	004b      	lsls	r3, r1, #1
 8001266:	0006      	movs	r6, r0
 8001268:	4692      	mov	sl, r2
 800126a:	b087      	sub	sp, #28
 800126c:	0b24      	lsrs	r4, r4, #12
 800126e:	0d5b      	lsrs	r3, r3, #21
 8001270:	0fcf      	lsrs	r7, r1, #31
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_dmul+0x24>
 8001276:	e15c      	b.n	8001532 <__aeabi_dmul+0x2de>
 8001278:	4ad9      	ldr	r2, [pc, #868]	; (80015e0 <__aeabi_dmul+0x38c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d100      	bne.n	8001280 <__aeabi_dmul+0x2c>
 800127e:	e175      	b.n	800156c <__aeabi_dmul+0x318>
 8001280:	0f42      	lsrs	r2, r0, #29
 8001282:	00e4      	lsls	r4, r4, #3
 8001284:	4314      	orrs	r4, r2
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	0412      	lsls	r2, r2, #16
 800128a:	4314      	orrs	r4, r2
 800128c:	4ad5      	ldr	r2, [pc, #852]	; (80015e4 <__aeabi_dmul+0x390>)
 800128e:	00c5      	lsls	r5, r0, #3
 8001290:	4694      	mov	ip, r2
 8001292:	4463      	add	r3, ip
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	4699      	mov	r9, r3
 800129a:	469b      	mov	fp, r3
 800129c:	4643      	mov	r3, r8
 800129e:	4642      	mov	r2, r8
 80012a0:	031e      	lsls	r6, r3, #12
 80012a2:	0fd2      	lsrs	r2, r2, #31
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4650      	mov	r0, sl
 80012a8:	4690      	mov	r8, r2
 80012aa:	0b36      	lsrs	r6, r6, #12
 80012ac:	0d5b      	lsrs	r3, r3, #21
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dmul+0x5e>
 80012b0:	e120      	b.n	80014f4 <__aeabi_dmul+0x2a0>
 80012b2:	4acb      	ldr	r2, [pc, #812]	; (80015e0 <__aeabi_dmul+0x38c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d100      	bne.n	80012ba <__aeabi_dmul+0x66>
 80012b8:	e162      	b.n	8001580 <__aeabi_dmul+0x32c>
 80012ba:	49ca      	ldr	r1, [pc, #808]	; (80015e4 <__aeabi_dmul+0x390>)
 80012bc:	0f42      	lsrs	r2, r0, #29
 80012be:	468c      	mov	ip, r1
 80012c0:	9900      	ldr	r1, [sp, #0]
 80012c2:	4463      	add	r3, ip
 80012c4:	00f6      	lsls	r6, r6, #3
 80012c6:	468c      	mov	ip, r1
 80012c8:	4316      	orrs	r6, r2
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	449c      	add	ip, r3
 80012ce:	0412      	lsls	r2, r2, #16
 80012d0:	4663      	mov	r3, ip
 80012d2:	4316      	orrs	r6, r2
 80012d4:	00c2      	lsls	r2, r0, #3
 80012d6:	2000      	movs	r0, #0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	4643      	mov	r3, r8
 80012de:	3101      	adds	r1, #1
 80012e0:	468c      	mov	ip, r1
 80012e2:	4649      	mov	r1, r9
 80012e4:	407b      	eors	r3, r7
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	290f      	cmp	r1, #15
 80012ea:	d826      	bhi.n	800133a <__aeabi_dmul+0xe6>
 80012ec:	4bbe      	ldr	r3, [pc, #760]	; (80015e8 <__aeabi_dmul+0x394>)
 80012ee:	0089      	lsls	r1, r1, #2
 80012f0:	5859      	ldr	r1, [r3, r1]
 80012f2:	468f      	mov	pc, r1
 80012f4:	4643      	mov	r3, r8
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	0034      	movs	r4, r6
 80012fa:	0015      	movs	r5, r2
 80012fc:	4683      	mov	fp, r0
 80012fe:	465b      	mov	r3, fp
 8001300:	2b02      	cmp	r3, #2
 8001302:	d016      	beq.n	8001332 <__aeabi_dmul+0xde>
 8001304:	2b03      	cmp	r3, #3
 8001306:	d100      	bne.n	800130a <__aeabi_dmul+0xb6>
 8001308:	e203      	b.n	8001712 <__aeabi_dmul+0x4be>
 800130a:	2b01      	cmp	r3, #1
 800130c:	d000      	beq.n	8001310 <__aeabi_dmul+0xbc>
 800130e:	e0cd      	b.n	80014ac <__aeabi_dmul+0x258>
 8001310:	2200      	movs	r2, #0
 8001312:	2400      	movs	r4, #0
 8001314:	2500      	movs	r5, #0
 8001316:	9b01      	ldr	r3, [sp, #4]
 8001318:	0512      	lsls	r2, r2, #20
 800131a:	4322      	orrs	r2, r4
 800131c:	07db      	lsls	r3, r3, #31
 800131e:	431a      	orrs	r2, r3
 8001320:	0028      	movs	r0, r5
 8001322:	0011      	movs	r1, r2
 8001324:	b007      	add	sp, #28
 8001326:	bcf0      	pop	{r4, r5, r6, r7}
 8001328:	46bb      	mov	fp, r7
 800132a:	46b2      	mov	sl, r6
 800132c:	46a9      	mov	r9, r5
 800132e:	46a0      	mov	r8, r4
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	2400      	movs	r4, #0
 8001334:	2500      	movs	r5, #0
 8001336:	4aaa      	ldr	r2, [pc, #680]	; (80015e0 <__aeabi_dmul+0x38c>)
 8001338:	e7ed      	b.n	8001316 <__aeabi_dmul+0xc2>
 800133a:	0c28      	lsrs	r0, r5, #16
 800133c:	042d      	lsls	r5, r5, #16
 800133e:	0c2d      	lsrs	r5, r5, #16
 8001340:	002b      	movs	r3, r5
 8001342:	0c11      	lsrs	r1, r2, #16
 8001344:	0412      	lsls	r2, r2, #16
 8001346:	0c12      	lsrs	r2, r2, #16
 8001348:	4353      	muls	r3, r2
 800134a:	4698      	mov	r8, r3
 800134c:	0013      	movs	r3, r2
 800134e:	002f      	movs	r7, r5
 8001350:	4343      	muls	r3, r0
 8001352:	4699      	mov	r9, r3
 8001354:	434f      	muls	r7, r1
 8001356:	444f      	add	r7, r9
 8001358:	46bb      	mov	fp, r7
 800135a:	4647      	mov	r7, r8
 800135c:	000b      	movs	r3, r1
 800135e:	0c3f      	lsrs	r7, r7, #16
 8001360:	46ba      	mov	sl, r7
 8001362:	4343      	muls	r3, r0
 8001364:	44da      	add	sl, fp
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	45d1      	cmp	r9, sl
 800136a:	d904      	bls.n	8001376 <__aeabi_dmul+0x122>
 800136c:	2780      	movs	r7, #128	; 0x80
 800136e:	027f      	lsls	r7, r7, #9
 8001370:	46b9      	mov	r9, r7
 8001372:	444b      	add	r3, r9
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	4653      	mov	r3, sl
 8001378:	0c1b      	lsrs	r3, r3, #16
 800137a:	469b      	mov	fp, r3
 800137c:	4653      	mov	r3, sl
 800137e:	041f      	lsls	r7, r3, #16
 8001380:	4643      	mov	r3, r8
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	4698      	mov	r8, r3
 8001388:	003b      	movs	r3, r7
 800138a:	4443      	add	r3, r8
 800138c:	9304      	str	r3, [sp, #16]
 800138e:	0c33      	lsrs	r3, r6, #16
 8001390:	0436      	lsls	r6, r6, #16
 8001392:	0c36      	lsrs	r6, r6, #16
 8001394:	4698      	mov	r8, r3
 8001396:	0033      	movs	r3, r6
 8001398:	4343      	muls	r3, r0
 800139a:	4699      	mov	r9, r3
 800139c:	4643      	mov	r3, r8
 800139e:	4343      	muls	r3, r0
 80013a0:	002f      	movs	r7, r5
 80013a2:	469a      	mov	sl, r3
 80013a4:	4643      	mov	r3, r8
 80013a6:	4377      	muls	r7, r6
 80013a8:	435d      	muls	r5, r3
 80013aa:	0c38      	lsrs	r0, r7, #16
 80013ac:	444d      	add	r5, r9
 80013ae:	1945      	adds	r5, r0, r5
 80013b0:	45a9      	cmp	r9, r5
 80013b2:	d903      	bls.n	80013bc <__aeabi_dmul+0x168>
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	025b      	lsls	r3, r3, #9
 80013b8:	4699      	mov	r9, r3
 80013ba:	44ca      	add	sl, r9
 80013bc:	043f      	lsls	r7, r7, #16
 80013be:	0c28      	lsrs	r0, r5, #16
 80013c0:	0c3f      	lsrs	r7, r7, #16
 80013c2:	042d      	lsls	r5, r5, #16
 80013c4:	19ed      	adds	r5, r5, r7
 80013c6:	0c27      	lsrs	r7, r4, #16
 80013c8:	0424      	lsls	r4, r4, #16
 80013ca:	0c24      	lsrs	r4, r4, #16
 80013cc:	0003      	movs	r3, r0
 80013ce:	0020      	movs	r0, r4
 80013d0:	4350      	muls	r0, r2
 80013d2:	437a      	muls	r2, r7
 80013d4:	4691      	mov	r9, r2
 80013d6:	003a      	movs	r2, r7
 80013d8:	4453      	add	r3, sl
 80013da:	9305      	str	r3, [sp, #20]
 80013dc:	0c03      	lsrs	r3, r0, #16
 80013de:	469a      	mov	sl, r3
 80013e0:	434a      	muls	r2, r1
 80013e2:	4361      	muls	r1, r4
 80013e4:	4449      	add	r1, r9
 80013e6:	4451      	add	r1, sl
 80013e8:	44ab      	add	fp, r5
 80013ea:	4589      	cmp	r9, r1
 80013ec:	d903      	bls.n	80013f6 <__aeabi_dmul+0x1a2>
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	4699      	mov	r9, r3
 80013f4:	444a      	add	r2, r9
 80013f6:	0400      	lsls	r0, r0, #16
 80013f8:	0c0b      	lsrs	r3, r1, #16
 80013fa:	0c00      	lsrs	r0, r0, #16
 80013fc:	0409      	lsls	r1, r1, #16
 80013fe:	1809      	adds	r1, r1, r0
 8001400:	0020      	movs	r0, r4
 8001402:	4699      	mov	r9, r3
 8001404:	4643      	mov	r3, r8
 8001406:	4370      	muls	r0, r6
 8001408:	435c      	muls	r4, r3
 800140a:	437e      	muls	r6, r7
 800140c:	435f      	muls	r7, r3
 800140e:	0c03      	lsrs	r3, r0, #16
 8001410:	4698      	mov	r8, r3
 8001412:	19a4      	adds	r4, r4, r6
 8001414:	4444      	add	r4, r8
 8001416:	444a      	add	r2, r9
 8001418:	9703      	str	r7, [sp, #12]
 800141a:	42a6      	cmp	r6, r4
 800141c:	d904      	bls.n	8001428 <__aeabi_dmul+0x1d4>
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	4698      	mov	r8, r3
 8001424:	4447      	add	r7, r8
 8001426:	9703      	str	r7, [sp, #12]
 8001428:	0423      	lsls	r3, r4, #16
 800142a:	9e02      	ldr	r6, [sp, #8]
 800142c:	469a      	mov	sl, r3
 800142e:	9b05      	ldr	r3, [sp, #20]
 8001430:	445e      	add	r6, fp
 8001432:	4698      	mov	r8, r3
 8001434:	42ae      	cmp	r6, r5
 8001436:	41ad      	sbcs	r5, r5
 8001438:	1876      	adds	r6, r6, r1
 800143a:	428e      	cmp	r6, r1
 800143c:	4189      	sbcs	r1, r1
 800143e:	0400      	lsls	r0, r0, #16
 8001440:	0c00      	lsrs	r0, r0, #16
 8001442:	4450      	add	r0, sl
 8001444:	4440      	add	r0, r8
 8001446:	426d      	negs	r5, r5
 8001448:	1947      	adds	r7, r0, r5
 800144a:	46b8      	mov	r8, r7
 800144c:	4693      	mov	fp, r2
 800144e:	4249      	negs	r1, r1
 8001450:	4689      	mov	r9, r1
 8001452:	44c3      	add	fp, r8
 8001454:	44d9      	add	r9, fp
 8001456:	4298      	cmp	r0, r3
 8001458:	4180      	sbcs	r0, r0
 800145a:	45a8      	cmp	r8, r5
 800145c:	41ad      	sbcs	r5, r5
 800145e:	4593      	cmp	fp, r2
 8001460:	4192      	sbcs	r2, r2
 8001462:	4589      	cmp	r9, r1
 8001464:	4189      	sbcs	r1, r1
 8001466:	426d      	negs	r5, r5
 8001468:	4240      	negs	r0, r0
 800146a:	4328      	orrs	r0, r5
 800146c:	0c24      	lsrs	r4, r4, #16
 800146e:	4252      	negs	r2, r2
 8001470:	4249      	negs	r1, r1
 8001472:	430a      	orrs	r2, r1
 8001474:	9b03      	ldr	r3, [sp, #12]
 8001476:	1900      	adds	r0, r0, r4
 8001478:	1880      	adds	r0, r0, r2
 800147a:	18c7      	adds	r7, r0, r3
 800147c:	464b      	mov	r3, r9
 800147e:	0ddc      	lsrs	r4, r3, #23
 8001480:	9b04      	ldr	r3, [sp, #16]
 8001482:	0275      	lsls	r5, r6, #9
 8001484:	431d      	orrs	r5, r3
 8001486:	1e6a      	subs	r2, r5, #1
 8001488:	4195      	sbcs	r5, r2
 800148a:	464b      	mov	r3, r9
 800148c:	0df6      	lsrs	r6, r6, #23
 800148e:	027f      	lsls	r7, r7, #9
 8001490:	4335      	orrs	r5, r6
 8001492:	025a      	lsls	r2, r3, #9
 8001494:	433c      	orrs	r4, r7
 8001496:	4315      	orrs	r5, r2
 8001498:	01fb      	lsls	r3, r7, #7
 800149a:	d400      	bmi.n	800149e <__aeabi_dmul+0x24a>
 800149c:	e11c      	b.n	80016d8 <__aeabi_dmul+0x484>
 800149e:	2101      	movs	r1, #1
 80014a0:	086a      	lsrs	r2, r5, #1
 80014a2:	400d      	ands	r5, r1
 80014a4:	4315      	orrs	r5, r2
 80014a6:	07e2      	lsls	r2, r4, #31
 80014a8:	4315      	orrs	r5, r2
 80014aa:	0864      	lsrs	r4, r4, #1
 80014ac:	494f      	ldr	r1, [pc, #316]	; (80015ec <__aeabi_dmul+0x398>)
 80014ae:	4461      	add	r1, ip
 80014b0:	2900      	cmp	r1, #0
 80014b2:	dc00      	bgt.n	80014b6 <__aeabi_dmul+0x262>
 80014b4:	e0b0      	b.n	8001618 <__aeabi_dmul+0x3c4>
 80014b6:	076b      	lsls	r3, r5, #29
 80014b8:	d009      	beq.n	80014ce <__aeabi_dmul+0x27a>
 80014ba:	220f      	movs	r2, #15
 80014bc:	402a      	ands	r2, r5
 80014be:	2a04      	cmp	r2, #4
 80014c0:	d005      	beq.n	80014ce <__aeabi_dmul+0x27a>
 80014c2:	1d2a      	adds	r2, r5, #4
 80014c4:	42aa      	cmp	r2, r5
 80014c6:	41ad      	sbcs	r5, r5
 80014c8:	426d      	negs	r5, r5
 80014ca:	1964      	adds	r4, r4, r5
 80014cc:	0015      	movs	r5, r2
 80014ce:	01e3      	lsls	r3, r4, #7
 80014d0:	d504      	bpl.n	80014dc <__aeabi_dmul+0x288>
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	4a46      	ldr	r2, [pc, #280]	; (80015f0 <__aeabi_dmul+0x39c>)
 80014d6:	00c9      	lsls	r1, r1, #3
 80014d8:	4014      	ands	r4, r2
 80014da:	4461      	add	r1, ip
 80014dc:	4a45      	ldr	r2, [pc, #276]	; (80015f4 <__aeabi_dmul+0x3a0>)
 80014de:	4291      	cmp	r1, r2
 80014e0:	dd00      	ble.n	80014e4 <__aeabi_dmul+0x290>
 80014e2:	e726      	b.n	8001332 <__aeabi_dmul+0xde>
 80014e4:	0762      	lsls	r2, r4, #29
 80014e6:	08ed      	lsrs	r5, r5, #3
 80014e8:	0264      	lsls	r4, r4, #9
 80014ea:	0549      	lsls	r1, r1, #21
 80014ec:	4315      	orrs	r5, r2
 80014ee:	0b24      	lsrs	r4, r4, #12
 80014f0:	0d4a      	lsrs	r2, r1, #21
 80014f2:	e710      	b.n	8001316 <__aeabi_dmul+0xc2>
 80014f4:	4652      	mov	r2, sl
 80014f6:	4332      	orrs	r2, r6
 80014f8:	d100      	bne.n	80014fc <__aeabi_dmul+0x2a8>
 80014fa:	e07f      	b.n	80015fc <__aeabi_dmul+0x3a8>
 80014fc:	2e00      	cmp	r6, #0
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x2ae>
 8001500:	e0dc      	b.n	80016bc <__aeabi_dmul+0x468>
 8001502:	0030      	movs	r0, r6
 8001504:	f000 fd52 	bl	8001fac <__clzsi2>
 8001508:	0002      	movs	r2, r0
 800150a:	3a0b      	subs	r2, #11
 800150c:	231d      	movs	r3, #29
 800150e:	0001      	movs	r1, r0
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	4652      	mov	r2, sl
 8001514:	3908      	subs	r1, #8
 8001516:	40da      	lsrs	r2, r3
 8001518:	408e      	lsls	r6, r1
 800151a:	4316      	orrs	r6, r2
 800151c:	4652      	mov	r2, sl
 800151e:	408a      	lsls	r2, r1
 8001520:	9b00      	ldr	r3, [sp, #0]
 8001522:	4935      	ldr	r1, [pc, #212]	; (80015f8 <__aeabi_dmul+0x3a4>)
 8001524:	1a18      	subs	r0, r3, r0
 8001526:	0003      	movs	r3, r0
 8001528:	468c      	mov	ip, r1
 800152a:	4463      	add	r3, ip
 800152c:	2000      	movs	r0, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	e6d3      	b.n	80012da <__aeabi_dmul+0x86>
 8001532:	0025      	movs	r5, r4
 8001534:	4305      	orrs	r5, r0
 8001536:	d04a      	beq.n	80015ce <__aeabi_dmul+0x37a>
 8001538:	2c00      	cmp	r4, #0
 800153a:	d100      	bne.n	800153e <__aeabi_dmul+0x2ea>
 800153c:	e0b0      	b.n	80016a0 <__aeabi_dmul+0x44c>
 800153e:	0020      	movs	r0, r4
 8001540:	f000 fd34 	bl	8001fac <__clzsi2>
 8001544:	0001      	movs	r1, r0
 8001546:	0002      	movs	r2, r0
 8001548:	390b      	subs	r1, #11
 800154a:	231d      	movs	r3, #29
 800154c:	0010      	movs	r0, r2
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	0031      	movs	r1, r6
 8001552:	0035      	movs	r5, r6
 8001554:	3808      	subs	r0, #8
 8001556:	4084      	lsls	r4, r0
 8001558:	40d9      	lsrs	r1, r3
 800155a:	4085      	lsls	r5, r0
 800155c:	430c      	orrs	r4, r1
 800155e:	4826      	ldr	r0, [pc, #152]	; (80015f8 <__aeabi_dmul+0x3a4>)
 8001560:	1a83      	subs	r3, r0, r2
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	4699      	mov	r9, r3
 8001568:	469b      	mov	fp, r3
 800156a:	e697      	b.n	800129c <__aeabi_dmul+0x48>
 800156c:	0005      	movs	r5, r0
 800156e:	4325      	orrs	r5, r4
 8001570:	d126      	bne.n	80015c0 <__aeabi_dmul+0x36c>
 8001572:	2208      	movs	r2, #8
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2302      	movs	r3, #2
 8001578:	2400      	movs	r4, #0
 800157a:	4691      	mov	r9, r2
 800157c:	469b      	mov	fp, r3
 800157e:	e68d      	b.n	800129c <__aeabi_dmul+0x48>
 8001580:	4652      	mov	r2, sl
 8001582:	9b00      	ldr	r3, [sp, #0]
 8001584:	4332      	orrs	r2, r6
 8001586:	d110      	bne.n	80015aa <__aeabi_dmul+0x356>
 8001588:	4915      	ldr	r1, [pc, #84]	; (80015e0 <__aeabi_dmul+0x38c>)
 800158a:	2600      	movs	r6, #0
 800158c:	468c      	mov	ip, r1
 800158e:	4463      	add	r3, ip
 8001590:	4649      	mov	r1, r9
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2302      	movs	r3, #2
 8001596:	4319      	orrs	r1, r3
 8001598:	4689      	mov	r9, r1
 800159a:	2002      	movs	r0, #2
 800159c:	e69d      	b.n	80012da <__aeabi_dmul+0x86>
 800159e:	465b      	mov	r3, fp
 80015a0:	9701      	str	r7, [sp, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dmul+0x354>
 80015a6:	e6ad      	b.n	8001304 <__aeabi_dmul+0xb0>
 80015a8:	e6c3      	b.n	8001332 <__aeabi_dmul+0xde>
 80015aa:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <__aeabi_dmul+0x38c>)
 80015ac:	2003      	movs	r0, #3
 80015ae:	4694      	mov	ip, r2
 80015b0:	4463      	add	r3, ip
 80015b2:	464a      	mov	r2, r9
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2303      	movs	r3, #3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	4691      	mov	r9, r2
 80015bc:	4652      	mov	r2, sl
 80015be:	e68c      	b.n	80012da <__aeabi_dmul+0x86>
 80015c0:	220c      	movs	r2, #12
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2303      	movs	r3, #3
 80015c6:	0005      	movs	r5, r0
 80015c8:	4691      	mov	r9, r2
 80015ca:	469b      	mov	fp, r3
 80015cc:	e666      	b.n	800129c <__aeabi_dmul+0x48>
 80015ce:	2304      	movs	r3, #4
 80015d0:	4699      	mov	r9, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	2400      	movs	r4, #0
 80015da:	469b      	mov	fp, r3
 80015dc:	e65e      	b.n	800129c <__aeabi_dmul+0x48>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	000007ff 	.word	0x000007ff
 80015e4:	fffffc01 	.word	0xfffffc01
 80015e8:	08006630 	.word	0x08006630
 80015ec:	000003ff 	.word	0x000003ff
 80015f0:	feffffff 	.word	0xfeffffff
 80015f4:	000007fe 	.word	0x000007fe
 80015f8:	fffffc0d 	.word	0xfffffc0d
 80015fc:	4649      	mov	r1, r9
 80015fe:	2301      	movs	r3, #1
 8001600:	4319      	orrs	r1, r3
 8001602:	4689      	mov	r9, r1
 8001604:	2600      	movs	r6, #0
 8001606:	2001      	movs	r0, #1
 8001608:	e667      	b.n	80012da <__aeabi_dmul+0x86>
 800160a:	2300      	movs	r3, #0
 800160c:	2480      	movs	r4, #128	; 0x80
 800160e:	2500      	movs	r5, #0
 8001610:	4a43      	ldr	r2, [pc, #268]	; (8001720 <__aeabi_dmul+0x4cc>)
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	0324      	lsls	r4, r4, #12
 8001616:	e67e      	b.n	8001316 <__aeabi_dmul+0xc2>
 8001618:	2001      	movs	r0, #1
 800161a:	1a40      	subs	r0, r0, r1
 800161c:	2838      	cmp	r0, #56	; 0x38
 800161e:	dd00      	ble.n	8001622 <__aeabi_dmul+0x3ce>
 8001620:	e676      	b.n	8001310 <__aeabi_dmul+0xbc>
 8001622:	281f      	cmp	r0, #31
 8001624:	dd5b      	ble.n	80016de <__aeabi_dmul+0x48a>
 8001626:	221f      	movs	r2, #31
 8001628:	0023      	movs	r3, r4
 800162a:	4252      	negs	r2, r2
 800162c:	1a51      	subs	r1, r2, r1
 800162e:	40cb      	lsrs	r3, r1
 8001630:	0019      	movs	r1, r3
 8001632:	2820      	cmp	r0, #32
 8001634:	d003      	beq.n	800163e <__aeabi_dmul+0x3ea>
 8001636:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <__aeabi_dmul+0x4d0>)
 8001638:	4462      	add	r2, ip
 800163a:	4094      	lsls	r4, r2
 800163c:	4325      	orrs	r5, r4
 800163e:	1e6a      	subs	r2, r5, #1
 8001640:	4195      	sbcs	r5, r2
 8001642:	002a      	movs	r2, r5
 8001644:	430a      	orrs	r2, r1
 8001646:	2107      	movs	r1, #7
 8001648:	000d      	movs	r5, r1
 800164a:	2400      	movs	r4, #0
 800164c:	4015      	ands	r5, r2
 800164e:	4211      	tst	r1, r2
 8001650:	d05b      	beq.n	800170a <__aeabi_dmul+0x4b6>
 8001652:	210f      	movs	r1, #15
 8001654:	2400      	movs	r4, #0
 8001656:	4011      	ands	r1, r2
 8001658:	2904      	cmp	r1, #4
 800165a:	d053      	beq.n	8001704 <__aeabi_dmul+0x4b0>
 800165c:	1d11      	adds	r1, r2, #4
 800165e:	4291      	cmp	r1, r2
 8001660:	4192      	sbcs	r2, r2
 8001662:	4252      	negs	r2, r2
 8001664:	18a4      	adds	r4, r4, r2
 8001666:	000a      	movs	r2, r1
 8001668:	0223      	lsls	r3, r4, #8
 800166a:	d54b      	bpl.n	8001704 <__aeabi_dmul+0x4b0>
 800166c:	2201      	movs	r2, #1
 800166e:	2400      	movs	r4, #0
 8001670:	2500      	movs	r5, #0
 8001672:	e650      	b.n	8001316 <__aeabi_dmul+0xc2>
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	031b      	lsls	r3, r3, #12
 8001678:	421c      	tst	r4, r3
 800167a:	d009      	beq.n	8001690 <__aeabi_dmul+0x43c>
 800167c:	421e      	tst	r6, r3
 800167e:	d107      	bne.n	8001690 <__aeabi_dmul+0x43c>
 8001680:	4333      	orrs	r3, r6
 8001682:	031c      	lsls	r4, r3, #12
 8001684:	4643      	mov	r3, r8
 8001686:	0015      	movs	r5, r2
 8001688:	0b24      	lsrs	r4, r4, #12
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <__aeabi_dmul+0x4cc>)
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	e642      	b.n	8001316 <__aeabi_dmul+0xc2>
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	0312      	lsls	r2, r2, #12
 8001694:	4314      	orrs	r4, r2
 8001696:	0324      	lsls	r4, r4, #12
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <__aeabi_dmul+0x4cc>)
 800169a:	0b24      	lsrs	r4, r4, #12
 800169c:	9701      	str	r7, [sp, #4]
 800169e:	e63a      	b.n	8001316 <__aeabi_dmul+0xc2>
 80016a0:	f000 fc84 	bl	8001fac <__clzsi2>
 80016a4:	0001      	movs	r1, r0
 80016a6:	0002      	movs	r2, r0
 80016a8:	3115      	adds	r1, #21
 80016aa:	3220      	adds	r2, #32
 80016ac:	291c      	cmp	r1, #28
 80016ae:	dc00      	bgt.n	80016b2 <__aeabi_dmul+0x45e>
 80016b0:	e74b      	b.n	800154a <__aeabi_dmul+0x2f6>
 80016b2:	0034      	movs	r4, r6
 80016b4:	3808      	subs	r0, #8
 80016b6:	2500      	movs	r5, #0
 80016b8:	4084      	lsls	r4, r0
 80016ba:	e750      	b.n	800155e <__aeabi_dmul+0x30a>
 80016bc:	f000 fc76 	bl	8001fac <__clzsi2>
 80016c0:	0003      	movs	r3, r0
 80016c2:	001a      	movs	r2, r3
 80016c4:	3215      	adds	r2, #21
 80016c6:	3020      	adds	r0, #32
 80016c8:	2a1c      	cmp	r2, #28
 80016ca:	dc00      	bgt.n	80016ce <__aeabi_dmul+0x47a>
 80016cc:	e71e      	b.n	800150c <__aeabi_dmul+0x2b8>
 80016ce:	4656      	mov	r6, sl
 80016d0:	3b08      	subs	r3, #8
 80016d2:	2200      	movs	r2, #0
 80016d4:	409e      	lsls	r6, r3
 80016d6:	e723      	b.n	8001520 <__aeabi_dmul+0x2cc>
 80016d8:	9b00      	ldr	r3, [sp, #0]
 80016da:	469c      	mov	ip, r3
 80016dc:	e6e6      	b.n	80014ac <__aeabi_dmul+0x258>
 80016de:	4912      	ldr	r1, [pc, #72]	; (8001728 <__aeabi_dmul+0x4d4>)
 80016e0:	0022      	movs	r2, r4
 80016e2:	4461      	add	r1, ip
 80016e4:	002e      	movs	r6, r5
 80016e6:	408d      	lsls	r5, r1
 80016e8:	408a      	lsls	r2, r1
 80016ea:	40c6      	lsrs	r6, r0
 80016ec:	1e69      	subs	r1, r5, #1
 80016ee:	418d      	sbcs	r5, r1
 80016f0:	4332      	orrs	r2, r6
 80016f2:	432a      	orrs	r2, r5
 80016f4:	40c4      	lsrs	r4, r0
 80016f6:	0753      	lsls	r3, r2, #29
 80016f8:	d0b6      	beq.n	8001668 <__aeabi_dmul+0x414>
 80016fa:	210f      	movs	r1, #15
 80016fc:	4011      	ands	r1, r2
 80016fe:	2904      	cmp	r1, #4
 8001700:	d1ac      	bne.n	800165c <__aeabi_dmul+0x408>
 8001702:	e7b1      	b.n	8001668 <__aeabi_dmul+0x414>
 8001704:	0765      	lsls	r5, r4, #29
 8001706:	0264      	lsls	r4, r4, #9
 8001708:	0b24      	lsrs	r4, r4, #12
 800170a:	08d2      	lsrs	r2, r2, #3
 800170c:	4315      	orrs	r5, r2
 800170e:	2200      	movs	r2, #0
 8001710:	e601      	b.n	8001316 <__aeabi_dmul+0xc2>
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	0312      	lsls	r2, r2, #12
 8001716:	4314      	orrs	r4, r2
 8001718:	0324      	lsls	r4, r4, #12
 800171a:	4a01      	ldr	r2, [pc, #4]	; (8001720 <__aeabi_dmul+0x4cc>)
 800171c:	0b24      	lsrs	r4, r4, #12
 800171e:	e5fa      	b.n	8001316 <__aeabi_dmul+0xc2>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	0000043e 	.word	0x0000043e
 8001728:	0000041e 	.word	0x0000041e

0800172c <__aeabi_dsub>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	4657      	mov	r7, sl
 8001730:	464e      	mov	r6, r9
 8001732:	4645      	mov	r5, r8
 8001734:	46de      	mov	lr, fp
 8001736:	b5e0      	push	{r5, r6, r7, lr}
 8001738:	001e      	movs	r6, r3
 800173a:	0017      	movs	r7, r2
 800173c:	004a      	lsls	r2, r1, #1
 800173e:	030b      	lsls	r3, r1, #12
 8001740:	0d52      	lsrs	r2, r2, #21
 8001742:	0a5b      	lsrs	r3, r3, #9
 8001744:	4690      	mov	r8, r2
 8001746:	0f42      	lsrs	r2, r0, #29
 8001748:	431a      	orrs	r2, r3
 800174a:	0fcd      	lsrs	r5, r1, #31
 800174c:	4ccd      	ldr	r4, [pc, #820]	; (8001a84 <__aeabi_dsub+0x358>)
 800174e:	0331      	lsls	r1, r6, #12
 8001750:	00c3      	lsls	r3, r0, #3
 8001752:	4694      	mov	ip, r2
 8001754:	0070      	lsls	r0, r6, #1
 8001756:	0f7a      	lsrs	r2, r7, #29
 8001758:	0a49      	lsrs	r1, r1, #9
 800175a:	00ff      	lsls	r7, r7, #3
 800175c:	469a      	mov	sl, r3
 800175e:	46b9      	mov	r9, r7
 8001760:	0d40      	lsrs	r0, r0, #21
 8001762:	0ff6      	lsrs	r6, r6, #31
 8001764:	4311      	orrs	r1, r2
 8001766:	42a0      	cmp	r0, r4
 8001768:	d100      	bne.n	800176c <__aeabi_dsub+0x40>
 800176a:	e0b1      	b.n	80018d0 <__aeabi_dsub+0x1a4>
 800176c:	2201      	movs	r2, #1
 800176e:	4056      	eors	r6, r2
 8001770:	46b3      	mov	fp, r6
 8001772:	42b5      	cmp	r5, r6
 8001774:	d100      	bne.n	8001778 <__aeabi_dsub+0x4c>
 8001776:	e088      	b.n	800188a <__aeabi_dsub+0x15e>
 8001778:	4642      	mov	r2, r8
 800177a:	1a12      	subs	r2, r2, r0
 800177c:	2a00      	cmp	r2, #0
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dsub+0x56>
 8001780:	e0ae      	b.n	80018e0 <__aeabi_dsub+0x1b4>
 8001782:	2800      	cmp	r0, #0
 8001784:	d100      	bne.n	8001788 <__aeabi_dsub+0x5c>
 8001786:	e0c1      	b.n	800190c <__aeabi_dsub+0x1e0>
 8001788:	48be      	ldr	r0, [pc, #760]	; (8001a84 <__aeabi_dsub+0x358>)
 800178a:	4580      	cmp	r8, r0
 800178c:	d100      	bne.n	8001790 <__aeabi_dsub+0x64>
 800178e:	e151      	b.n	8001a34 <__aeabi_dsub+0x308>
 8001790:	2080      	movs	r0, #128	; 0x80
 8001792:	0400      	lsls	r0, r0, #16
 8001794:	4301      	orrs	r1, r0
 8001796:	2a38      	cmp	r2, #56	; 0x38
 8001798:	dd00      	ble.n	800179c <__aeabi_dsub+0x70>
 800179a:	e17b      	b.n	8001a94 <__aeabi_dsub+0x368>
 800179c:	2a1f      	cmp	r2, #31
 800179e:	dd00      	ble.n	80017a2 <__aeabi_dsub+0x76>
 80017a0:	e1ee      	b.n	8001b80 <__aeabi_dsub+0x454>
 80017a2:	2020      	movs	r0, #32
 80017a4:	003e      	movs	r6, r7
 80017a6:	1a80      	subs	r0, r0, r2
 80017a8:	000c      	movs	r4, r1
 80017aa:	40d6      	lsrs	r6, r2
 80017ac:	40d1      	lsrs	r1, r2
 80017ae:	4087      	lsls	r7, r0
 80017b0:	4662      	mov	r2, ip
 80017b2:	4084      	lsls	r4, r0
 80017b4:	1a52      	subs	r2, r2, r1
 80017b6:	1e78      	subs	r0, r7, #1
 80017b8:	4187      	sbcs	r7, r0
 80017ba:	4694      	mov	ip, r2
 80017bc:	4334      	orrs	r4, r6
 80017be:	4327      	orrs	r7, r4
 80017c0:	1bdc      	subs	r4, r3, r7
 80017c2:	42a3      	cmp	r3, r4
 80017c4:	419b      	sbcs	r3, r3
 80017c6:	4662      	mov	r2, ip
 80017c8:	425b      	negs	r3, r3
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	4699      	mov	r9, r3
 80017ce:	464b      	mov	r3, r9
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	d400      	bmi.n	80017d6 <__aeabi_dsub+0xaa>
 80017d4:	e118      	b.n	8001a08 <__aeabi_dsub+0x2dc>
 80017d6:	464b      	mov	r3, r9
 80017d8:	0258      	lsls	r0, r3, #9
 80017da:	0a43      	lsrs	r3, r0, #9
 80017dc:	4699      	mov	r9, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dsub+0xba>
 80017e4:	e137      	b.n	8001a56 <__aeabi_dsub+0x32a>
 80017e6:	4648      	mov	r0, r9
 80017e8:	f000 fbe0 	bl	8001fac <__clzsi2>
 80017ec:	0001      	movs	r1, r0
 80017ee:	3908      	subs	r1, #8
 80017f0:	2320      	movs	r3, #32
 80017f2:	0022      	movs	r2, r4
 80017f4:	4648      	mov	r0, r9
 80017f6:	1a5b      	subs	r3, r3, r1
 80017f8:	40da      	lsrs	r2, r3
 80017fa:	4088      	lsls	r0, r1
 80017fc:	408c      	lsls	r4, r1
 80017fe:	4643      	mov	r3, r8
 8001800:	4310      	orrs	r0, r2
 8001802:	4588      	cmp	r8, r1
 8001804:	dd00      	ble.n	8001808 <__aeabi_dsub+0xdc>
 8001806:	e136      	b.n	8001a76 <__aeabi_dsub+0x34a>
 8001808:	1ac9      	subs	r1, r1, r3
 800180a:	1c4b      	adds	r3, r1, #1
 800180c:	2b1f      	cmp	r3, #31
 800180e:	dd00      	ble.n	8001812 <__aeabi_dsub+0xe6>
 8001810:	e0ea      	b.n	80019e8 <__aeabi_dsub+0x2bc>
 8001812:	2220      	movs	r2, #32
 8001814:	0026      	movs	r6, r4
 8001816:	1ad2      	subs	r2, r2, r3
 8001818:	0001      	movs	r1, r0
 800181a:	4094      	lsls	r4, r2
 800181c:	40de      	lsrs	r6, r3
 800181e:	40d8      	lsrs	r0, r3
 8001820:	2300      	movs	r3, #0
 8001822:	4091      	lsls	r1, r2
 8001824:	1e62      	subs	r2, r4, #1
 8001826:	4194      	sbcs	r4, r2
 8001828:	4681      	mov	r9, r0
 800182a:	4698      	mov	r8, r3
 800182c:	4331      	orrs	r1, r6
 800182e:	430c      	orrs	r4, r1
 8001830:	0763      	lsls	r3, r4, #29
 8001832:	d009      	beq.n	8001848 <__aeabi_dsub+0x11c>
 8001834:	230f      	movs	r3, #15
 8001836:	4023      	ands	r3, r4
 8001838:	2b04      	cmp	r3, #4
 800183a:	d005      	beq.n	8001848 <__aeabi_dsub+0x11c>
 800183c:	1d23      	adds	r3, r4, #4
 800183e:	42a3      	cmp	r3, r4
 8001840:	41a4      	sbcs	r4, r4
 8001842:	4264      	negs	r4, r4
 8001844:	44a1      	add	r9, r4
 8001846:	001c      	movs	r4, r3
 8001848:	464b      	mov	r3, r9
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	d400      	bmi.n	8001850 <__aeabi_dsub+0x124>
 800184e:	e0de      	b.n	8001a0e <__aeabi_dsub+0x2e2>
 8001850:	4641      	mov	r1, r8
 8001852:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <__aeabi_dsub+0x358>)
 8001854:	3101      	adds	r1, #1
 8001856:	4299      	cmp	r1, r3
 8001858:	d100      	bne.n	800185c <__aeabi_dsub+0x130>
 800185a:	e0e7      	b.n	8001a2c <__aeabi_dsub+0x300>
 800185c:	464b      	mov	r3, r9
 800185e:	488a      	ldr	r0, [pc, #552]	; (8001a88 <__aeabi_dsub+0x35c>)
 8001860:	08e4      	lsrs	r4, r4, #3
 8001862:	4003      	ands	r3, r0
 8001864:	0018      	movs	r0, r3
 8001866:	0549      	lsls	r1, r1, #21
 8001868:	075b      	lsls	r3, r3, #29
 800186a:	0240      	lsls	r0, r0, #9
 800186c:	4323      	orrs	r3, r4
 800186e:	0d4a      	lsrs	r2, r1, #21
 8001870:	0b04      	lsrs	r4, r0, #12
 8001872:	0512      	lsls	r2, r2, #20
 8001874:	07ed      	lsls	r5, r5, #31
 8001876:	4322      	orrs	r2, r4
 8001878:	432a      	orrs	r2, r5
 800187a:	0018      	movs	r0, r3
 800187c:	0011      	movs	r1, r2
 800187e:	bcf0      	pop	{r4, r5, r6, r7}
 8001880:	46bb      	mov	fp, r7
 8001882:	46b2      	mov	sl, r6
 8001884:	46a9      	mov	r9, r5
 8001886:	46a0      	mov	r8, r4
 8001888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800188a:	4642      	mov	r2, r8
 800188c:	1a12      	subs	r2, r2, r0
 800188e:	2a00      	cmp	r2, #0
 8001890:	dd52      	ble.n	8001938 <__aeabi_dsub+0x20c>
 8001892:	2800      	cmp	r0, #0
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x16c>
 8001896:	e09c      	b.n	80019d2 <__aeabi_dsub+0x2a6>
 8001898:	45a0      	cmp	r8, r4
 800189a:	d100      	bne.n	800189e <__aeabi_dsub+0x172>
 800189c:	e0ca      	b.n	8001a34 <__aeabi_dsub+0x308>
 800189e:	2080      	movs	r0, #128	; 0x80
 80018a0:	0400      	lsls	r0, r0, #16
 80018a2:	4301      	orrs	r1, r0
 80018a4:	2a38      	cmp	r2, #56	; 0x38
 80018a6:	dd00      	ble.n	80018aa <__aeabi_dsub+0x17e>
 80018a8:	e149      	b.n	8001b3e <__aeabi_dsub+0x412>
 80018aa:	2a1f      	cmp	r2, #31
 80018ac:	dc00      	bgt.n	80018b0 <__aeabi_dsub+0x184>
 80018ae:	e197      	b.n	8001be0 <__aeabi_dsub+0x4b4>
 80018b0:	0010      	movs	r0, r2
 80018b2:	000e      	movs	r6, r1
 80018b4:	3820      	subs	r0, #32
 80018b6:	40c6      	lsrs	r6, r0
 80018b8:	2a20      	cmp	r2, #32
 80018ba:	d004      	beq.n	80018c6 <__aeabi_dsub+0x19a>
 80018bc:	2040      	movs	r0, #64	; 0x40
 80018be:	1a82      	subs	r2, r0, r2
 80018c0:	4091      	lsls	r1, r2
 80018c2:	430f      	orrs	r7, r1
 80018c4:	46b9      	mov	r9, r7
 80018c6:	464c      	mov	r4, r9
 80018c8:	1e62      	subs	r2, r4, #1
 80018ca:	4194      	sbcs	r4, r2
 80018cc:	4334      	orrs	r4, r6
 80018ce:	e13a      	b.n	8001b46 <__aeabi_dsub+0x41a>
 80018d0:	000a      	movs	r2, r1
 80018d2:	433a      	orrs	r2, r7
 80018d4:	d028      	beq.n	8001928 <__aeabi_dsub+0x1fc>
 80018d6:	46b3      	mov	fp, r6
 80018d8:	42b5      	cmp	r5, r6
 80018da:	d02b      	beq.n	8001934 <__aeabi_dsub+0x208>
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <__aeabi_dsub+0x360>)
 80018de:	4442      	add	r2, r8
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d05d      	beq.n	80019a0 <__aeabi_dsub+0x274>
 80018e4:	4642      	mov	r2, r8
 80018e6:	4644      	mov	r4, r8
 80018e8:	1a82      	subs	r2, r0, r2
 80018ea:	2c00      	cmp	r4, #0
 80018ec:	d000      	beq.n	80018f0 <__aeabi_dsub+0x1c4>
 80018ee:	e0f5      	b.n	8001adc <__aeabi_dsub+0x3b0>
 80018f0:	4665      	mov	r5, ip
 80018f2:	431d      	orrs	r5, r3
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dsub+0x1cc>
 80018f6:	e19c      	b.n	8001c32 <__aeabi_dsub+0x506>
 80018f8:	1e55      	subs	r5, r2, #1
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	d100      	bne.n	8001900 <__aeabi_dsub+0x1d4>
 80018fe:	e1fb      	b.n	8001cf8 <__aeabi_dsub+0x5cc>
 8001900:	4c60      	ldr	r4, [pc, #384]	; (8001a84 <__aeabi_dsub+0x358>)
 8001902:	42a2      	cmp	r2, r4
 8001904:	d100      	bne.n	8001908 <__aeabi_dsub+0x1dc>
 8001906:	e1bd      	b.n	8001c84 <__aeabi_dsub+0x558>
 8001908:	002a      	movs	r2, r5
 800190a:	e0f0      	b.n	8001aee <__aeabi_dsub+0x3c2>
 800190c:	0008      	movs	r0, r1
 800190e:	4338      	orrs	r0, r7
 8001910:	d100      	bne.n	8001914 <__aeabi_dsub+0x1e8>
 8001912:	e0c3      	b.n	8001a9c <__aeabi_dsub+0x370>
 8001914:	1e50      	subs	r0, r2, #1
 8001916:	2a01      	cmp	r2, #1
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x1f0>
 800191a:	e1a8      	b.n	8001c6e <__aeabi_dsub+0x542>
 800191c:	4c59      	ldr	r4, [pc, #356]	; (8001a84 <__aeabi_dsub+0x358>)
 800191e:	42a2      	cmp	r2, r4
 8001920:	d100      	bne.n	8001924 <__aeabi_dsub+0x1f8>
 8001922:	e087      	b.n	8001a34 <__aeabi_dsub+0x308>
 8001924:	0002      	movs	r2, r0
 8001926:	e736      	b.n	8001796 <__aeabi_dsub+0x6a>
 8001928:	2201      	movs	r2, #1
 800192a:	4056      	eors	r6, r2
 800192c:	46b3      	mov	fp, r6
 800192e:	42b5      	cmp	r5, r6
 8001930:	d000      	beq.n	8001934 <__aeabi_dsub+0x208>
 8001932:	e721      	b.n	8001778 <__aeabi_dsub+0x4c>
 8001934:	4a55      	ldr	r2, [pc, #340]	; (8001a8c <__aeabi_dsub+0x360>)
 8001936:	4442      	add	r2, r8
 8001938:	2a00      	cmp	r2, #0
 800193a:	d100      	bne.n	800193e <__aeabi_dsub+0x212>
 800193c:	e0b5      	b.n	8001aaa <__aeabi_dsub+0x37e>
 800193e:	4642      	mov	r2, r8
 8001940:	4644      	mov	r4, r8
 8001942:	1a82      	subs	r2, r0, r2
 8001944:	2c00      	cmp	r4, #0
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x21e>
 8001948:	e138      	b.n	8001bbc <__aeabi_dsub+0x490>
 800194a:	4e4e      	ldr	r6, [pc, #312]	; (8001a84 <__aeabi_dsub+0x358>)
 800194c:	42b0      	cmp	r0, r6
 800194e:	d100      	bne.n	8001952 <__aeabi_dsub+0x226>
 8001950:	e1de      	b.n	8001d10 <__aeabi_dsub+0x5e4>
 8001952:	2680      	movs	r6, #128	; 0x80
 8001954:	4664      	mov	r4, ip
 8001956:	0436      	lsls	r6, r6, #16
 8001958:	4334      	orrs	r4, r6
 800195a:	46a4      	mov	ip, r4
 800195c:	2a38      	cmp	r2, #56	; 0x38
 800195e:	dd00      	ble.n	8001962 <__aeabi_dsub+0x236>
 8001960:	e196      	b.n	8001c90 <__aeabi_dsub+0x564>
 8001962:	2a1f      	cmp	r2, #31
 8001964:	dd00      	ble.n	8001968 <__aeabi_dsub+0x23c>
 8001966:	e224      	b.n	8001db2 <__aeabi_dsub+0x686>
 8001968:	2620      	movs	r6, #32
 800196a:	1ab4      	subs	r4, r6, r2
 800196c:	46a2      	mov	sl, r4
 800196e:	4664      	mov	r4, ip
 8001970:	4656      	mov	r6, sl
 8001972:	40b4      	lsls	r4, r6
 8001974:	46a1      	mov	r9, r4
 8001976:	001c      	movs	r4, r3
 8001978:	464e      	mov	r6, r9
 800197a:	40d4      	lsrs	r4, r2
 800197c:	4326      	orrs	r6, r4
 800197e:	0034      	movs	r4, r6
 8001980:	4656      	mov	r6, sl
 8001982:	40b3      	lsls	r3, r6
 8001984:	1e5e      	subs	r6, r3, #1
 8001986:	41b3      	sbcs	r3, r6
 8001988:	431c      	orrs	r4, r3
 800198a:	4663      	mov	r3, ip
 800198c:	40d3      	lsrs	r3, r2
 800198e:	18c9      	adds	r1, r1, r3
 8001990:	19e4      	adds	r4, r4, r7
 8001992:	42bc      	cmp	r4, r7
 8001994:	41bf      	sbcs	r7, r7
 8001996:	427f      	negs	r7, r7
 8001998:	46b9      	mov	r9, r7
 800199a:	4680      	mov	r8, r0
 800199c:	4489      	add	r9, r1
 800199e:	e0d8      	b.n	8001b52 <__aeabi_dsub+0x426>
 80019a0:	4640      	mov	r0, r8
 80019a2:	4c3b      	ldr	r4, [pc, #236]	; (8001a90 <__aeabi_dsub+0x364>)
 80019a4:	3001      	adds	r0, #1
 80019a6:	4220      	tst	r0, r4
 80019a8:	d000      	beq.n	80019ac <__aeabi_dsub+0x280>
 80019aa:	e0b4      	b.n	8001b16 <__aeabi_dsub+0x3ea>
 80019ac:	4640      	mov	r0, r8
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d000      	beq.n	80019b4 <__aeabi_dsub+0x288>
 80019b2:	e144      	b.n	8001c3e <__aeabi_dsub+0x512>
 80019b4:	4660      	mov	r0, ip
 80019b6:	4318      	orrs	r0, r3
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x290>
 80019ba:	e190      	b.n	8001cde <__aeabi_dsub+0x5b2>
 80019bc:	0008      	movs	r0, r1
 80019be:	4338      	orrs	r0, r7
 80019c0:	d000      	beq.n	80019c4 <__aeabi_dsub+0x298>
 80019c2:	e1aa      	b.n	8001d1a <__aeabi_dsub+0x5ee>
 80019c4:	4661      	mov	r1, ip
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	0749      	lsls	r1, r1, #29
 80019ca:	430b      	orrs	r3, r1
 80019cc:	4661      	mov	r1, ip
 80019ce:	08cc      	lsrs	r4, r1, #3
 80019d0:	e027      	b.n	8001a22 <__aeabi_dsub+0x2f6>
 80019d2:	0008      	movs	r0, r1
 80019d4:	4338      	orrs	r0, r7
 80019d6:	d061      	beq.n	8001a9c <__aeabi_dsub+0x370>
 80019d8:	1e50      	subs	r0, r2, #1
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x2b4>
 80019de:	e139      	b.n	8001c54 <__aeabi_dsub+0x528>
 80019e0:	42a2      	cmp	r2, r4
 80019e2:	d027      	beq.n	8001a34 <__aeabi_dsub+0x308>
 80019e4:	0002      	movs	r2, r0
 80019e6:	e75d      	b.n	80018a4 <__aeabi_dsub+0x178>
 80019e8:	0002      	movs	r2, r0
 80019ea:	391f      	subs	r1, #31
 80019ec:	40ca      	lsrs	r2, r1
 80019ee:	0011      	movs	r1, r2
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d003      	beq.n	80019fc <__aeabi_dsub+0x2d0>
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	4098      	lsls	r0, r3
 80019fa:	4304      	orrs	r4, r0
 80019fc:	1e63      	subs	r3, r4, #1
 80019fe:	419c      	sbcs	r4, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	4699      	mov	r9, r3
 8001a04:	4698      	mov	r8, r3
 8001a06:	430c      	orrs	r4, r1
 8001a08:	0763      	lsls	r3, r4, #29
 8001a0a:	d000      	beq.n	8001a0e <__aeabi_dsub+0x2e2>
 8001a0c:	e712      	b.n	8001834 <__aeabi_dsub+0x108>
 8001a0e:	464b      	mov	r3, r9
 8001a10:	464a      	mov	r2, r9
 8001a12:	08e4      	lsrs	r4, r4, #3
 8001a14:	075b      	lsls	r3, r3, #29
 8001a16:	4323      	orrs	r3, r4
 8001a18:	08d4      	lsrs	r4, r2, #3
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	4919      	ldr	r1, [pc, #100]	; (8001a84 <__aeabi_dsub+0x358>)
 8001a1e:	428a      	cmp	r2, r1
 8001a20:	d00e      	beq.n	8001a40 <__aeabi_dsub+0x314>
 8001a22:	0324      	lsls	r4, r4, #12
 8001a24:	0552      	lsls	r2, r2, #21
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	0d52      	lsrs	r2, r2, #21
 8001a2a:	e722      	b.n	8001872 <__aeabi_dsub+0x146>
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	2400      	movs	r4, #0
 8001a30:	2300      	movs	r3, #0
 8001a32:	e71e      	b.n	8001872 <__aeabi_dsub+0x146>
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	4662      	mov	r2, ip
 8001a38:	0752      	lsls	r2, r2, #29
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	4662      	mov	r2, ip
 8001a3e:	08d4      	lsrs	r4, r2, #3
 8001a40:	001a      	movs	r2, r3
 8001a42:	4322      	orrs	r2, r4
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x31c>
 8001a46:	e1fc      	b.n	8001e42 <__aeabi_dsub+0x716>
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	0312      	lsls	r2, r2, #12
 8001a4c:	4314      	orrs	r4, r2
 8001a4e:	0324      	lsls	r4, r4, #12
 8001a50:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <__aeabi_dsub+0x358>)
 8001a52:	0b24      	lsrs	r4, r4, #12
 8001a54:	e70d      	b.n	8001872 <__aeabi_dsub+0x146>
 8001a56:	0020      	movs	r0, r4
 8001a58:	f000 faa8 	bl	8001fac <__clzsi2>
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	3118      	adds	r1, #24
 8001a60:	291f      	cmp	r1, #31
 8001a62:	dc00      	bgt.n	8001a66 <__aeabi_dsub+0x33a>
 8001a64:	e6c4      	b.n	80017f0 <__aeabi_dsub+0xc4>
 8001a66:	3808      	subs	r0, #8
 8001a68:	4084      	lsls	r4, r0
 8001a6a:	4643      	mov	r3, r8
 8001a6c:	0020      	movs	r0, r4
 8001a6e:	2400      	movs	r4, #0
 8001a70:	4588      	cmp	r8, r1
 8001a72:	dc00      	bgt.n	8001a76 <__aeabi_dsub+0x34a>
 8001a74:	e6c8      	b.n	8001808 <__aeabi_dsub+0xdc>
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__aeabi_dsub+0x35c>)
 8001a78:	1a5b      	subs	r3, r3, r1
 8001a7a:	4010      	ands	r0, r2
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	4681      	mov	r9, r0
 8001a80:	e6d6      	b.n	8001830 <__aeabi_dsub+0x104>
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	000007ff 	.word	0x000007ff
 8001a88:	ff7fffff 	.word	0xff7fffff
 8001a8c:	fffff801 	.word	0xfffff801
 8001a90:	000007fe 	.word	0x000007fe
 8001a94:	430f      	orrs	r7, r1
 8001a96:	1e7a      	subs	r2, r7, #1
 8001a98:	4197      	sbcs	r7, r2
 8001a9a:	e691      	b.n	80017c0 <__aeabi_dsub+0x94>
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	0749      	lsls	r1, r1, #29
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	4661      	mov	r1, ip
 8001aa6:	08cc      	lsrs	r4, r1, #3
 8001aa8:	e7b8      	b.n	8001a1c <__aeabi_dsub+0x2f0>
 8001aaa:	4640      	mov	r0, r8
 8001aac:	4cd3      	ldr	r4, [pc, #844]	; (8001dfc <__aeabi_dsub+0x6d0>)
 8001aae:	3001      	adds	r0, #1
 8001ab0:	4220      	tst	r0, r4
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dsub+0x38a>
 8001ab4:	e0a2      	b.n	8001bfc <__aeabi_dsub+0x4d0>
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d000      	beq.n	8001abe <__aeabi_dsub+0x392>
 8001abc:	e101      	b.n	8001cc2 <__aeabi_dsub+0x596>
 8001abe:	4660      	mov	r0, ip
 8001ac0:	4318      	orrs	r0, r3
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x39a>
 8001ac4:	e15e      	b.n	8001d84 <__aeabi_dsub+0x658>
 8001ac6:	0008      	movs	r0, r1
 8001ac8:	4338      	orrs	r0, r7
 8001aca:	d000      	beq.n	8001ace <__aeabi_dsub+0x3a2>
 8001acc:	e15f      	b.n	8001d8e <__aeabi_dsub+0x662>
 8001ace:	4661      	mov	r1, ip
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	0749      	lsls	r1, r1, #29
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	4661      	mov	r1, ip
 8001ad8:	08cc      	lsrs	r4, r1, #3
 8001ada:	e7a2      	b.n	8001a22 <__aeabi_dsub+0x2f6>
 8001adc:	4dc8      	ldr	r5, [pc, #800]	; (8001e00 <__aeabi_dsub+0x6d4>)
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x3b8>
 8001ae2:	e0cf      	b.n	8001c84 <__aeabi_dsub+0x558>
 8001ae4:	2580      	movs	r5, #128	; 0x80
 8001ae6:	4664      	mov	r4, ip
 8001ae8:	042d      	lsls	r5, r5, #16
 8001aea:	432c      	orrs	r4, r5
 8001aec:	46a4      	mov	ip, r4
 8001aee:	2a38      	cmp	r2, #56	; 0x38
 8001af0:	dc56      	bgt.n	8001ba0 <__aeabi_dsub+0x474>
 8001af2:	2a1f      	cmp	r2, #31
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dsub+0x3cc>
 8001af6:	e0d1      	b.n	8001c9c <__aeabi_dsub+0x570>
 8001af8:	2520      	movs	r5, #32
 8001afa:	001e      	movs	r6, r3
 8001afc:	1aad      	subs	r5, r5, r2
 8001afe:	4664      	mov	r4, ip
 8001b00:	40ab      	lsls	r3, r5
 8001b02:	40ac      	lsls	r4, r5
 8001b04:	40d6      	lsrs	r6, r2
 8001b06:	1e5d      	subs	r5, r3, #1
 8001b08:	41ab      	sbcs	r3, r5
 8001b0a:	4334      	orrs	r4, r6
 8001b0c:	4323      	orrs	r3, r4
 8001b0e:	4664      	mov	r4, ip
 8001b10:	40d4      	lsrs	r4, r2
 8001b12:	1b09      	subs	r1, r1, r4
 8001b14:	e049      	b.n	8001baa <__aeabi_dsub+0x47e>
 8001b16:	4660      	mov	r0, ip
 8001b18:	1bdc      	subs	r4, r3, r7
 8001b1a:	1a46      	subs	r6, r0, r1
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	4180      	sbcs	r0, r0
 8001b20:	4240      	negs	r0, r0
 8001b22:	4681      	mov	r9, r0
 8001b24:	0030      	movs	r0, r6
 8001b26:	464e      	mov	r6, r9
 8001b28:	1b80      	subs	r0, r0, r6
 8001b2a:	4681      	mov	r9, r0
 8001b2c:	0200      	lsls	r0, r0, #8
 8001b2e:	d476      	bmi.n	8001c1e <__aeabi_dsub+0x4f2>
 8001b30:	464b      	mov	r3, r9
 8001b32:	4323      	orrs	r3, r4
 8001b34:	d000      	beq.n	8001b38 <__aeabi_dsub+0x40c>
 8001b36:	e652      	b.n	80017de <__aeabi_dsub+0xb2>
 8001b38:	2400      	movs	r4, #0
 8001b3a:	2500      	movs	r5, #0
 8001b3c:	e771      	b.n	8001a22 <__aeabi_dsub+0x2f6>
 8001b3e:	4339      	orrs	r1, r7
 8001b40:	000c      	movs	r4, r1
 8001b42:	1e62      	subs	r2, r4, #1
 8001b44:	4194      	sbcs	r4, r2
 8001b46:	18e4      	adds	r4, r4, r3
 8001b48:	429c      	cmp	r4, r3
 8001b4a:	419b      	sbcs	r3, r3
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	4463      	add	r3, ip
 8001b50:	4699      	mov	r9, r3
 8001b52:	464b      	mov	r3, r9
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	d400      	bmi.n	8001b5a <__aeabi_dsub+0x42e>
 8001b58:	e756      	b.n	8001a08 <__aeabi_dsub+0x2dc>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	4ba8      	ldr	r3, [pc, #672]	; (8001e00 <__aeabi_dsub+0x6d4>)
 8001b60:	44e0      	add	r8, ip
 8001b62:	4598      	cmp	r8, r3
 8001b64:	d038      	beq.n	8001bd8 <__aeabi_dsub+0x4ac>
 8001b66:	464b      	mov	r3, r9
 8001b68:	48a6      	ldr	r0, [pc, #664]	; (8001e04 <__aeabi_dsub+0x6d8>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4003      	ands	r3, r0
 8001b6e:	0018      	movs	r0, r3
 8001b70:	0863      	lsrs	r3, r4, #1
 8001b72:	4014      	ands	r4, r2
 8001b74:	431c      	orrs	r4, r3
 8001b76:	07c3      	lsls	r3, r0, #31
 8001b78:	431c      	orrs	r4, r3
 8001b7a:	0843      	lsrs	r3, r0, #1
 8001b7c:	4699      	mov	r9, r3
 8001b7e:	e657      	b.n	8001830 <__aeabi_dsub+0x104>
 8001b80:	0010      	movs	r0, r2
 8001b82:	000e      	movs	r6, r1
 8001b84:	3820      	subs	r0, #32
 8001b86:	40c6      	lsrs	r6, r0
 8001b88:	2a20      	cmp	r2, #32
 8001b8a:	d004      	beq.n	8001b96 <__aeabi_dsub+0x46a>
 8001b8c:	2040      	movs	r0, #64	; 0x40
 8001b8e:	1a82      	subs	r2, r0, r2
 8001b90:	4091      	lsls	r1, r2
 8001b92:	430f      	orrs	r7, r1
 8001b94:	46b9      	mov	r9, r7
 8001b96:	464f      	mov	r7, r9
 8001b98:	1e7a      	subs	r2, r7, #1
 8001b9a:	4197      	sbcs	r7, r2
 8001b9c:	4337      	orrs	r7, r6
 8001b9e:	e60f      	b.n	80017c0 <__aeabi_dsub+0x94>
 8001ba0:	4662      	mov	r2, ip
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	4193      	sbcs	r3, r2
 8001baa:	1afc      	subs	r4, r7, r3
 8001bac:	42a7      	cmp	r7, r4
 8001bae:	41bf      	sbcs	r7, r7
 8001bb0:	427f      	negs	r7, r7
 8001bb2:	1bcb      	subs	r3, r1, r7
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	465d      	mov	r5, fp
 8001bb8:	4680      	mov	r8, r0
 8001bba:	e608      	b.n	80017ce <__aeabi_dsub+0xa2>
 8001bbc:	4666      	mov	r6, ip
 8001bbe:	431e      	orrs	r6, r3
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x498>
 8001bc2:	e0be      	b.n	8001d42 <__aeabi_dsub+0x616>
 8001bc4:	1e56      	subs	r6, r2, #1
 8001bc6:	2a01      	cmp	r2, #1
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x4a0>
 8001bca:	e109      	b.n	8001de0 <__aeabi_dsub+0x6b4>
 8001bcc:	4c8c      	ldr	r4, [pc, #560]	; (8001e00 <__aeabi_dsub+0x6d4>)
 8001bce:	42a2      	cmp	r2, r4
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x4a8>
 8001bd2:	e119      	b.n	8001e08 <__aeabi_dsub+0x6dc>
 8001bd4:	0032      	movs	r2, r6
 8001bd6:	e6c1      	b.n	800195c <__aeabi_dsub+0x230>
 8001bd8:	4642      	mov	r2, r8
 8001bda:	2400      	movs	r4, #0
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e648      	b.n	8001872 <__aeabi_dsub+0x146>
 8001be0:	2020      	movs	r0, #32
 8001be2:	000c      	movs	r4, r1
 8001be4:	1a80      	subs	r0, r0, r2
 8001be6:	003e      	movs	r6, r7
 8001be8:	4087      	lsls	r7, r0
 8001bea:	4084      	lsls	r4, r0
 8001bec:	40d6      	lsrs	r6, r2
 8001bee:	1e78      	subs	r0, r7, #1
 8001bf0:	4187      	sbcs	r7, r0
 8001bf2:	40d1      	lsrs	r1, r2
 8001bf4:	4334      	orrs	r4, r6
 8001bf6:	433c      	orrs	r4, r7
 8001bf8:	448c      	add	ip, r1
 8001bfa:	e7a4      	b.n	8001b46 <__aeabi_dsub+0x41a>
 8001bfc:	4a80      	ldr	r2, [pc, #512]	; (8001e00 <__aeabi_dsub+0x6d4>)
 8001bfe:	4290      	cmp	r0, r2
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x4d8>
 8001c02:	e0e9      	b.n	8001dd8 <__aeabi_dsub+0x6ac>
 8001c04:	19df      	adds	r7, r3, r7
 8001c06:	429f      	cmp	r7, r3
 8001c08:	419b      	sbcs	r3, r3
 8001c0a:	4461      	add	r1, ip
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	18c9      	adds	r1, r1, r3
 8001c10:	07cc      	lsls	r4, r1, #31
 8001c12:	087f      	lsrs	r7, r7, #1
 8001c14:	084b      	lsrs	r3, r1, #1
 8001c16:	4699      	mov	r9, r3
 8001c18:	4680      	mov	r8, r0
 8001c1a:	433c      	orrs	r4, r7
 8001c1c:	e6f4      	b.n	8001a08 <__aeabi_dsub+0x2dc>
 8001c1e:	1afc      	subs	r4, r7, r3
 8001c20:	42a7      	cmp	r7, r4
 8001c22:	41bf      	sbcs	r7, r7
 8001c24:	4663      	mov	r3, ip
 8001c26:	427f      	negs	r7, r7
 8001c28:	1ac9      	subs	r1, r1, r3
 8001c2a:	1bcb      	subs	r3, r1, r7
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	465d      	mov	r5, fp
 8001c30:	e5d5      	b.n	80017de <__aeabi_dsub+0xb2>
 8001c32:	08ff      	lsrs	r7, r7, #3
 8001c34:	074b      	lsls	r3, r1, #29
 8001c36:	465d      	mov	r5, fp
 8001c38:	433b      	orrs	r3, r7
 8001c3a:	08cc      	lsrs	r4, r1, #3
 8001c3c:	e6ee      	b.n	8001a1c <__aeabi_dsub+0x2f0>
 8001c3e:	4662      	mov	r2, ip
 8001c40:	431a      	orrs	r2, r3
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x51a>
 8001c44:	e082      	b.n	8001d4c <__aeabi_dsub+0x620>
 8001c46:	000b      	movs	r3, r1
 8001c48:	433b      	orrs	r3, r7
 8001c4a:	d11b      	bne.n	8001c84 <__aeabi_dsub+0x558>
 8001c4c:	2480      	movs	r4, #128	; 0x80
 8001c4e:	2500      	movs	r5, #0
 8001c50:	0324      	lsls	r4, r4, #12
 8001c52:	e6f9      	b.n	8001a48 <__aeabi_dsub+0x31c>
 8001c54:	19dc      	adds	r4, r3, r7
 8001c56:	429c      	cmp	r4, r3
 8001c58:	419b      	sbcs	r3, r3
 8001c5a:	4461      	add	r1, ip
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	425b      	negs	r3, r3
 8001c60:	4499      	add	r9, r3
 8001c62:	464b      	mov	r3, r9
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	d444      	bmi.n	8001cf2 <__aeabi_dsub+0x5c6>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4698      	mov	r8, r3
 8001c6c:	e6cc      	b.n	8001a08 <__aeabi_dsub+0x2dc>
 8001c6e:	1bdc      	subs	r4, r3, r7
 8001c70:	4662      	mov	r2, ip
 8001c72:	42a3      	cmp	r3, r4
 8001c74:	419b      	sbcs	r3, r3
 8001c76:	1a51      	subs	r1, r2, r1
 8001c78:	425b      	negs	r3, r3
 8001c7a:	1acb      	subs	r3, r1, r3
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	2301      	movs	r3, #1
 8001c80:	4698      	mov	r8, r3
 8001c82:	e5a4      	b.n	80017ce <__aeabi_dsub+0xa2>
 8001c84:	08ff      	lsrs	r7, r7, #3
 8001c86:	074b      	lsls	r3, r1, #29
 8001c88:	465d      	mov	r5, fp
 8001c8a:	433b      	orrs	r3, r7
 8001c8c:	08cc      	lsrs	r4, r1, #3
 8001c8e:	e6d7      	b.n	8001a40 <__aeabi_dsub+0x314>
 8001c90:	4662      	mov	r2, ip
 8001c92:	431a      	orrs	r2, r3
 8001c94:	0014      	movs	r4, r2
 8001c96:	1e63      	subs	r3, r4, #1
 8001c98:	419c      	sbcs	r4, r3
 8001c9a:	e679      	b.n	8001990 <__aeabi_dsub+0x264>
 8001c9c:	0015      	movs	r5, r2
 8001c9e:	4664      	mov	r4, ip
 8001ca0:	3d20      	subs	r5, #32
 8001ca2:	40ec      	lsrs	r4, r5
 8001ca4:	46a0      	mov	r8, r4
 8001ca6:	2a20      	cmp	r2, #32
 8001ca8:	d005      	beq.n	8001cb6 <__aeabi_dsub+0x58a>
 8001caa:	2540      	movs	r5, #64	; 0x40
 8001cac:	4664      	mov	r4, ip
 8001cae:	1aaa      	subs	r2, r5, r2
 8001cb0:	4094      	lsls	r4, r2
 8001cb2:	4323      	orrs	r3, r4
 8001cb4:	469a      	mov	sl, r3
 8001cb6:	4654      	mov	r4, sl
 8001cb8:	1e63      	subs	r3, r4, #1
 8001cba:	419c      	sbcs	r4, r3
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	4323      	orrs	r3, r4
 8001cc0:	e773      	b.n	8001baa <__aeabi_dsub+0x47e>
 8001cc2:	4662      	mov	r2, ip
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	d023      	beq.n	8001d10 <__aeabi_dsub+0x5e4>
 8001cc8:	000a      	movs	r2, r1
 8001cca:	433a      	orrs	r2, r7
 8001ccc:	d000      	beq.n	8001cd0 <__aeabi_dsub+0x5a4>
 8001cce:	e0a0      	b.n	8001e12 <__aeabi_dsub+0x6e6>
 8001cd0:	4662      	mov	r2, ip
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	0752      	lsls	r2, r2, #29
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	4662      	mov	r2, ip
 8001cda:	08d4      	lsrs	r4, r2, #3
 8001cdc:	e6b0      	b.n	8001a40 <__aeabi_dsub+0x314>
 8001cde:	000b      	movs	r3, r1
 8001ce0:	433b      	orrs	r3, r7
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x5ba>
 8001ce4:	e728      	b.n	8001b38 <__aeabi_dsub+0x40c>
 8001ce6:	08ff      	lsrs	r7, r7, #3
 8001ce8:	074b      	lsls	r3, r1, #29
 8001cea:	465d      	mov	r5, fp
 8001cec:	433b      	orrs	r3, r7
 8001cee:	08cc      	lsrs	r4, r1, #3
 8001cf0:	e697      	b.n	8001a22 <__aeabi_dsub+0x2f6>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	4698      	mov	r8, r3
 8001cf6:	e736      	b.n	8001b66 <__aeabi_dsub+0x43a>
 8001cf8:	1afc      	subs	r4, r7, r3
 8001cfa:	42a7      	cmp	r7, r4
 8001cfc:	41bf      	sbcs	r7, r7
 8001cfe:	4663      	mov	r3, ip
 8001d00:	427f      	negs	r7, r7
 8001d02:	1ac9      	subs	r1, r1, r3
 8001d04:	1bcb      	subs	r3, r1, r7
 8001d06:	4699      	mov	r9, r3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	465d      	mov	r5, fp
 8001d0c:	4698      	mov	r8, r3
 8001d0e:	e55e      	b.n	80017ce <__aeabi_dsub+0xa2>
 8001d10:	074b      	lsls	r3, r1, #29
 8001d12:	08ff      	lsrs	r7, r7, #3
 8001d14:	433b      	orrs	r3, r7
 8001d16:	08cc      	lsrs	r4, r1, #3
 8001d18:	e692      	b.n	8001a40 <__aeabi_dsub+0x314>
 8001d1a:	1bdc      	subs	r4, r3, r7
 8001d1c:	4660      	mov	r0, ip
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	41b6      	sbcs	r6, r6
 8001d22:	1a40      	subs	r0, r0, r1
 8001d24:	4276      	negs	r6, r6
 8001d26:	1b80      	subs	r0, r0, r6
 8001d28:	4681      	mov	r9, r0
 8001d2a:	0200      	lsls	r0, r0, #8
 8001d2c:	d560      	bpl.n	8001df0 <__aeabi_dsub+0x6c4>
 8001d2e:	1afc      	subs	r4, r7, r3
 8001d30:	42a7      	cmp	r7, r4
 8001d32:	41bf      	sbcs	r7, r7
 8001d34:	4663      	mov	r3, ip
 8001d36:	427f      	negs	r7, r7
 8001d38:	1ac9      	subs	r1, r1, r3
 8001d3a:	1bcb      	subs	r3, r1, r7
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	e576      	b.n	8001830 <__aeabi_dsub+0x104>
 8001d42:	08ff      	lsrs	r7, r7, #3
 8001d44:	074b      	lsls	r3, r1, #29
 8001d46:	433b      	orrs	r3, r7
 8001d48:	08cc      	lsrs	r4, r1, #3
 8001d4a:	e667      	b.n	8001a1c <__aeabi_dsub+0x2f0>
 8001d4c:	000a      	movs	r2, r1
 8001d4e:	08db      	lsrs	r3, r3, #3
 8001d50:	433a      	orrs	r2, r7
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x62a>
 8001d54:	e66f      	b.n	8001a36 <__aeabi_dsub+0x30a>
 8001d56:	4662      	mov	r2, ip
 8001d58:	0752      	lsls	r2, r2, #29
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	4662      	mov	r2, ip
 8001d5e:	08d4      	lsrs	r4, r2, #3
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0312      	lsls	r2, r2, #12
 8001d64:	4214      	tst	r4, r2
 8001d66:	d007      	beq.n	8001d78 <__aeabi_dsub+0x64c>
 8001d68:	08c8      	lsrs	r0, r1, #3
 8001d6a:	4210      	tst	r0, r2
 8001d6c:	d104      	bne.n	8001d78 <__aeabi_dsub+0x64c>
 8001d6e:	465d      	mov	r5, fp
 8001d70:	0004      	movs	r4, r0
 8001d72:	08fb      	lsrs	r3, r7, #3
 8001d74:	0749      	lsls	r1, r1, #29
 8001d76:	430b      	orrs	r3, r1
 8001d78:	0f5a      	lsrs	r2, r3, #29
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	0752      	lsls	r2, r2, #29
 8001d80:	4313      	orrs	r3, r2
 8001d82:	e65d      	b.n	8001a40 <__aeabi_dsub+0x314>
 8001d84:	074b      	lsls	r3, r1, #29
 8001d86:	08ff      	lsrs	r7, r7, #3
 8001d88:	433b      	orrs	r3, r7
 8001d8a:	08cc      	lsrs	r4, r1, #3
 8001d8c:	e649      	b.n	8001a22 <__aeabi_dsub+0x2f6>
 8001d8e:	19dc      	adds	r4, r3, r7
 8001d90:	429c      	cmp	r4, r3
 8001d92:	419b      	sbcs	r3, r3
 8001d94:	4461      	add	r1, ip
 8001d96:	4689      	mov	r9, r1
 8001d98:	425b      	negs	r3, r3
 8001d9a:	4499      	add	r9, r3
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	d400      	bmi.n	8001da4 <__aeabi_dsub+0x678>
 8001da2:	e631      	b.n	8001a08 <__aeabi_dsub+0x2dc>
 8001da4:	464a      	mov	r2, r9
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <__aeabi_dsub+0x6d8>)
 8001da8:	401a      	ands	r2, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	4691      	mov	r9, r2
 8001dae:	4698      	mov	r8, r3
 8001db0:	e62a      	b.n	8001a08 <__aeabi_dsub+0x2dc>
 8001db2:	0016      	movs	r6, r2
 8001db4:	4664      	mov	r4, ip
 8001db6:	3e20      	subs	r6, #32
 8001db8:	40f4      	lsrs	r4, r6
 8001dba:	46a0      	mov	r8, r4
 8001dbc:	2a20      	cmp	r2, #32
 8001dbe:	d005      	beq.n	8001dcc <__aeabi_dsub+0x6a0>
 8001dc0:	2640      	movs	r6, #64	; 0x40
 8001dc2:	4664      	mov	r4, ip
 8001dc4:	1ab2      	subs	r2, r6, r2
 8001dc6:	4094      	lsls	r4, r2
 8001dc8:	4323      	orrs	r3, r4
 8001dca:	469a      	mov	sl, r3
 8001dcc:	4654      	mov	r4, sl
 8001dce:	1e63      	subs	r3, r4, #1
 8001dd0:	419c      	sbcs	r4, r3
 8001dd2:	4643      	mov	r3, r8
 8001dd4:	431c      	orrs	r4, r3
 8001dd6:	e5db      	b.n	8001990 <__aeabi_dsub+0x264>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e548      	b.n	8001872 <__aeabi_dsub+0x146>
 8001de0:	19dc      	adds	r4, r3, r7
 8001de2:	42bc      	cmp	r4, r7
 8001de4:	41bf      	sbcs	r7, r7
 8001de6:	4461      	add	r1, ip
 8001de8:	4689      	mov	r9, r1
 8001dea:	427f      	negs	r7, r7
 8001dec:	44b9      	add	r9, r7
 8001dee:	e738      	b.n	8001c62 <__aeabi_dsub+0x536>
 8001df0:	464b      	mov	r3, r9
 8001df2:	4323      	orrs	r3, r4
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x6cc>
 8001df6:	e69f      	b.n	8001b38 <__aeabi_dsub+0x40c>
 8001df8:	e606      	b.n	8001a08 <__aeabi_dsub+0x2dc>
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	000007fe 	.word	0x000007fe
 8001e00:	000007ff 	.word	0x000007ff
 8001e04:	ff7fffff 	.word	0xff7fffff
 8001e08:	08ff      	lsrs	r7, r7, #3
 8001e0a:	074b      	lsls	r3, r1, #29
 8001e0c:	433b      	orrs	r3, r7
 8001e0e:	08cc      	lsrs	r4, r1, #3
 8001e10:	e616      	b.n	8001a40 <__aeabi_dsub+0x314>
 8001e12:	4662      	mov	r2, ip
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	0752      	lsls	r2, r2, #29
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	4662      	mov	r2, ip
 8001e1c:	08d4      	lsrs	r4, r2, #3
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	0312      	lsls	r2, r2, #12
 8001e22:	4214      	tst	r4, r2
 8001e24:	d007      	beq.n	8001e36 <__aeabi_dsub+0x70a>
 8001e26:	08c8      	lsrs	r0, r1, #3
 8001e28:	4210      	tst	r0, r2
 8001e2a:	d104      	bne.n	8001e36 <__aeabi_dsub+0x70a>
 8001e2c:	465d      	mov	r5, fp
 8001e2e:	0004      	movs	r4, r0
 8001e30:	08fb      	lsrs	r3, r7, #3
 8001e32:	0749      	lsls	r1, r1, #29
 8001e34:	430b      	orrs	r3, r1
 8001e36:	0f5a      	lsrs	r2, r3, #29
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	0752      	lsls	r2, r2, #29
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	e5fe      	b.n	8001a40 <__aeabi_dsub+0x314>
 8001e42:	2300      	movs	r3, #0
 8001e44:	4a01      	ldr	r2, [pc, #4]	; (8001e4c <__aeabi_dsub+0x720>)
 8001e46:	001c      	movs	r4, r3
 8001e48:	e513      	b.n	8001872 <__aeabi_dsub+0x146>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff

08001e50 <__aeabi_d2iz>:
 8001e50:	000a      	movs	r2, r1
 8001e52:	b530      	push	{r4, r5, lr}
 8001e54:	4c13      	ldr	r4, [pc, #76]	; (8001ea4 <__aeabi_d2iz+0x54>)
 8001e56:	0053      	lsls	r3, r2, #1
 8001e58:	0309      	lsls	r1, r1, #12
 8001e5a:	0005      	movs	r5, r0
 8001e5c:	0b09      	lsrs	r1, r1, #12
 8001e5e:	2000      	movs	r0, #0
 8001e60:	0d5b      	lsrs	r3, r3, #21
 8001e62:	0fd2      	lsrs	r2, r2, #31
 8001e64:	42a3      	cmp	r3, r4
 8001e66:	dd04      	ble.n	8001e72 <__aeabi_d2iz+0x22>
 8001e68:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <__aeabi_d2iz+0x58>)
 8001e6a:	4283      	cmp	r3, r0
 8001e6c:	dd02      	ble.n	8001e74 <__aeabi_d2iz+0x24>
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <__aeabi_d2iz+0x5c>)
 8001e70:	18d0      	adds	r0, r2, r3
 8001e72:	bd30      	pop	{r4, r5, pc}
 8001e74:	2080      	movs	r0, #128	; 0x80
 8001e76:	0340      	lsls	r0, r0, #13
 8001e78:	4301      	orrs	r1, r0
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <__aeabi_d2iz+0x60>)
 8001e7c:	1ac0      	subs	r0, r0, r3
 8001e7e:	281f      	cmp	r0, #31
 8001e80:	dd08      	ble.n	8001e94 <__aeabi_d2iz+0x44>
 8001e82:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <__aeabi_d2iz+0x64>)
 8001e84:	1ac3      	subs	r3, r0, r3
 8001e86:	40d9      	lsrs	r1, r3
 8001e88:	000b      	movs	r3, r1
 8001e8a:	4258      	negs	r0, r3
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	d1f0      	bne.n	8001e72 <__aeabi_d2iz+0x22>
 8001e90:	0018      	movs	r0, r3
 8001e92:	e7ee      	b.n	8001e72 <__aeabi_d2iz+0x22>
 8001e94:	4c08      	ldr	r4, [pc, #32]	; (8001eb8 <__aeabi_d2iz+0x68>)
 8001e96:	40c5      	lsrs	r5, r0
 8001e98:	46a4      	mov	ip, r4
 8001e9a:	4463      	add	r3, ip
 8001e9c:	4099      	lsls	r1, r3
 8001e9e:	000b      	movs	r3, r1
 8001ea0:	432b      	orrs	r3, r5
 8001ea2:	e7f2      	b.n	8001e8a <__aeabi_d2iz+0x3a>
 8001ea4:	000003fe 	.word	0x000003fe
 8001ea8:	0000041d 	.word	0x0000041d
 8001eac:	7fffffff 	.word	0x7fffffff
 8001eb0:	00000433 	.word	0x00000433
 8001eb4:	00000413 	.word	0x00000413
 8001eb8:	fffffbed 	.word	0xfffffbed

08001ebc <__aeabi_i2d>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	d016      	beq.n	8001ef0 <__aeabi_i2d+0x34>
 8001ec2:	17c3      	asrs	r3, r0, #31
 8001ec4:	18c5      	adds	r5, r0, r3
 8001ec6:	405d      	eors	r5, r3
 8001ec8:	0fc4      	lsrs	r4, r0, #31
 8001eca:	0028      	movs	r0, r5
 8001ecc:	f000 f86e 	bl	8001fac <__clzsi2>
 8001ed0:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <__aeabi_i2d+0x5c>)
 8001ed2:	1a12      	subs	r2, r2, r0
 8001ed4:	280a      	cmp	r0, #10
 8001ed6:	dc16      	bgt.n	8001f06 <__aeabi_i2d+0x4a>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	002e      	movs	r6, r5
 8001edc:	3315      	adds	r3, #21
 8001ede:	409e      	lsls	r6, r3
 8001ee0:	230b      	movs	r3, #11
 8001ee2:	1a18      	subs	r0, r3, r0
 8001ee4:	40c5      	lsrs	r5, r0
 8001ee6:	0552      	lsls	r2, r2, #21
 8001ee8:	032d      	lsls	r5, r5, #12
 8001eea:	0b2d      	lsrs	r5, r5, #12
 8001eec:	0d53      	lsrs	r3, r2, #21
 8001eee:	e003      	b.n	8001ef8 <__aeabi_i2d+0x3c>
 8001ef0:	2400      	movs	r4, #0
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	2600      	movs	r6, #0
 8001ef8:	051b      	lsls	r3, r3, #20
 8001efa:	432b      	orrs	r3, r5
 8001efc:	07e4      	lsls	r4, r4, #31
 8001efe:	4323      	orrs	r3, r4
 8001f00:	0030      	movs	r0, r6
 8001f02:	0019      	movs	r1, r3
 8001f04:	bd70      	pop	{r4, r5, r6, pc}
 8001f06:	380b      	subs	r0, #11
 8001f08:	4085      	lsls	r5, r0
 8001f0a:	0552      	lsls	r2, r2, #21
 8001f0c:	032d      	lsls	r5, r5, #12
 8001f0e:	2600      	movs	r6, #0
 8001f10:	0b2d      	lsrs	r5, r5, #12
 8001f12:	0d53      	lsrs	r3, r2, #21
 8001f14:	e7f0      	b.n	8001ef8 <__aeabi_i2d+0x3c>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	0000041e 	.word	0x0000041e

08001f1c <__aeabi_f2d>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	0043      	lsls	r3, r0, #1
 8001f20:	0246      	lsls	r6, r0, #9
 8001f22:	0fc4      	lsrs	r4, r0, #31
 8001f24:	20fe      	movs	r0, #254	; 0xfe
 8001f26:	0e1b      	lsrs	r3, r3, #24
 8001f28:	1c59      	adds	r1, r3, #1
 8001f2a:	0a75      	lsrs	r5, r6, #9
 8001f2c:	4208      	tst	r0, r1
 8001f2e:	d00c      	beq.n	8001f4a <__aeabi_f2d+0x2e>
 8001f30:	22e0      	movs	r2, #224	; 0xe0
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4694      	mov	ip, r2
 8001f36:	076d      	lsls	r5, r5, #29
 8001f38:	0b36      	lsrs	r6, r6, #12
 8001f3a:	4463      	add	r3, ip
 8001f3c:	051b      	lsls	r3, r3, #20
 8001f3e:	4333      	orrs	r3, r6
 8001f40:	07e4      	lsls	r4, r4, #31
 8001f42:	4323      	orrs	r3, r4
 8001f44:	0028      	movs	r0, r5
 8001f46:	0019      	movs	r1, r3
 8001f48:	bd70      	pop	{r4, r5, r6, pc}
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d114      	bne.n	8001f78 <__aeabi_f2d+0x5c>
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	d01b      	beq.n	8001f8a <__aeabi_f2d+0x6e>
 8001f52:	0028      	movs	r0, r5
 8001f54:	f000 f82a 	bl	8001fac <__clzsi2>
 8001f58:	280a      	cmp	r0, #10
 8001f5a:	dc1c      	bgt.n	8001f96 <__aeabi_f2d+0x7a>
 8001f5c:	230b      	movs	r3, #11
 8001f5e:	002e      	movs	r6, r5
 8001f60:	1a1b      	subs	r3, r3, r0
 8001f62:	40de      	lsrs	r6, r3
 8001f64:	0003      	movs	r3, r0
 8001f66:	3315      	adds	r3, #21
 8001f68:	409d      	lsls	r5, r3
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <__aeabi_f2d+0x88>)
 8001f6c:	0336      	lsls	r6, r6, #12
 8001f6e:	1a12      	subs	r2, r2, r0
 8001f70:	0552      	lsls	r2, r2, #21
 8001f72:	0b36      	lsrs	r6, r6, #12
 8001f74:	0d53      	lsrs	r3, r2, #21
 8001f76:	e7e1      	b.n	8001f3c <__aeabi_f2d+0x20>
 8001f78:	2d00      	cmp	r5, #0
 8001f7a:	d009      	beq.n	8001f90 <__aeabi_f2d+0x74>
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	0b36      	lsrs	r6, r6, #12
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <__aeabi_f2d+0x8c>)
 8001f84:	076d      	lsls	r5, r5, #29
 8001f86:	4316      	orrs	r6, r2
 8001f88:	e7d8      	b.n	8001f3c <__aeabi_f2d+0x20>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	e7d5      	b.n	8001f3c <__aeabi_f2d+0x20>
 8001f90:	2600      	movs	r6, #0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <__aeabi_f2d+0x8c>)
 8001f94:	e7d2      	b.n	8001f3c <__aeabi_f2d+0x20>
 8001f96:	0003      	movs	r3, r0
 8001f98:	3b0b      	subs	r3, #11
 8001f9a:	409d      	lsls	r5, r3
 8001f9c:	002e      	movs	r6, r5
 8001f9e:	2500      	movs	r5, #0
 8001fa0:	e7e3      	b.n	8001f6a <__aeabi_f2d+0x4e>
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	00000389 	.word	0x00000389
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__clzsi2>:
 8001fac:	211c      	movs	r1, #28
 8001fae:	2301      	movs	r3, #1
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	4298      	cmp	r0, r3
 8001fb4:	d301      	bcc.n	8001fba <__clzsi2+0xe>
 8001fb6:	0c00      	lsrs	r0, r0, #16
 8001fb8:	3910      	subs	r1, #16
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	4298      	cmp	r0, r3
 8001fbe:	d301      	bcc.n	8001fc4 <__clzsi2+0x18>
 8001fc0:	0a00      	lsrs	r0, r0, #8
 8001fc2:	3908      	subs	r1, #8
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	4298      	cmp	r0, r3
 8001fc8:	d301      	bcc.n	8001fce <__clzsi2+0x22>
 8001fca:	0900      	lsrs	r0, r0, #4
 8001fcc:	3904      	subs	r1, #4
 8001fce:	a202      	add	r2, pc, #8	; (adr r2, 8001fd8 <__clzsi2+0x2c>)
 8001fd0:	5c10      	ldrb	r0, [r2, r0]
 8001fd2:	1840      	adds	r0, r0, r1
 8001fd4:	4770      	bx	lr
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	02020304 	.word	0x02020304
 8001fdc:	01010101 	.word	0x01010101
	...

08001fe8 <delay_us>:


#define _NOP() __asm__ __volatile__("nop")

void delay_us(unsigned int val)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
  }
#elif CPU_HZ == 32000000
  for(i=0; i<val; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e01e      	b.n	8002034 <delay_us+0x4c>
  {
    _NOP();_NOP();_NOP();_NOP();
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46c0      	nop			; (mov r8, r8)
  for(i=0; i<val; i++)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3301      	adds	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d3dc      	bcc.n	8001ff6 <delay_us+0xe>
    _NOP();
  }
#else
#error "Invalid value for CPU_HZ!"
#endif
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b004      	add	sp, #16
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <ina229_init>:
	HAL_Delay(1);
	//
}
*/
void ina229_init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
	uint8_t SPI_buff[4];
	uint16_t ina229_reg;
	//

	SPI_buff[0] = (INA229_REG_CONFIG<<2) | INA229_SPI_WRITE;	//write
 800204e:	003b      	movs	r3, r7
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
	ina229_reg = (IN229_CONFIG_ADCRANGE_40p96mV << INA229_CONFIG_BIT_ADCRANGE);
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	2210      	movs	r2, #16
 8002058:	801a      	strh	r2, [r3, #0]
	SPI_buff[1] = ina229_reg >> 8;
 800205a:	1dbb      	adds	r3, r7, #6
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	b29b      	uxth	r3, r3
 8002062:	b2da      	uxtb	r2, r3
 8002064:	003b      	movs	r3, r7
 8002066:	705a      	strb	r2, [r3, #1]
	SPI_buff[2] = ina229_reg & 0xff;
 8002068:	1dbb      	adds	r3, r7, #6
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	003b      	movs	r3, r7
 8002070:	709a      	strb	r2, [r3, #2]
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002072:	2390      	movs	r3, #144	; 0x90
 8002074:	05db      	lsls	r3, r3, #23
 8002076:	2200      	movs	r2, #0
 8002078:	2110      	movs	r1, #16
 800207a:	0018      	movs	r0, r3
 800207c:	f001 fb86 	bl	800378c <HAL_GPIO_WritePin>
	delay_us(1);
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff ffb1 	bl	8001fe8 <delay_us>
	HAL_SPI_Transmit(&hspi1, SPI_buff, 3, HAL_MAX_DELAY);
 8002086:	2301      	movs	r3, #1
 8002088:	425b      	negs	r3, r3
 800208a:	0039      	movs	r1, r7
 800208c:	4841      	ldr	r0, [pc, #260]	; (8002194 <ina229_init+0x14c>)
 800208e:	2203      	movs	r2, #3
 8002090:	f003 f95c 	bl	800534c <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <ina229_init+0x14c>)
 8002098:	0018      	movs	r0, r3
 800209a:	f003 fc99 	bl	80059d0 <HAL_SPI_GetState>
 800209e:	0003      	movs	r3, r0
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d1f8      	bne.n	8002096 <ina229_init+0x4e>
	delay_us(1);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7ff ff9f 	bl	8001fe8 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80020aa:	2390      	movs	r3, #144	; 0x90
 80020ac:	05db      	lsls	r3, r3, #23
 80020ae:	2201      	movs	r2, #1
 80020b0:	2110      	movs	r1, #16
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 fb6a 	bl	800378c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f001 f927 	bl	800330c <HAL_Delay>
	//

	//
	SPI_buff[0] = (INA229_REG_ADC_CONFIG<<2) | INA229_SPI_WRITE;	//write
 80020be:	003b      	movs	r3, r7
 80020c0:	2204      	movs	r2, #4
 80020c2:	701a      	strb	r2, [r3, #0]
//	ina229_reg = 	(INA229_ADC_CONFIGMODE_CONTINUOUS_SHUNT_ONLY << INA229_ADC_CONFIG_BIT_MODE) | \
//						 	(INA229_ADC_CONFIGMODE_CT_1052uS << INA229_ADC_CONFIG_BIT_VSHCT) | \
//							(INA229_ADC_CONFIGMODE_AVG_SAMPLE_512 << INA229_ADC_CONFIG_BIT_AVG);

	ina229_reg = 	(INA229_ADC_CONFIGMODE_CONTINUOUS_SHUNT_ONLY << INA229_ADC_CONFIG_BIT_MODE) | \
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	4a34      	ldr	r2, [pc, #208]	; (8002198 <ina229_init+0x150>)
 80020c8:	801a      	strh	r2, [r3, #0]
							 	(INA229_ADC_CONFIGMODE_CT_540uS << INA229_ADC_CONFIG_BIT_VSHCT) | \
								(INA229_ADC_CONFIGMODE_AVG_SAMPLE_1024 << INA229_ADC_CONFIG_BIT_AVG);

	SPI_buff[1] = ina229_reg >> 8;
 80020ca:	1dbb      	adds	r3, r7, #6
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	003b      	movs	r3, r7
 80020d6:	705a      	strb	r2, [r3, #1]
	SPI_buff[2] = ina229_reg & 0xff;
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	003b      	movs	r3, r7
 80020e0:	709a      	strb	r2, [r3, #2]
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80020e2:	2390      	movs	r3, #144	; 0x90
 80020e4:	05db      	lsls	r3, r3, #23
 80020e6:	2200      	movs	r2, #0
 80020e8:	2110      	movs	r1, #16
 80020ea:	0018      	movs	r0, r3
 80020ec:	f001 fb4e 	bl	800378c <HAL_GPIO_WritePin>
	delay_us(1);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff ff79 	bl	8001fe8 <delay_us>
	HAL_SPI_Transmit(&hspi1, SPI_buff, 3, HAL_MAX_DELAY);
 80020f6:	2301      	movs	r3, #1
 80020f8:	425b      	negs	r3, r3
 80020fa:	0039      	movs	r1, r7
 80020fc:	4825      	ldr	r0, [pc, #148]	; (8002194 <ina229_init+0x14c>)
 80020fe:	2203      	movs	r2, #3
 8002100:	f003 f924 	bl	800534c <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <ina229_init+0x14c>)
 8002108:	0018      	movs	r0, r3
 800210a:	f003 fc61 	bl	80059d0 <HAL_SPI_GetState>
 800210e:	0003      	movs	r3, r0
 8002110:	2b01      	cmp	r3, #1
 8002112:	d1f8      	bne.n	8002106 <ina229_init+0xbe>
	delay_us(1);
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff ff67 	bl	8001fe8 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800211a:	2390      	movs	r3, #144	; 0x90
 800211c:	05db      	lsls	r3, r3, #23
 800211e:	2201      	movs	r2, #1
 8002120:	2110      	movs	r1, #16
 8002122:	0018      	movs	r0, r3
 8002124:	f001 fb32 	bl	800378c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002128:	2001      	movs	r0, #1
 800212a:	f001 f8ef 	bl	800330c <HAL_Delay>
	//

	SPI_buff[0] = (INA229_REG_SHUNT_CAL<<2) | INA229_SPI_WRITE;	//write
 800212e:	003b      	movs	r3, r7
 8002130:	2208      	movs	r2, #8
 8002132:	701a      	strb	r2, [r3, #0]
	SPI_buff[1] = (uint8_t)( ((uint16_t)INA229_SHUNT_CAL_ADCRANGE_40p96mV)>>8);
 8002134:	003b      	movs	r3, r7
 8002136:	2210      	movs	r2, #16
 8002138:	705a      	strb	r2, [r3, #1]
	SPI_buff[2] = (uint8_t) ( ((uint16_t)INA229_SHUNT_CAL_ADCRANGE_40p96mV) & 0x00FF);
 800213a:	003b      	movs	r3, r7
 800213c:	2200      	movs	r2, #0
 800213e:	709a      	strb	r2, [r3, #2]
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002140:	2390      	movs	r3, #144	; 0x90
 8002142:	05db      	lsls	r3, r3, #23
 8002144:	2200      	movs	r2, #0
 8002146:	2110      	movs	r1, #16
 8002148:	0018      	movs	r0, r3
 800214a:	f001 fb1f 	bl	800378c <HAL_GPIO_WritePin>
	delay_us(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff ff4a 	bl	8001fe8 <delay_us>
	HAL_SPI_Transmit(&hspi1, SPI_buff, 3, HAL_MAX_DELAY);
 8002154:	2301      	movs	r3, #1
 8002156:	425b      	negs	r3, r3
 8002158:	0039      	movs	r1, r7
 800215a:	480e      	ldr	r0, [pc, #56]	; (8002194 <ina229_init+0x14c>)
 800215c:	2203      	movs	r2, #3
 800215e:	f003 f8f5 	bl	800534c <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <ina229_init+0x14c>)
 8002166:	0018      	movs	r0, r3
 8002168:	f003 fc32 	bl	80059d0 <HAL_SPI_GetState>
 800216c:	0003      	movs	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d1f8      	bne.n	8002164 <ina229_init+0x11c>
	delay_us(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f7ff ff38 	bl	8001fe8 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002178:	2390      	movs	r3, #144	; 0x90
 800217a:	05db      	lsls	r3, r3, #23
 800217c:	2201      	movs	r2, #1
 800217e:	2110      	movs	r1, #16
 8002180:	0018      	movs	r0, r3
 8002182:	f001 fb03 	bl	800378c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002186:	2001      	movs	r0, #1
 8002188:	f001 f8c0 	bl	800330c <HAL_Delay>
	//
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000008c 	.word	0x2000008c
 8002198:	ffffa107 	.word	0xffffa107

0800219c <INA229_read_current_register>:
}
*/
#define SIGNED20(x) (int32_t) (((x)^0x80000) - 0x80000)

int32_t INA229_read_current_register(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af02      	add	r7, sp, #8

	SPI_buff_tx[0] = (INA229_REG_CURRENT<<2) | INA229_SPI_READ;	//read
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <INA229_read_current_register+0xa4>)
 80021a4:	221d      	movs	r2, #29
 80021a6:	701a      	strb	r2, [r3, #0]
	SPI_buff_tx[1] = 0;
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <INA229_read_current_register+0xa4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	705a      	strb	r2, [r3, #1]
	SPI_buff_tx[2] = 0;
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <INA229_read_current_register+0xa4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	709a      	strb	r2, [r3, #2]
	SPI_buff_tx[3] = 0;
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <INA229_read_current_register+0xa4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	70da      	strb	r2, [r3, #3]
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80021ba:	2390      	movs	r3, #144	; 0x90
 80021bc:	05db      	lsls	r3, r3, #23
 80021be:	2200      	movs	r2, #0
 80021c0:	2110      	movs	r1, #16
 80021c2:	0018      	movs	r0, r3
 80021c4:	f001 fae2 	bl	800378c <HAL_GPIO_WritePin>
	delay_us(1);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7ff ff0d 	bl	8001fe8 <delay_us>
	HAL_SPI_TransmitReceive(&hspi1, SPI_buff_tx, SPI_buff_rx, 4, HAL_MAX_DELAY);
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <INA229_read_current_register+0xa8>)
 80021d0:	491b      	ldr	r1, [pc, #108]	; (8002240 <INA229_read_current_register+0xa4>)
 80021d2:	481d      	ldr	r0, [pc, #116]	; (8002248 <INA229_read_current_register+0xac>)
 80021d4:	2301      	movs	r3, #1
 80021d6:	425b      	negs	r3, r3
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2304      	movs	r3, #4
 80021dc:	f003 fa16 	bl	800560c <HAL_SPI_TransmitReceive>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <INA229_read_current_register+0xac>)
 80021e4:	0018      	movs	r0, r3
 80021e6:	f003 fbf3 	bl	80059d0 <HAL_SPI_GetState>
 80021ea:	0003      	movs	r3, r0
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d1f8      	bne.n	80021e2 <INA229_read_current_register+0x46>
	delay_us(1);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7ff fef9 	bl	8001fe8 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80021f6:	2390      	movs	r3, #144	; 0x90
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	2201      	movs	r2, #1
 80021fc:	2110      	movs	r1, #16
 80021fe:	0018      	movs	r0, r3
 8002200:	f001 fac4 	bl	800378c <HAL_GPIO_WritePin>
	//
	uint64_t value = ( (SPI_buff_rx[1]<<16) | (SPI_buff_rx[2]<<8) | (SPI_buff_rx[3]) ) >> 4;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <INA229_read_current_register+0xa8>)
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <INA229_read_current_register+0xa8>)
 800220e:	789b      	ldrb	r3, [r3, #2]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	4313      	orrs	r3, r2
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <INA229_read_current_register+0xa8>)
 8002218:	78d2      	ldrb	r2, [r2, #3]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4313      	orrs	r3, r2
 800221e:	111b      	asrs	r3, r3, #4
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	17db      	asrs	r3, r3, #31
 8002224:	60fb      	str	r3, [r7, #12]
//	}
//	else
//	{
//		data = (float)value;
//	}
	int32_t current = SIGNED20(value);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	0312      	lsls	r2, r2, #12
 800222c:	4053      	eors	r3, r2
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <INA229_read_current_register+0xb0>)
 8002230:	4694      	mov	ip, r2
 8002232:	4463      	add	r3, ip
 8002234:	607b      	str	r3, [r7, #4]

	return current;
 8002236:	687b      	ldr	r3, [r7, #4]

}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b004      	add	sp, #16
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000002c 	.word	0x2000002c
 8002244:	20000030 	.word	0x20000030
 8002248:	2000008c 	.word	0x2000008c
 800224c:	fff80000 	.word	0xfff80000

08002250 <delay>:
uint8_t numCols = 128;
uint8_t Graphic_Check = 0;
uint8_t image[(128 * 64)/8];

void delay(uint32_t ms)
	{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	0018      	movs	r0, r3
 800225c:	f001 f856 	bl	800330c <HAL_Delay>
//		{
//			while(!(SysTick->CTRL &0x10000)){}
//		}
//	SysTick->CTRL=0;

	}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <delayUs>:

void delayUs(uint32_t us)
	{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8002270:	2001      	movs	r0, #1
 8002272:	f001 f84b 	bl	800330c <HAL_Delay>
//		{
//			while(!(SysTick->CTRL &0x10000)){}
//		}
//	SysTick->CTRL=0;

	}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <SendByteSPI>:
//		SCK_LOW;  // SCLK =0  OR SCK
//		SCK_HIGH;  // SCLK=1
//	}
//}
void SendByteSPI(uint8_t byte)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	0002      	movs	r2, r0
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 800228c:	2301      	movs	r3, #1
 800228e:	425b      	negs	r3, r3
 8002290:	1df9      	adds	r1, r7, #7
 8002292:	4804      	ldr	r0, [pc, #16]	; (80022a4 <SendByteSPI+0x24>)
 8002294:	2201      	movs	r2, #1
 8002296:	f003 f859 	bl	800534c <HAL_SPI_Transmit>
	//while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);


}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	2000008c 	.word	0x2000008c

080022a8 <ST7920_SendCmd>:
//static
void ST7920_SendCmd (uint8_t cmd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	0002      	movs	r2, r0
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	701a      	strb	r2, [r3, #0]

	CS_HIGH;  // PUll the CS high
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <ST7920_SendCmd+0x54>)
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	619a      	str	r2, [r3, #24]

	delayUs(50);
 80022bc:	2032      	movs	r0, #50	; 0x32
 80022be:	f7ff ffd3 	bl	8002268 <delayUs>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 80022c2:	20f8      	movs	r0, #248	; 0xf8
 80022c4:	f7ff ffdc 	bl	8002280 <SendByteSPI>

	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	220f      	movs	r2, #15
 80022ce:	4393      	bics	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff ffd4 	bl	8002280 <SendByteSPI>

	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 80022d8:	1dfb      	adds	r3, r7, #7
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7ff ffcd 	bl	8002280 <SendByteSPI>

	delayUs(50);
 80022e6:	2032      	movs	r0, #50	; 0x32
 80022e8:	f7ff ffbe 	bl	8002268 <delayUs>

	CS_LOW;  // PUll the CS LOW
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <ST7920_SendCmd+0x54>)
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0512      	lsls	r2, r2, #20
 80022f2:	619a      	str	r2, [r3, #24]

}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	48000400 	.word	0x48000400

08002300 <ST7920_SendData>:

//static
void ST7920_SendData (uint8_t data)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	0002      	movs	r2, r0
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	701a      	strb	r2, [r3, #0]

	CS_HIGH;
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <ST7920_SendData+0x50>)
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	619a      	str	r2, [r3, #24]

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8002314:	20fa      	movs	r0, #250	; 0xfa
 8002316:	f7ff ffb3 	bl	8002280 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	220f      	movs	r2, #15
 8002320:	4393      	bics	r3, r2
 8002322:	b2db      	uxtb	r3, r3
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff ffab 	bl	8002280 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	b2db      	uxtb	r3, r3
 8002332:	0018      	movs	r0, r3
 8002334:	f7ff ffa4 	bl	8002280 <SendByteSPI>
	delayUs(50);
 8002338:	2032      	movs	r0, #50	; 0x32
 800233a:	f7ff ff95 	bl	8002268 <delayUs>
	CS_LOW;  // PUll the CS LOW
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <ST7920_SendData+0x50>)
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	0512      	lsls	r2, r2, #20
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	b002      	add	sp, #8
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	48000400 	.word	0x48000400

08002354 <ST7920_Init>:


void ST7920_Init (void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
//	RCC->AHBENR|=RCC_AHBENR_GPIOAEN;
//	GPIOA->MODER|=(GPIO_MODER_MODER0_0|GPIO_MODER_MODER1_0|GPIO_MODER_MODER4_0|GPIO_MODER_MODER8_0);
//	GPIOA->MODER&=~(GPIO_MODER_MODER0_1|GPIO_MODER_MODER1_1|GPIO_MODER_MODER4_1|GPIO_MODER_MODER8_1);
//	GPIOA->OSPEEDR|=GPIO_OSPEEDER_OSPEEDR0|GPIO_OSPEEDER_OSPEEDR1|GPIO_OSPEEDER_OSPEEDR4|GPIO_OSPEEDER_OSPEEDR8;

	RST_LOW; 					// RESET=0
 8002358:	2390      	movs	r3, #144	; 0x90
 800235a:	05db      	lsls	r3, r3, #23
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	02d2      	lsls	r2, r2, #11
 8002360:	619a      	str	r2, [r3, #24]
	delay(10);   // wait for 10ms
 8002362:	200a      	movs	r0, #10
 8002364:	f7ff ff74 	bl	8002250 <delay>
	RST_HIGH;
 8002368:	2390      	movs	r3, #144	; 0x90
 800236a:	05db      	lsls	r3, r3, #23
 800236c:	2204      	movs	r2, #4
 800236e:	619a      	str	r2, [r3, #24]

	delay(50);   //wait for >40 ms
 8002370:	2032      	movs	r0, #50	; 0x32
 8002372:	f7ff ff6d 	bl	8002250 <delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8002376:	2030      	movs	r0, #48	; 0x30
 8002378:	f7ff ff96 	bl	80022a8 <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 800237c:	206e      	movs	r0, #110	; 0x6e
 800237e:	f7ff ff73 	bl	8002268 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8002382:	2030      	movs	r0, #48	; 0x30
 8002384:	f7ff ff90 	bl	80022a8 <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8002388:	2028      	movs	r0, #40	; 0x28
 800238a:	f7ff ff6d 	bl	8002268 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 800238e:	2008      	movs	r0, #8
 8002390:	f7ff ff8a 	bl	80022a8 <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8002394:	206e      	movs	r0, #110	; 0x6e
 8002396:	f7ff ff67 	bl	8002268 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 800239a:	2001      	movs	r0, #1
 800239c:	f7ff ff84 	bl	80022a8 <ST7920_SendCmd>
	delay(12);  // >10 ms delay
 80023a0:	200c      	movs	r0, #12
 80023a2:	f7ff ff55 	bl	8002250 <delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 80023a6:	2006      	movs	r0, #6
 80023a8:	f7ff ff7e 	bl	80022a8 <ST7920_SendCmd>
	delay(1);  // 1ms delay
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff ff4f 	bl	8002250 <delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 80023b2:	200c      	movs	r0, #12
 80023b4:	f7ff ff78 	bl	80022a8 <ST7920_SendCmd>
    delay(1);  // 1ms delay
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff ff49 	bl	8002250 <delay>

	ST7920_SendCmd(0x02);  // return to home
 80023be:	2002      	movs	r0, #2
 80023c0:	f7ff ff72 	bl	80022a8 <ST7920_SendCmd>
	delay(1);  // 1ms delay
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff ff43 	bl	8002250 <delay>

}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <ST7920_SendString>:

/*
 * Due to the design of the ST7920 controller (to accomodate Mandarin and Cyrillic), you must place the text on the column according to the numbers above the diagram below. The addressing is handle by the command.
 */
void ST7920_SendString(int row, int col, char* string)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    switch (row)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d01e      	beq.n	8002420 <ST7920_SendString+0x50>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	dc20      	bgt.n	800242a <ST7920_SendString+0x5a>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d013      	beq.n	8002416 <ST7920_SendString+0x46>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	dc1a      	bgt.n	800242a <ST7920_SendString+0x5a>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <ST7920_SendString+0x32>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d005      	beq.n	800240c <ST7920_SendString+0x3c>
 8002400:	e013      	b.n	800242a <ST7920_SendString+0x5a>
    {
        case 0:
            col |= 0x80;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	4313      	orrs	r3, r2
 8002408:	60bb      	str	r3, [r7, #8]
            break;
 800240a:	e013      	b.n	8002434 <ST7920_SendString+0x64>
        case 1:
            col |= 0x90;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2290      	movs	r2, #144	; 0x90
 8002410:	4313      	orrs	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
            break;
 8002414:	e00e      	b.n	8002434 <ST7920_SendString+0x64>
        case 2:
            col |= 0x88;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2288      	movs	r2, #136	; 0x88
 800241a:	4313      	orrs	r3, r2
 800241c:	60bb      	str	r3, [r7, #8]
            break;
 800241e:	e009      	b.n	8002434 <ST7920_SendString+0x64>
        case 3:
            col |= 0x98;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2298      	movs	r2, #152	; 0x98
 8002424:	4313      	orrs	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
            break;
 8002428:	e004      	b.n	8002434 <ST7920_SendString+0x64>
        default:
            col |= 0x80;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	4313      	orrs	r3, r2
 8002430:	60bb      	str	r3, [r7, #8]
            break;
 8002432:	46c0      	nop			; (mov r8, r8)
    }



    ST7920_SendCmd(col);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff ff35 	bl	80022a8 <ST7920_SendCmd>

    while (*string)
 800243e:	e006      	b.n	800244e <ST7920_SendString+0x7e>
    	{
    		ST7920_SendData(*string++);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff ff59 	bl	8002300 <ST7920_SendData>
    while (*string)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f4      	bne.n	8002440 <ST7920_SendString+0x70>
    	}
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}

08002460 <ADS1115_write_data16bits>:
 * todas las funciones y variable a traves de la directiva ADS1115_CONTROL_BITS
 */
extern I2C_HandleTypeDef hi2c1;

void ADS1115_write_data16bits(uint8_t ADS1115_I2Caddr, uint8_t ADS1115register, uint16_t data16bits)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af02      	add	r7, sp, #8
 8002466:	0004      	movs	r4, r0
 8002468:	0008      	movs	r0, r1
 800246a:	0011      	movs	r1, r2
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	1c22      	adds	r2, r4, #0
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	1dbb      	adds	r3, r7, #6
 8002474:	1c02      	adds	r2, r0, #0
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	1c0a      	adds	r2, r1, #0
 800247c:	801a      	strh	r2, [r3, #0]
	uint8_t reg[3];
	reg[0] = ADS1115register;
 800247e:	210c      	movs	r1, #12
 8002480:	187b      	adds	r3, r7, r1
 8002482:	1dba      	adds	r2, r7, #6
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	701a      	strb	r2, [r3, #0]
	reg[1] = (uint8_t)(data16bits>>8);
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	b29b      	uxth	r3, r3
 8002490:	b2da      	uxtb	r2, r3
 8002492:	187b      	adds	r3, r7, r1
 8002494:	705a      	strb	r2, [r3, #1]
	reg[2] = (uint8_t)(data16bits);
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	0008      	movs	r0, r1
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_I2Caddr, &reg[0], 3, HAL_MAX_DELAY);
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b299      	uxth	r1, r3
 80024a8:	183a      	adds	r2, r7, r0
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <ADS1115_write_data16bits+0x60>)
 80024ac:	2301      	movs	r3, #1
 80024ae:	425b      	negs	r3, r3
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2303      	movs	r3, #3
 80024b4:	f001 fa1e 	bl	80038f4 <HAL_I2C_Master_Transmit>
	//I2Ccfx_WriteArray(ADS1115_I2Caddr, ADS1115register, &reg[0], 2);

}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b005      	add	sp, #20
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	20000038 	.word	0x20000038

080024c4 <ADS1115_init>:
#ifdef ADS1115_CONFIG_REG_UPDATE_IN_RUNTIME
	uint16_t ADS1115_ConfigRegister = 0x0000;
#endif

	void ADS1115_init(void)
	{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
		#ifndef ADS1115_CONFIG_REG_UPDATE_IN_RUNTIME
		uint16_t
		#endif
		//ADS1115_ConfigRegister = (0<<OS_BIT) | (MUX_AIN0_AIN3<<MUX_BIT) | (PGA_2p048V<<PGA_BIT) | (SINGLESHOT_POWERDOWN_CONV<<MODE_BIT) | (DR_128SPS<<DR_BIT);
		ADS1115_ConfigRegister = (0<<OS_BIT) | (MUX_AIN0_AIN3<<MUX_BIT) | (PGA_2p048V<<PGA_BIT) | (SINGLESHOT_POWERDOWN_CONV<<MODE_BIT) | (DR_8SPS<<DR_BIT);
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <ADS1115_init+0x20>)
 80024ca:	22a8      	movs	r2, #168	; 0xa8
 80024cc:	0152      	lsls	r2, r2, #5
 80024ce:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <ADS1115_init+0x20>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	001a      	movs	r2, r3
 80024d6:	2101      	movs	r1, #1
 80024d8:	2090      	movs	r0, #144	; 0x90
 80024da:	f7ff ffc1 	bl	8002460 <ADS1115_write_data16bits>

	}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000034 	.word	0x20000034

080024e8 <ADS1115_setOS>:
#ifdef ADS1115_CONFIG_REG_UPDATE_IN_RUNTIME
	void ADS1115_setOS(uint8_t OS)
	{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	0002      	movs	r2, r0
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x7FFF) | ((uint16_t)OS<<OS_BIT);
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <ADS1115_setOS+0x40>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	045b      	lsls	r3, r3, #17
 80024fc:	0c5b      	lsrs	r3, r3, #17
 80024fe:	b21a      	sxth	r2, r3
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	03db      	lsls	r3, r3, #15
 8002506:	b21b      	sxth	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b21b      	sxth	r3, r3
 800250c:	b29a      	uxth	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <ADS1115_setOS+0x40>)
 8002510:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <ADS1115_setOS+0x40>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	001a      	movs	r2, r3
 8002518:	2101      	movs	r1, #1
 800251a:	2090      	movs	r0, #144	; 0x90
 800251c:	f7ff ffa0 	bl	8002460 <ADS1115_write_data16bits>
	}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000034 	.word	0x20000034

0800252c <ADS1115_setMuxChannel>:
	/*
	 *
	 */
	void ADS1115_setMuxChannel(uint8_t MUX)
	{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	0002      	movs	r2, r0
 8002534:	1dfb      	adds	r3, r7, #7
 8002536:	701a      	strb	r2, [r3, #0]
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x8FFF) | ((uint16_t)MUX<<MUX_BIT);
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <ADS1115_setMuxChannel+0x40>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b21b      	sxth	r3, r3
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <ADS1115_setMuxChannel+0x44>)
 8002540:	4013      	ands	r3, r2
 8002542:	b21a      	sxth	r2, r3
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	031b      	lsls	r3, r3, #12
 800254a:	b21b      	sxth	r3, r3
 800254c:	4313      	orrs	r3, r2
 800254e:	b21b      	sxth	r3, r3
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <ADS1115_setMuxChannel+0x40>)
 8002554:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <ADS1115_setMuxChannel+0x40>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	001a      	movs	r2, r3
 800255c:	2101      	movs	r1, #1
 800255e:	2090      	movs	r0, #144	; 0x90
 8002560:	f7ff ff7e 	bl	8002460 <ADS1115_write_data16bits>
	}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000034 	.word	0x20000034
 8002570:	ffff8fff 	.word	0xffff8fff

08002574 <ADS1115_setOperatingMode>:
	}
	/*
	 *
	 */
	void ADS1115_setOperatingMode(uint8_t MODE)
	{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	0002      	movs	r2, r0
 800257c:	1dfb      	adds	r3, r7, #7
 800257e:	701a      	strb	r2, [r3, #0]
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0xFEFF) | ((uint16_t)MODE<<MODE_BIT);
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <ADS1115_setOperatingMode+0x40>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b21b      	sxth	r3, r3
 8002586:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <ADS1115_setOperatingMode+0x44>)
 8002588:	4013      	ands	r3, r2
 800258a:	b21a      	sxth	r2, r3
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	b21b      	sxth	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b21b      	sxth	r3, r3
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <ADS1115_setOperatingMode+0x40>)
 800259c:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <ADS1115_setOperatingMode+0x40>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	001a      	movs	r2, r3
 80025a4:	2101      	movs	r1, #1
 80025a6:	2090      	movs	r0, #144	; 0x90
 80025a8:	f7ff ff5a 	bl	8002460 <ADS1115_write_data16bits>
	}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000034 	.word	0x20000034
 80025b8:	fffffeff 	.word	0xfffffeff

080025bc <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60b8      	str	r0, [r7, #8]
 80025c4:	60f9      	str	r1, [r7, #12]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b0a      	cmp	r3, #10
 80025d6:	dd01      	ble.n	80025dc <ftoa+0x20>
		precision = MAX_PRECISION;
 80025d8:	230a      	movs	r3, #10
 80025da:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 80025dc:	2200      	movs	r2, #0
 80025de:	2300      	movs	r3, #0
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	f7fd ff1c 	bl	8000420 <__aeabi_dcmplt>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d00d      	beq.n	8002608 <ftoa+0x4c>
	{
		f = -f;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	001c      	movs	r4, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	0612      	lsls	r2, r2, #24
 80025f6:	405a      	eors	r2, r3
 80025f8:	0015      	movs	r5, r2
 80025fa:	60bc      	str	r4, [r7, #8]
 80025fc:	60fd      	str	r5, [r7, #12]
		*ptr++ = '-';
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	627a      	str	r2, [r7, #36]	; 0x24
 8002604:	222d      	movs	r2, #45	; 0x2d
 8002606:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da43      	bge.n	8002696 <ftoa+0xda>
	{
		if (f < 1.0) precision = 6;
 800260e:	2200      	movs	r2, #0
 8002610:	4b72      	ldr	r3, [pc, #456]	; (80027dc <ftoa+0x220>)
 8002612:	68b8      	ldr	r0, [r7, #8]
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	f7fd ff03 	bl	8000420 <__aeabi_dcmplt>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d002      	beq.n	8002624 <ftoa+0x68>
 800261e:	2306      	movs	r3, #6
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	e038      	b.n	8002696 <ftoa+0xda>
		else if (f < 10.0) precision = 5;
 8002624:	2200      	movs	r2, #0
 8002626:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <ftoa+0x224>)
 8002628:	68b8      	ldr	r0, [r7, #8]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	f7fd fef8 	bl	8000420 <__aeabi_dcmplt>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d002      	beq.n	800263a <ftoa+0x7e>
 8002634:	2305      	movs	r3, #5
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	e02d      	b.n	8002696 <ftoa+0xda>
		else if (f < 100.0) precision = 4;
 800263a:	2200      	movs	r2, #0
 800263c:	4b69      	ldr	r3, [pc, #420]	; (80027e4 <ftoa+0x228>)
 800263e:	68b8      	ldr	r0, [r7, #8]
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	f7fd feed 	bl	8000420 <__aeabi_dcmplt>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d002      	beq.n	8002650 <ftoa+0x94>
 800264a:	2304      	movs	r3, #4
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	e022      	b.n	8002696 <ftoa+0xda>
		else if (f < 1000.0) precision = 3;
 8002650:	2200      	movs	r2, #0
 8002652:	4b65      	ldr	r3, [pc, #404]	; (80027e8 <ftoa+0x22c>)
 8002654:	68b8      	ldr	r0, [r7, #8]
 8002656:	68f9      	ldr	r1, [r7, #12]
 8002658:	f7fd fee2 	bl	8000420 <__aeabi_dcmplt>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d002      	beq.n	8002666 <ftoa+0xaa>
 8002660:	2303      	movs	r3, #3
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	e017      	b.n	8002696 <ftoa+0xda>
		else if (f < 10000.0) precision = 2;
 8002666:	2200      	movs	r2, #0
 8002668:	4b60      	ldr	r3, [pc, #384]	; (80027ec <ftoa+0x230>)
 800266a:	68b8      	ldr	r0, [r7, #8]
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	f7fd fed7 	bl	8000420 <__aeabi_dcmplt>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d002      	beq.n	800267c <ftoa+0xc0>
 8002676:	2302      	movs	r3, #2
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	e00c      	b.n	8002696 <ftoa+0xda>
		else if (f < 100000.0) precision = 1;
 800267c:	2200      	movs	r2, #0
 800267e:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <ftoa+0x234>)
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	68f9      	ldr	r1, [r7, #12]
 8002684:	f7fd fecc 	bl	8000420 <__aeabi_dcmplt>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d002      	beq.n	8002692 <ftoa+0xd6>
 800268c:	2301      	movs	r3, #1
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	e001      	b.n	8002696 <ftoa+0xda>
		else precision = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <ftoa+0xfc>
		f += rounders[precision];
 800269c:	4a55      	ldr	r2, [pc, #340]	; (80027f4 <ftoa+0x238>)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	68f9      	ldr	r1, [r7, #12]
 80026ac:	f7fe f98a 	bl	80009c4 <__aeabi_dadd>
 80026b0:	0002      	movs	r2, r0
 80026b2:	000b      	movs	r3, r1
 80026b4:	60ba      	str	r2, [r7, #8]
 80026b6:	60fb      	str	r3, [r7, #12]

	// integer part...
	intPart = f;
 80026b8:	68b8      	ldr	r0, [r7, #8]
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	f7ff fbc8 	bl	8001e50 <__aeabi_d2iz>
 80026c0:	0003      	movs	r3, r0
 80026c2:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80026c4:	69f8      	ldr	r0, [r7, #28]
 80026c6:	f7ff fbf9 	bl	8001ebc <__aeabi_i2d>
 80026ca:	0002      	movs	r2, r0
 80026cc:	000b      	movs	r3, r1
 80026ce:	68b8      	ldr	r0, [r7, #8]
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	f7ff f82b 	bl	800172c <__aeabi_dsub>
 80026d6:	0002      	movs	r2, r0
 80026d8:	000b      	movs	r3, r1
 80026da:	60ba      	str	r2, [r7, #8]
 80026dc:	60fb      	str	r3, [r7, #12]

	if (!intPart)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <ftoa+0x134>
		*ptr++ = '0';
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	627a      	str	r2, [r7, #36]	; 0x24
 80026ea:	2230      	movs	r2, #48	; 0x30
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e034      	b.n	800275a <ftoa+0x19e>
	else
	{
		// save start pointer
		p = ptr;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80026f4:	e013      	b.n	800271e <ftoa+0x162>
		{
			*p++ = '0' + intPart % 10;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	210a      	movs	r1, #10
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7fd fe74 	bl	80003e8 <__aeabi_idivmod>
 8002700:	000b      	movs	r3, r1
 8002702:	b2da      	uxtb	r2, r3
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	6239      	str	r1, [r7, #32]
 800270a:	3230      	adds	r2, #48	; 0x30
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	210a      	movs	r1, #10
 8002714:	0018      	movs	r0, r3
 8002716:	f7fd fd81 	bl	800021c <__divsi3>
 800271a:	0003      	movs	r3, r0
 800271c:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e8      	bne.n	80026f6 <ftoa+0x13a>
		}

		// save end pos
		p1 = p;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8002728:	e011      	b.n	800274e <ftoa+0x192>
		{
			c = *--p;
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	3b01      	subs	r3, #1
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	2117      	movs	r1, #23
 8002732:	187b      	adds	r3, r7, r1
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	7812      	ldrb	r2, [r2, #0]
 8002738:	701a      	strb	r2, [r3, #0]
			*p = *ptr;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	627a      	str	r2, [r7, #36]	; 0x24
 8002748:	187a      	adds	r2, r7, r1
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	429a      	cmp	r2, r3
 8002754:	d8e9      	bhi.n	800272a <ftoa+0x16e>
		}

		// restore end pos
		ptr = p1;
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d034      	beq.n	80027ca <ftoa+0x20e>
	{
		// place decimal point
		*ptr++ = '.';
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	627a      	str	r2, [r7, #36]	; 0x24
 8002766:	222e      	movs	r2, #46	; 0x2e
 8002768:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800276a:	e029      	b.n	80027c0 <ftoa+0x204>
		{
			f *= 10.0;
 800276c:	2200      	movs	r2, #0
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <ftoa+0x224>)
 8002770:	68b8      	ldr	r0, [r7, #8]
 8002772:	68f9      	ldr	r1, [r7, #12]
 8002774:	f7fe fd6e 	bl	8001254 <__aeabi_dmul>
 8002778:	0002      	movs	r2, r0
 800277a:	000b      	movs	r3, r1
 800277c:	60ba      	str	r2, [r7, #8]
 800277e:	60fb      	str	r3, [r7, #12]
			c = f;
 8002780:	2517      	movs	r5, #23
 8002782:	197c      	adds	r4, r7, r5
 8002784:	68b8      	ldr	r0, [r7, #8]
 8002786:	68f9      	ldr	r1, [r7, #12]
 8002788:	f7fd fe72 	bl	8000470 <__aeabi_d2uiz>
 800278c:	0003      	movs	r3, r0
 800278e:	7023      	strb	r3, [r4, #0]
			*ptr++ = '0' + c;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	627a      	str	r2, [r7, #36]	; 0x24
 8002796:	0029      	movs	r1, r5
 8002798:	187a      	adds	r2, r7, r1
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	3230      	adds	r2, #48	; 0x30
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
			f -= c;
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7ff fb88 	bl	8001ebc <__aeabi_i2d>
 80027ac:	0002      	movs	r2, r0
 80027ae:	000b      	movs	r3, r1
 80027b0:	68b8      	ldr	r0, [r7, #8]
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	f7fe ffba 	bl	800172c <__aeabi_dsub>
 80027b8:	0002      	movs	r2, r0
 80027ba:	000b      	movs	r3, r1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	60fb      	str	r3, [r7, #12]
		while (precision--)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	1e5a      	subs	r2, r3, #1
 80027c4:	603a      	str	r2, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1d0      	bne.n	800276c <ftoa+0x1b0>
		}
	}

	// terminating zero
	*ptr = 0;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]

	return buf;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b00a      	add	sp, #40	; 0x28
 80027d8:	bdb0      	pop	{r4, r5, r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	3ff00000 	.word	0x3ff00000
 80027e0:	40240000 	.word	0x40240000
 80027e4:	40590000 	.word	0x40590000
 80027e8:	408f4000 	.word	0x408f4000
 80027ec:	40c38800 	.word	0x40c38800
 80027f0:	40f86a00 	.word	0x40f86a00
 80027f4:	08006670 	.word	0x08006670

080027f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fe:	f000 fd21 	bl	8003244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002802:	f000 f8f3 	bl	80029ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002806:	f000 fa65 	bl	8002cd4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800280a:	f000 fa3d 	bl	8002c88 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 800280e:	f000 f94f 	bl	8002ab0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002812:	f000 f98d 	bl	8002b30 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002816:	f000 f9c9 	bl	8002bac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800281a:	f000 fa05 	bl	8002c28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_GPIO_WritePin(LCD_CTRL_BACKLIGHT_GPIO_Port, LCD_CTRL_BACKLIGHT_Pin, GPIO_PIN_SET);
 800281e:	2390      	movs	r3, #144	; 0x90
 8002820:	05db      	lsls	r3, r3, #23
 8002822:	2201      	movs	r2, #1
 8002824:	2108      	movs	r1, #8
 8002826:	0018      	movs	r0, r3
 8002828:	f000 ffb0 	bl	800378c <HAL_GPIO_WritePin>

   //ST7920_test();
   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <main+0x1c0>)
 800282e:	2202      	movs	r2, #2
 8002830:	611a      	str	r2, [r3, #16]
   	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002832:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <main+0x1c0>)
 8002834:	0018      	movs	r0, r3
 8002836:	f002 fcd1 	bl	80051dc <HAL_SPI_Init>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <main+0x4a>
   	  {
   	    Error_Handler();
 800283e:	f000 fb1b 	bl	8002e78 <Error_Handler>
   	  }
   ST7920_Init();
 8002842:	f7ff fd87 	bl	8002354 <ST7920_Init>
   HAL_Delay(100);
 8002846:	2064      	movs	r0, #100	; 0x64
 8002848:	f000 fd60 	bl	800330c <HAL_Delay>
   ST7920_SendString(0, 0, "VOLTAJE (mV)");
 800284c:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <main+0x1c4>)
 800284e:	001a      	movs	r2, r3
 8002850:	2100      	movs	r1, #0
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff fdbc 	bl	80023d0 <ST7920_SendString>
   ST7920_SendString(1, 0, "V:");
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <main+0x1c8>)
 800285a:	001a      	movs	r2, r3
 800285c:	2100      	movs	r1, #0
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff fdb6 	bl	80023d0 <ST7920_SendString>
   ST7920_SendString(2, 0, "CORRIENTE (mA)");
 8002864:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <main+0x1cc>)
 8002866:	001a      	movs	r2, r3
 8002868:	2100      	movs	r1, #0
 800286a:	2002      	movs	r0, #2
 800286c:	f7ff fdb0 	bl	80023d0 <ST7920_SendString>
   ST7920_SendString(3, 0, "I:");
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <main+0x1d0>)
 8002872:	001a      	movs	r2, r3
 8002874:	2100      	movs	r1, #0
 8002876:	2003      	movs	r0, #3
 8002878:	f7ff fdaa 	bl	80023d0 <ST7920_SendString>

   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800287c:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <main+0x1c0>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002882:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <main+0x1c0>)
 8002884:	0018      	movs	r0, r3
 8002886:	f002 fca9 	bl	80051dc <HAL_SPI_Init>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d001      	beq.n	8002892 <main+0x9a>
	  {
		Error_Handler();
 800288e:	f000 faf3 	bl	8002e78 <Error_Handler>
	  }

   ina229_init();
 8002892:	f7ff fbd9 	bl	8002048 <ina229_init>
   ADS1115_init();
 8002896:	f7ff fe15 	bl	80024c4 <ADS1115_init>
   //Capturing voltage
   ADS1115_setMuxChannel(MUX_AIN0_AIN3);//mv1
 800289a:	2001      	movs	r0, #1
 800289c:	f7ff fe46 	bl	800252c <ADS1115_setMuxChannel>
   ADS1115_setOS(1);//wakeup ADS1115
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7ff fe21 	bl	80024e8 <ADS1115_setOS>
   ADS1115_setOperatingMode(CONTINUOUS_CONV);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7ff fe64 	bl	8002574 <ADS1115_setOperatingMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c1, ADS1115_ADR_GND, ADS1115_CONVRS_REG, I2C_MEMADD_SIZE_8BIT, &reg[0], 2, HAL_MAX_DELAY);
 80028ac:	4847      	ldr	r0, [pc, #284]	; (80029cc <main+0x1d4>)
 80028ae:	2301      	movs	r3, #1
 80028b0:	425b      	negs	r3, r3
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2302      	movs	r3, #2
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <main+0x1d8>)
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2200      	movs	r2, #0
 80028c0:	2190      	movs	r1, #144	; 0x90
 80028c2:	f001 f91f 	bl	8003b04 <HAL_I2C_Mem_Read>
	  ib16 = (reg[0]<<8) + reg[1];
 80028c6:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <main+0x1d8>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <main+0x1d8>)
 80028d2:	785b      	ldrb	r3, [r3, #1]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	18d3      	adds	r3, r2, r3
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b21a      	sxth	r2, r3
 80028dc:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <main+0x1dc>)
 80028de:	801a      	strh	r2, [r3, #0]
	  mv = (ib16 *-2048.00f/32768);//expresado en mV
 80028e0:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <main+0x1dc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	5e9b      	ldrsh	r3, [r3, r2]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fe f81e 	bl	8000928 <__aeabi_i2f>
 80028ec:	1c03      	adds	r3, r0, #0
 80028ee:	21c5      	movs	r1, #197	; 0xc5
 80028f0:	0609      	lsls	r1, r1, #24
 80028f2:	1c18      	adds	r0, r3, #0
 80028f4:	f7fd fef2 	bl	80006dc <__aeabi_fmul>
 80028f8:	1c03      	adds	r3, r0, #0
 80028fa:	218e      	movs	r1, #142	; 0x8e
 80028fc:	05c9      	lsls	r1, r1, #23
 80028fe:	1c18      	adds	r0, r3, #0
 8002900:	f7fd fdd4 	bl	80004ac <__aeabi_fdiv>
 8002904:	1c03      	adds	r3, r0, #0
 8002906:	1c18      	adds	r0, r3, #0
 8002908:	f7ff fb08 	bl	8001f1c <__aeabi_f2d>
 800290c:	0002      	movs	r2, r0
 800290e:	000b      	movs	r3, r1
 8002910:	4931      	ldr	r1, [pc, #196]	; (80029d8 <main+0x1e0>)
 8002912:	600a      	str	r2, [r1, #0]
 8002914:	604b      	str	r3, [r1, #4]

	  ftoa(mv, buff, 3);
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <main+0x1e0>)
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	003a      	movs	r2, r7
 800291e:	2303      	movs	r3, #3
 8002920:	f7ff fe4c 	bl	80025bc <ftoa>
	  ST7920_SendString(1, 1, buff);
 8002924:	003b      	movs	r3, r7
 8002926:	001a      	movs	r2, r3
 8002928:	2101      	movs	r1, #1
 800292a:	2001      	movs	r0, #1
 800292c:	f7ff fd50 	bl	80023d0 <ST7920_SendString>


	  //Change SPI polarity for reading INA229
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <main+0x1c0>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <main+0x1c0>)
 8002938:	0018      	movs	r0, r3
 800293a:	f002 fc4f 	bl	80051dc <HAL_SPI_Init>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d001      	beq.n	8002946 <main+0x14e>
	  {
		Error_Handler();
 8002942:	f000 fa99 	bl	8002e78 <Error_Handler>
	  }
	  current_amp = INA229_read_current_register() * INA229_CURRENT_LSB;//;//Amp
 8002946:	f7ff fc29 	bl	800219c <INA229_read_current_register>
 800294a:	0003      	movs	r3, r0
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff fab5 	bl	8001ebc <__aeabi_i2d>
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <main+0x1e4>)
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <main+0x1e8>)
 8002956:	f7fe fc7d 	bl	8001254 <__aeabi_dmul>
 800295a:	0002      	movs	r2, r0
 800295c:	000b      	movs	r3, r1
 800295e:	4921      	ldr	r1, [pc, #132]	; (80029e4 <main+0x1ec>)
 8002960:	600a      	str	r2, [r1, #0]
 8002962:	604b      	str	r3, [r1, #4]
	  current_amp *= 1000;	//in milliamps
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <main+0x1ec>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <main+0x1f0>)
 800296e:	f7fe fc71 	bl	8001254 <__aeabi_dmul>
 8002972:	0002      	movs	r2, r0
 8002974:	000b      	movs	r3, r1
 8002976:	491b      	ldr	r1, [pc, #108]	; (80029e4 <main+0x1ec>)
 8002978:	600a      	str	r2, [r1, #0]
 800297a:	604b      	str	r3, [r1, #4]

	  //Change SPI polarity for reading ST7920
	  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <main+0x1c0>)
 800297e:	2202      	movs	r2, #2
 8002980:	611a      	str	r2, [r3, #16]
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <main+0x1c0>)
 8002984:	0018      	movs	r0, r3
 8002986:	f002 fc29 	bl	80051dc <HAL_SPI_Init>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d001      	beq.n	8002992 <main+0x19a>
	  {
		Error_Handler();
 800298e:	f000 fa73 	bl	8002e78 <Error_Handler>
	  }
	  ftoa(current_amp, buff, 3);
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <main+0x1ec>)
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	003a      	movs	r2, r7
 800299a:	2303      	movs	r3, #3
 800299c:	f7ff fe0e 	bl	80025bc <ftoa>
	  ST7920_SendString(3, 1, buff);
 80029a0:	003b      	movs	r3, r7
 80029a2:	001a      	movs	r2, r3
 80029a4:	2101      	movs	r1, #1
 80029a6:	2003      	movs	r0, #3
 80029a8:	f7ff fd12 	bl	80023d0 <ST7920_SendString>

	  HAL_Delay(2000);
 80029ac:	23fa      	movs	r3, #250	; 0xfa
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 fcab 	bl	800330c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, ADS1115_ADR_GND, ADS1115_CONVRS_REG, I2C_MEMADD_SIZE_8BIT, &reg[0], 2, HAL_MAX_DELAY);
 80029b6:	e779      	b.n	80028ac <main+0xb4>
 80029b8:	2000008c 	.word	0x2000008c
 80029bc:	08006548 	.word	0x08006548
 80029c0:	08006558 	.word	0x08006558
 80029c4:	0800655c 	.word	0x0800655c
 80029c8:	0800656c 	.word	0x0800656c
 80029cc:	20000038 	.word	0x20000038
 80029d0:	200004dc 	.word	0x200004dc
 80029d4:	200004d8 	.word	0x200004d8
 80029d8:	200004e0 	.word	0x200004e0
 80029dc:	eb1c432d 	.word	0xeb1c432d
 80029e0:	3eba36e2 	.word	0x3eba36e2
 80029e4:	200004d0 	.word	0x200004d0
 80029e8:	408f4000 	.word	0x408f4000

080029ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b099      	sub	sp, #100	; 0x64
 80029f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029f2:	242c      	movs	r4, #44	; 0x2c
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	0018      	movs	r0, r3
 80029f8:	2334      	movs	r3, #52	; 0x34
 80029fa:	001a      	movs	r2, r3
 80029fc:	2100      	movs	r1, #0
 80029fe:	f003 fd8d 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a02:	231c      	movs	r3, #28
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	0018      	movs	r0, r3
 8002a08:	2310      	movs	r3, #16
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	f003 fd85 	bl	800651c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	0018      	movs	r0, r3
 8002a16:	2318      	movs	r3, #24
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f003 fd7e 	bl	800651c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002a20:	0021      	movs	r1, r4
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2222      	movs	r2, #34	; 0x22
 8002a26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2201      	movs	r2, #1
 8002a32:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2210      	movs	r2, #16
 8002a38:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	0018      	movs	r0, r3
 8002a44:	f001 fdea 	bl	800461c <HAL_RCC_OscConfig>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002a4c:	f000 fa14 	bl	8002e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a50:	211c      	movs	r1, #28
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f002 f95a 	bl	8004d28 <HAL_RCC_ClockConfig>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a78:	f000 f9fe 	bl	8002e78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <SystemClock_Config+0xc0>)
 8002a80:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	0018      	movs	r0, r3
 8002a98:	f002 fab2 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d001      	beq.n	8002aa4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002aa0:	f000 f9ea 	bl	8002e78 <Error_Handler>
  }
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b019      	add	sp, #100	; 0x64
 8002aaa:	bd90      	pop	{r4, r7, pc}
 8002aac:	00020021 	.word	0x00020021

08002ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <MX_I2C1_Init+0x78>)
 8002ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <MX_I2C1_Init+0x7c>)
 8002abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 fe6b 	bl	80037c8 <HAL_I2C_Init>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d001      	beq.n	8002afa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002af6:	f000 f9bf 	bl	8002e78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002afc:	2100      	movs	r1, #0
 8002afe:	0018      	movs	r0, r3
 8002b00:	f001 fbca 	bl	8004298 <HAL_I2CEx_ConfigAnalogFilter>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d001      	beq.n	8002b0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b08:	f000 f9b6 	bl	8002e78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <MX_I2C1_Init+0x74>)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	0018      	movs	r0, r3
 8002b12:	f001 fc0d 	bl	8004330 <HAL_I2CEx_ConfigDigitalFilter>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d001      	beq.n	8002b1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b1a:	f000 f9ad 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000038 	.word	0x20000038
 8002b28:	40005400 	.word	0x40005400
 8002b2c:	2000090e 	.word	0x2000090e

08002b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 1 */
	//CLKPhase this related field sets the clock phase, and it can assume the values SPI_PHASE_1EDGE
	//(which corresponds to CPHA=0) and SPI_PHASE_2EDGE (which corresponds to CPHA=1).
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b36:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <MX_SPI1_Init+0x78>)
 8002b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b3c:	2282      	movs	r2, #130	; 0x82
 8002b3e:	0052      	lsls	r2, r2, #1
 8002b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b4a:	22e0      	movs	r2, #224	; 0xe0
 8002b4c:	00d2      	lsls	r2, r2, #3
 8002b4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; //SPI_POLARITY_LOW for INA229, HIGH for ST7920
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;//ina229 needs 2EDGE, ST7920 needs 2EDGE too
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b66:	2238      	movs	r2, #56	; 0x38
 8002b68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b7e:	2207      	movs	r2, #7
 8002b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <MX_SPI1_Init+0x74>)
 8002b90:	0018      	movs	r0, r3
 8002b92:	f002 fb23 	bl	80051dc <HAL_SPI_Init>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d001      	beq.n	8002b9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b9a:	f000 f96d 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000008c 	.word	0x2000008c
 8002ba8:	40013000 	.word	0x40013000

08002bac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <MX_SPI2_Init+0x78>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bb8:	2282      	movs	r2, #130	; 0x82
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bbe:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bc6:	22e0      	movs	r2, #224	; 0xe0
 8002bc8:	00d2      	lsls	r2, r2, #3
 8002bca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bce:	2202      	movs	r2, #2
 8002bd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002be2:	2228      	movs	r2, #40	; 0x28
 8002be4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002c06:	2208      	movs	r2, #8
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <MX_SPI2_Init+0x74>)
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f002 fae5 	bl	80051dc <HAL_SPI_Init>
 8002c12:	1e03      	subs	r3, r0, #0
 8002c14:	d001      	beq.n	8002c1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c16:	f000 f92f 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200000f0 	.word	0x200000f0
 8002c24:	40003800 	.word	0x40003800

08002c28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <MX_USART1_UART_Init+0x5c>)
 8002c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c34:	2296      	movs	r2, #150	; 0x96
 8002c36:	0212      	lsls	r2, r2, #8
 8002c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c4e:	220c      	movs	r2, #12
 8002c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <MX_USART1_UART_Init+0x58>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f003 f831 	bl	8005cd4 <HAL_UART_Init>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c76:	f000 f8ff 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000154 	.word	0x20000154
 8002c84:	40013800 	.word	0x40013800

08002c88 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <MX_USB_PCD_Init+0x48>)
 8002c90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002c94:	2208      	movs	r2, #8
 8002c96:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <MX_USB_PCD_Init+0x44>)
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f001 fb85 	bl	80043c8 <HAL_PCD_Init>
 8002cbe:	1e03      	subs	r3, r0, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8002cc2:	f000 f8d9 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	200001dc 	.word	0x200001dc
 8002cd0:	40005c00 	.word	0x40005c00

08002cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b08b      	sub	sp, #44	; 0x2c
 8002cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cda:	2414      	movs	r4, #20
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	0018      	movs	r0, r3
 8002ce0:	2314      	movs	r3, #20
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f003 fc19 	bl	800651c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0309      	lsls	r1, r1, #12
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	615a      	str	r2, [r3, #20]
 8002cf8:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	031b      	lsls	r3, r3, #12
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d06:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	03c9      	lsls	r1, r1, #15
 8002d10:	430a      	orrs	r2, r1
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	03db      	lsls	r3, r3, #15
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	4b4e      	ldr	r3, [pc, #312]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	0289      	lsls	r1, r1, #10
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	615a      	str	r2, [r3, #20]
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	029b      	lsls	r3, r3, #10
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d44:	2180      	movs	r1, #128	; 0x80
 8002d46:	02c9      	lsls	r1, r1, #11
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	615a      	str	r2, [r3, #20]
 8002d4c:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <MX_GPIO_Init+0x188>)
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	02db      	lsls	r3, r3, #11
 8002d54:	4013      	ands	r3, r2
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 8002d5a:	4941      	ldr	r1, [pc, #260]	; (8002e60 <MX_GPIO_Init+0x18c>)
 8002d5c:	2390      	movs	r3, #144	; 0x90
 8002d5e:	05db      	lsls	r3, r3, #23
 8002d60:	2200      	movs	r2, #0
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 fd12 	bl	800378c <HAL_GPIO_WritePin>
                          |OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002d68:	2390      	movs	r3, #144	; 0x90
 8002d6a:	05db      	lsls	r3, r3, #23
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2110      	movs	r1, #16
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fd0b 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KB_ROW0_Pin|KB_ROW1_Pin|KB_ROW2_Pin|LCD_RS_CS_HIGH_Pin
 8002d76:	493b      	ldr	r1, [pc, #236]	; (8002e64 <MX_GPIO_Init+0x190>)
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <MX_GPIO_Init+0x194>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 fd05 	bl	800378c <HAL_GPIO_WritePin>
                          |PIN_TEST_Pin|KB_ROW3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	22e0      	movs	r2, #224	; 0xe0
 8002d86:	0212      	lsls	r2, r2, #8
 8002d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d90:	193b      	adds	r3, r7, r4
 8002d92:	2201      	movs	r2, #1
 8002d94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <MX_GPIO_Init+0x198>)
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f000 fb8d 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin BUZZER_Pin LCD_RST_Pin LCD_CTRL_BACKLIGHT_Pin
                           OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <MX_GPIO_Init+0x18c>)
 8002da6:	601a      	str	r2, [r3, #0]
                          |OUT2_Pin|OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	2201      	movs	r2, #1
 8002dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dba:	193a      	adds	r2, r7, r4
 8002dbc:	2390      	movs	r3, #144	; 0x90
 8002dbe:	05db      	lsls	r3, r3, #23
 8002dc0:	0011      	movs	r1, r2
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 fb7a 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8002dc8:	193b      	adds	r3, r7, r4
 8002dca:	2210      	movs	r2, #16
 8002dcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2203      	movs	r2, #3
 8002dde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8002de0:	193a      	adds	r2, r7, r4
 8002de2:	2390      	movs	r3, #144	; 0x90
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 fb67 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_ROW0_Pin KB_ROW1_Pin KB_ROW2_Pin LCD_RS_CS_HIGH_Pin
                           PIN_TEST_Pin KB_ROW3_Pin */
  GPIO_InitStruct.Pin = KB_ROW0_Pin|KB_ROW1_Pin|KB_ROW2_Pin|LCD_RS_CS_HIGH_Pin
 8002dee:	193b      	adds	r3, r7, r4
 8002df0:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <MX_GPIO_Init+0x190>)
 8002df2:	601a      	str	r2, [r3, #0]
                          |PIN_TEST_Pin|KB_ROW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	2201      	movs	r2, #1
 8002df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <MX_GPIO_Init+0x194>)
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	f000 fb55 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin KB_COL0_Pin KB_COL1_Pin KB_COL2_Pin
                           KB_COL3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|KB_COL0_Pin|KB_COL1_Pin|KB_COL2_Pin
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <MX_GPIO_Init+0x19c>)
 8002e16:	601a      	str	r2, [r3, #0]
                          |KB_COL3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e18:	193b      	adds	r3, r7, r4
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	2201      	movs	r2, #1
 8002e22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <MX_GPIO_Init+0x194>)
 8002e28:	0019      	movs	r1, r3
 8002e2a:	0010      	movs	r0, r2
 8002e2c:	f000 fb46 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 8002e30:	0021      	movs	r1, r4
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2201      	movs	r2, #1
 8002e44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <MX_GPIO_Init+0x1a0>)
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	0010      	movs	r0, r2
 8002e4e:	f000 fb35 	bl	80034bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b00b      	add	sp, #44	; 0x2c
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	0000810f 	.word	0x0000810f
 8002e64:	0000280f 	.word	0x0000280f
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	00001330 	.word	0x00001330
 8002e74:	48001400 	.word	0x48001400

08002e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7c:	b672      	cpsid	i
}
 8002e7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <Error_Handler+0x8>
	...

08002e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e90:	2101      	movs	r1, #1
 8002e92:	430a      	orrs	r2, r1
 8002e94:	619a      	str	r2, [r3, #24]
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_MspInit+0x44>)
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_MspInit+0x44>)
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	0549      	lsls	r1, r1, #21
 8002eac:	430a      	orrs	r2, r1
 8002eae:	61da      	str	r2, [r3, #28]
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_MspInit+0x44>)
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	055b      	lsls	r3, r3, #21
 8002eb8:	4013      	ands	r3, r2
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b08b      	sub	sp, #44	; 0x2c
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	2414      	movs	r4, #20
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	0018      	movs	r0, r3
 8002eda:	2314      	movs	r3, #20
 8002edc:	001a      	movs	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f003 fb1c 	bl	800651c <memset>
  if(hi2c->Instance==I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <HAL_I2C_MspInit+0x90>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d131      	bne.n	8002f52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <HAL_I2C_MspInit+0x94>)
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_I2C_MspInit+0x94>)
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	02c9      	lsls	r1, r1, #11
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	615a      	str	r2, [r3, #20]
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_I2C_MspInit+0x94>)
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	02db      	lsls	r3, r3, #11
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f0a:	0021      	movs	r1, r4
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	22c0      	movs	r2, #192	; 0xc0
 8002f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	2212      	movs	r2, #18
 8002f16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	2203      	movs	r2, #3
 8002f22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	2201      	movs	r2, #1
 8002f28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <HAL_I2C_MspInit+0x98>)
 8002f2e:	0019      	movs	r1, r3
 8002f30:	0010      	movs	r0, r2
 8002f32:	f000 fac3 	bl	80034bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_I2C_MspInit+0x94>)
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_I2C_MspInit+0x94>)
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	0389      	lsls	r1, r1, #14
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_I2C_MspInit+0x94>)
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	039b      	lsls	r3, r3, #14
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b00b      	add	sp, #44	; 0x2c
 8002f58:	bd90      	pop	{r4, r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40005400 	.word	0x40005400
 8002f60:	40021000 	.word	0x40021000
 8002f64:	48000400 	.word	0x48000400

08002f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b08d      	sub	sp, #52	; 0x34
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	241c      	movs	r4, #28
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	0018      	movs	r0, r3
 8002f76:	2314      	movs	r3, #20
 8002f78:	001a      	movs	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f003 face 	bl	800651c <memset>
  if(hspi->Instance==SPI1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a45      	ldr	r2, [pc, #276]	; (800309c <HAL_SPI_MspInit+0x134>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d133      	bne.n	8002ff2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f8a:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	0149      	lsls	r1, r1, #5
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	015b      	lsls	r3, r3, #5
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0289      	lsls	r1, r1, #10
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fc2:	0021      	movs	r1, r4
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	22e0      	movs	r2, #224	; 0xe0
 8002fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2202      	movs	r2, #2
 8002fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd6:	187b      	adds	r3, r7, r1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	187a      	adds	r2, r7, r1
 8002fe4:	2390      	movs	r3, #144	; 0x90
 8002fe6:	05db      	lsls	r3, r3, #23
 8002fe8:	0011      	movs	r1, r2
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 fa66 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ff0:	e04f      	b.n	8003092 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_SPI_MspInit+0x13c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d14a      	bne.n	8003092 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	01c9      	lsls	r1, r1, #7
 8003006:	430a      	orrs	r2, r1
 8003008:	61da      	str	r2, [r3, #28]
 800300a:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	01db      	lsls	r3, r3, #7
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	02c9      	lsls	r1, r1, #11
 8003022:	430a      	orrs	r2, r1
 8003024:	615a      	str	r2, [r3, #20]
 8003026:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <HAL_SPI_MspInit+0x138>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	02db      	lsls	r3, r3, #11
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003034:	211c      	movs	r1, #28
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	00d2      	lsls	r2, r2, #3
 800303c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	000c      	movs	r4, r1
 8003040:	193b      	adds	r3, r7, r4
 8003042:	2202      	movs	r2, #2
 8003044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	193b      	adds	r3, r7, r4
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800304c:	193b      	adds	r3, r7, r4
 800304e:	2203      	movs	r2, #3
 8003050:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003052:	193b      	adds	r3, r7, r4
 8003054:	2205      	movs	r2, #5
 8003056:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003058:	193b      	adds	r3, r7, r4
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <HAL_SPI_MspInit+0x140>)
 800305c:	0019      	movs	r1, r3
 800305e:	0010      	movs	r0, r2
 8003060:	f000 fa2c 	bl	80034bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003064:	0021      	movs	r1, r4
 8003066:	187b      	adds	r3, r7, r1
 8003068:	22c0      	movs	r2, #192	; 0xc0
 800306a:	0212      	lsls	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	187b      	adds	r3, r7, r1
 8003070:	2202      	movs	r2, #2
 8003072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800307a:	187b      	adds	r3, r7, r1
 800307c:	2203      	movs	r2, #3
 800307e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003080:	187b      	adds	r3, r7, r1
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003086:	187b      	adds	r3, r7, r1
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <HAL_SPI_MspInit+0x140>)
 800308a:	0019      	movs	r1, r3
 800308c:	0010      	movs	r0, r2
 800308e:	f000 fa15 	bl	80034bc <HAL_GPIO_Init>
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b00d      	add	sp, #52	; 0x34
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	40013000 	.word	0x40013000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40003800 	.word	0x40003800
 80030a8:	48000400 	.word	0x48000400

080030ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b08b      	sub	sp, #44	; 0x2c
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	2414      	movs	r4, #20
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	0018      	movs	r0, r3
 80030ba:	2314      	movs	r3, #20
 80030bc:	001a      	movs	r2, r3
 80030be:	2100      	movs	r1, #0
 80030c0:	f003 fa2c 	bl	800651c <memset>
  if(huart->Instance==USART1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <HAL_UART_MspInit+0x94>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d133      	bne.n	8003136 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_UART_MspInit+0x98>)
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_UART_MspInit+0x98>)
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	01c9      	lsls	r1, r1, #7
 80030d8:	430a      	orrs	r2, r1
 80030da:	619a      	str	r2, [r3, #24]
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_UART_MspInit+0x98>)
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	01db      	lsls	r3, r3, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_UART_MspInit+0x98>)
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_UART_MspInit+0x98>)
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	0289      	lsls	r1, r1, #10
 80030f4:	430a      	orrs	r2, r1
 80030f6:	615a      	str	r2, [r3, #20]
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_UART_MspInit+0x98>)
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	029b      	lsls	r3, r3, #10
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003106:	193b      	adds	r3, r7, r4
 8003108:	22c0      	movs	r2, #192	; 0xc0
 800310a:	00d2      	lsls	r2, r2, #3
 800310c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	0021      	movs	r1, r4
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2202      	movs	r2, #2
 8003114:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	187b      	adds	r3, r7, r1
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2203      	movs	r2, #3
 8003120:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2201      	movs	r2, #1
 8003126:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003128:	187a      	adds	r2, r7, r1
 800312a:	2390      	movs	r3, #144	; 0x90
 800312c:	05db      	lsls	r3, r3, #23
 800312e:	0011      	movs	r1, r2
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f9c3 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b00b      	add	sp, #44	; 0x2c
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	40013800 	.word	0x40013800
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <HAL_PCD_MspInit+0x38>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10d      	bne.n	8003176 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_PCD_MspInit+0x3c>)
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_PCD_MspInit+0x3c>)
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	0409      	lsls	r1, r1, #16
 8003164:	430a      	orrs	r2, r1
 8003166:	61da      	str	r2, [r3, #28]
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_PCD_MspInit+0x3c>)
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	40005c00 	.word	0x40005c00
 8003184:	40021000 	.word	0x40021000

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800318c:	e7fe      	b.n	800318c <NMI_Handler+0x4>

0800318e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <HardFault_Handler+0x4>

08003194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ac:	f000 f892 	bl	80032d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031b8:	4813      	ldr	r0, [pc, #76]	; (8003208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031bc:	f000 f83d 	bl	800323a <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80031c0:	4812      	ldr	r0, [pc, #72]	; (800320c <LoopForever+0x6>)
    LDR R1, [R0]
 80031c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80031c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <LoopForever+0xa>)
    CMP R1, R2
 80031c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80031ca:	d105      	bne.n	80031d8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80031cc:	4811      	ldr	r0, [pc, #68]	; (8003214 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80031ce:	4912      	ldr	r1, [pc, #72]	; (8003218 <LoopForever+0x12>)
    STR R1, [R0]
 80031d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80031d2:	4812      	ldr	r0, [pc, #72]	; (800321c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80031d4:	4912      	ldr	r1, [pc, #72]	; (8003220 <LoopForever+0x1a>)
    STR R1, [R0]
 80031d6:	6001      	str	r1, [r0, #0]

080031d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d8:	4812      	ldr	r0, [pc, #72]	; (8003224 <LoopForever+0x1e>)
  ldr r1, =_edata
 80031da:	4913      	ldr	r1, [pc, #76]	; (8003228 <LoopForever+0x22>)
  ldr r2, =_sidata
 80031dc:	4a13      	ldr	r2, [pc, #76]	; (800322c <LoopForever+0x26>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e0:	e002      	b.n	80031e8 <LoopCopyDataInit>

080031e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e6:	3304      	adds	r3, #4

080031e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ec:	d3f9      	bcc.n	80031e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80031f0:	4c10      	ldr	r4, [pc, #64]	; (8003234 <LoopForever+0x2e>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f4:	e001      	b.n	80031fa <LoopFillZerobss>

080031f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f8:	3204      	adds	r2, #4

080031fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031fc:	d3fb      	bcc.n	80031f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031fe:	f003 f969 	bl	80064d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003202:	f7ff faf9 	bl	80027f8 <main>

08003206 <LoopForever>:

LoopForever:
    b LoopForever
 8003206:	e7fe      	b.n	8003206 <LoopForever>
  ldr   r0, =_estack
 8003208:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800320c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003210:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8003214:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8003218:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800321c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003220:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003228:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800322c:	08006708 	.word	0x08006708
  ldr r2, =_sbss
 8003230:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003234:	200004ec 	.word	0x200004ec

08003238 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC1_IRQHandler>

0800323a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <HAL_Init+0x24>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_Init+0x24>)
 800324e:	2110      	movs	r1, #16
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003254:	2003      	movs	r0, #3
 8003256:	f000 f809 	bl	800326c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800325a:	f7ff fe13 	bl	8002e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	40022000 	.word	0x40022000

0800326c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <HAL_InitTick+0x5c>)
 8003276:	681c      	ldr	r4, [r3, #0]
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_InitTick+0x60>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	0019      	movs	r1, r3
 800327e:	23fa      	movs	r3, #250	; 0xfa
 8003280:	0098      	lsls	r0, r3, #2
 8003282:	f7fc ff41 	bl	8000108 <__udivsi3>
 8003286:	0003      	movs	r3, r0
 8003288:	0019      	movs	r1, r3
 800328a:	0020      	movs	r0, r4
 800328c:	f7fc ff3c 	bl	8000108 <__udivsi3>
 8003290:	0003      	movs	r3, r0
 8003292:	0018      	movs	r0, r3
 8003294:	f000 f905 	bl	80034a2 <HAL_SYSTICK_Config>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d001      	beq.n	80032a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e00f      	b.n	80032c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d80b      	bhi.n	80032be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	2301      	movs	r3, #1
 80032aa:	425b      	negs	r3, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 f8e2 	bl	8003478 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_InitTick+0x64>)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b003      	add	sp, #12
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000008 	.word	0x20000008
 80032d0:	20000004 	.word	0x20000004

080032d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_IncTick+0x1c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	001a      	movs	r2, r3
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_IncTick+0x20>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	18d2      	adds	r2, r2, r3
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_IncTick+0x20>)
 80032e6:	601a      	str	r2, [r3, #0]
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000008 	.word	0x20000008
 80032f4:	200004e8 	.word	0x200004e8

080032f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  return uwTick;
 80032fc:	4b02      	ldr	r3, [pc, #8]	; (8003308 <HAL_GetTick+0x10>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	200004e8 	.word	0x200004e8

0800330c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7ff fff0 	bl	80032f8 <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	d005      	beq.n	8003332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_Delay+0x44>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	001a      	movs	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	189b      	adds	r3, r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	f7ff ffe0 	bl	80032f8 <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	429a      	cmp	r2, r3
 8003342:	d8f7      	bhi.n	8003334 <HAL_Delay+0x28>
  {
  }
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	20000008 	.word	0x20000008

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	0002      	movs	r2, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b7f      	cmp	r3, #127	; 0x7f
 8003368:	d828      	bhi.n	80033bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800336a:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <__NVIC_SetPriority+0xd4>)
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b25b      	sxtb	r3, r3
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	33c0      	adds	r3, #192	; 0xc0
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	589b      	ldr	r3, [r3, r2]
 800337a:	1dfa      	adds	r2, r7, #7
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	0011      	movs	r1, r2
 8003380:	2203      	movs	r2, #3
 8003382:	400a      	ands	r2, r1
 8003384:	00d2      	lsls	r2, r2, #3
 8003386:	21ff      	movs	r1, #255	; 0xff
 8003388:	4091      	lsls	r1, r2
 800338a:	000a      	movs	r2, r1
 800338c:	43d2      	mvns	r2, r2
 800338e:	401a      	ands	r2, r3
 8003390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	22ff      	movs	r2, #255	; 0xff
 8003398:	401a      	ands	r2, r3
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	0018      	movs	r0, r3
 80033a0:	2303      	movs	r3, #3
 80033a2:	4003      	ands	r3, r0
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a8:	481f      	ldr	r0, [pc, #124]	; (8003428 <__NVIC_SetPriority+0xd4>)
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	430a      	orrs	r2, r1
 80033b4:	33c0      	adds	r3, #192	; 0xc0
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033ba:	e031      	b.n	8003420 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033bc:	4a1b      	ldr	r2, [pc, #108]	; (800342c <__NVIC_SetPriority+0xd8>)
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	0019      	movs	r1, r3
 80033c4:	230f      	movs	r3, #15
 80033c6:	400b      	ands	r3, r1
 80033c8:	3b08      	subs	r3, #8
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3306      	adds	r3, #6
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	3304      	adds	r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1dfa      	adds	r2, r7, #7
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	0011      	movs	r1, r2
 80033dc:	2203      	movs	r2, #3
 80033de:	400a      	ands	r2, r1
 80033e0:	00d2      	lsls	r2, r2, #3
 80033e2:	21ff      	movs	r1, #255	; 0xff
 80033e4:	4091      	lsls	r1, r2
 80033e6:	000a      	movs	r2, r1
 80033e8:	43d2      	mvns	r2, r2
 80033ea:	401a      	ands	r2, r3
 80033ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	22ff      	movs	r2, #255	; 0xff
 80033f4:	401a      	ands	r2, r3
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	0018      	movs	r0, r3
 80033fc:	2303      	movs	r3, #3
 80033fe:	4003      	ands	r3, r0
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003404:	4809      	ldr	r0, [pc, #36]	; (800342c <__NVIC_SetPriority+0xd8>)
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	001c      	movs	r4, r3
 800340c:	230f      	movs	r3, #15
 800340e:	4023      	ands	r3, r4
 8003410:	3b08      	subs	r3, #8
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	430a      	orrs	r2, r1
 8003416:	3306      	adds	r3, #6
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	18c3      	adds	r3, r0, r3
 800341c:	3304      	adds	r3, #4
 800341e:	601a      	str	r2, [r3, #0]
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b003      	add	sp, #12
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1e5a      	subs	r2, r3, #1
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	045b      	lsls	r3, r3, #17
 8003440:	429a      	cmp	r2, r3
 8003442:	d301      	bcc.n	8003448 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003444:	2301      	movs	r3, #1
 8003446:	e010      	b.n	800346a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <SysTick_Config+0x44>)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	3a01      	subs	r2, #1
 800344e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003450:	2301      	movs	r3, #1
 8003452:	425b      	negs	r3, r3
 8003454:	2103      	movs	r1, #3
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff ff7c 	bl	8003354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SysTick_Config+0x44>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <SysTick_Config+0x44>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	210f      	movs	r1, #15
 8003484:	187b      	adds	r3, r7, r1
 8003486:	1c02      	adds	r2, r0, #0
 8003488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	187b      	adds	r3, r7, r1
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b25b      	sxtb	r3, r3
 8003492:	0011      	movs	r1, r2
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff ff5d 	bl	8003354 <__NVIC_SetPriority>
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff ffbf 	bl	8003430 <SysTick_Config>
 80034b2:	0003      	movs	r3, r0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ca:	e149      	b.n	8003760 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4091      	lsls	r1, r2
 80034d6:	000a      	movs	r2, r1
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d100      	bne.n	80034e4 <HAL_GPIO_Init+0x28>
 80034e2:	e13a      	b.n	800375a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d005      	beq.n	80034fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d130      	bne.n	800355e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	409a      	lsls	r2, r3
 800350a:	0013      	movs	r3, r2
 800350c:	43da      	mvns	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	0013      	movs	r3, r2
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003532:	2201      	movs	r2, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	43da      	mvns	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	2201      	movs	r2, #1
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2203      	movs	r2, #3
 8003564:	4013      	ands	r3, r2
 8003566:	2b03      	cmp	r3, #3
 8003568:	d017      	beq.n	800359a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	409a      	lsls	r2, r3
 8003578:	0013      	movs	r3, r2
 800357a:	43da      	mvns	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d123      	bne.n	80035ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	58d3      	ldr	r3, [r2, r3]
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2207      	movs	r2, #7
 80035b8:	4013      	ands	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	220f      	movs	r2, #15
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2107      	movs	r1, #7
 80035d2:	400b      	ands	r3, r1
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	6939      	ldr	r1, [r7, #16]
 80035ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	43da      	mvns	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2203      	movs	r2, #3
 800360c:	401a      	ands	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	23c0      	movs	r3, #192	; 0xc0
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	4013      	ands	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_GPIO_Init+0x174>
 800362e:	e094      	b.n	800375a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003630:	4b51      	ldr	r3, [pc, #324]	; (8003778 <HAL_GPIO_Init+0x2bc>)
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_GPIO_Init+0x2bc>)
 8003636:	2101      	movs	r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	4b4e      	ldr	r3, [pc, #312]	; (8003778 <HAL_GPIO_Init+0x2bc>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003648:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_GPIO_Init+0x2c0>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3302      	adds	r3, #2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	589b      	ldr	r3, [r3, r2]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2203      	movs	r2, #3
 800365a:	4013      	ands	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	220f      	movs	r2, #15
 8003660:	409a      	lsls	r2, r3
 8003662:	0013      	movs	r3, r2
 8003664:	43da      	mvns	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	2390      	movs	r3, #144	; 0x90
 8003670:	05db      	lsls	r3, r3, #23
 8003672:	429a      	cmp	r2, r3
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_Init+0x1d6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a41      	ldr	r2, [pc, #260]	; (8003780 <HAL_GPIO_Init+0x2c4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_Init+0x1d2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a40      	ldr	r2, [pc, #256]	; (8003784 <HAL_GPIO_Init+0x2c8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_Init+0x1ce>
 8003686:	2302      	movs	r3, #2
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x1d8>
 800368a:	2305      	movs	r3, #5
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x1d8>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x1d8>
 8003692:	2300      	movs	r3, #0
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	2103      	movs	r1, #3
 8003698:	400a      	ands	r2, r1
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036a4:	4935      	ldr	r1, [pc, #212]	; (800377c <HAL_GPIO_Init+0x2c0>)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b2:	4b35      	ldr	r3, [pc, #212]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	035b      	lsls	r3, r3, #13
 80036ca:	4013      	ands	r3, r2
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036d6:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	039b      	lsls	r3, r3, #14
 80036f4:	4013      	ands	r3, r2
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43da      	mvns	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	4013      	ands	r3, r2
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43da      	mvns	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	025b      	lsls	r3, r3, #9
 8003748:	4013      	ands	r3, r2
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3301      	adds	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	40da      	lsrs	r2, r3
 8003768:	1e13      	subs	r3, r2, #0
 800376a:	d000      	beq.n	800376e <HAL_GPIO_Init+0x2b2>
 800376c:	e6ae      	b.n	80034cc <HAL_GPIO_Init+0x10>
  } 
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	0008      	movs	r0, r1
 8003796:	0011      	movs	r1, r2
 8003798:	1cbb      	adds	r3, r7, #2
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	1c7b      	adds	r3, r7, #1
 80037a0:	1c0a      	adds	r2, r1, #0
 80037a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a4:	1c7b      	adds	r3, r7, #1
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ac:	1cbb      	adds	r3, r7, #2
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037b6:	1cbb      	adds	r3, r7, #2
 80037b8:	881a      	ldrh	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e082      	b.n	80038e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2241      	movs	r2, #65	; 0x41
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2240      	movs	r2, #64	; 0x40
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7ff fb6b 	bl	8002ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2241      	movs	r2, #65	; 0x41
 80037fa:	2124      	movs	r1, #36	; 0x24
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	438a      	bics	r2, r1
 800380c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4934      	ldr	r1, [pc, #208]	; (80038e8 <HAL_I2C_Init+0x120>)
 8003818:	400a      	ands	r2, r1
 800381a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4931      	ldr	r1, [pc, #196]	; (80038ec <HAL_I2C_Init+0x124>)
 8003828:	400a      	ands	r2, r1
 800382a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d108      	bne.n	8003846 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	0209      	lsls	r1, r1, #8
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	e007      	b.n	8003856 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2184      	movs	r1, #132	; 0x84
 8003850:	0209      	lsls	r1, r1, #8
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d104      	bne.n	8003868 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	0112      	lsls	r2, r2, #4
 8003866:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	491f      	ldr	r1, [pc, #124]	; (80038f0 <HAL_I2C_Init+0x128>)
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	491a      	ldr	r1, [pc, #104]	; (80038ec <HAL_I2C_Init+0x124>)
 8003884:	400a      	ands	r2, r1
 8003886:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	431a      	orrs	r2, r3
 8003892:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69d9      	ldr	r1, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1a      	ldr	r2, [r3, #32]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2101      	movs	r1, #1
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2241      	movs	r2, #65	; 0x41
 80038cc:	2120      	movs	r1, #32
 80038ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2242      	movs	r2, #66	; 0x42
 80038da:	2100      	movs	r1, #0
 80038dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	f0ffffff 	.word	0xf0ffffff
 80038ec:	ffff7fff 	.word	0xffff7fff
 80038f0:	02008000 	.word	0x02008000

080038f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	0008      	movs	r0, r1
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	0019      	movs	r1, r3
 8003902:	230a      	movs	r3, #10
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	1c02      	adds	r2, r0, #0
 8003908:	801a      	strh	r2, [r3, #0]
 800390a:	2308      	movs	r3, #8
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	1c0a      	adds	r2, r1, #0
 8003910:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2241      	movs	r2, #65	; 0x41
 8003916:	5c9b      	ldrb	r3, [r3, r2]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	d000      	beq.n	8003920 <HAL_I2C_Master_Transmit+0x2c>
 800391e:	e0e7      	b.n	8003af0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	5c9b      	ldrb	r3, [r3, r2]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2C_Master_Transmit+0x3a>
 800392a:	2302      	movs	r3, #2
 800392c:	e0e1      	b.n	8003af2 <HAL_I2C_Master_Transmit+0x1fe>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003936:	f7ff fcdf 	bl	80032f8 <HAL_GetTick>
 800393a:	0003      	movs	r3, r0
 800393c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	0219      	lsls	r1, r3, #8
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	f000 fa92 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003950:	1e03      	subs	r3, r0, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0cc      	b.n	8003af2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2241      	movs	r2, #65	; 0x41
 800395c:	2121      	movs	r1, #33	; 0x21
 800395e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2242      	movs	r2, #66	; 0x42
 8003964:	2110      	movs	r1, #16
 8003966:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2208      	movs	r2, #8
 8003978:	18ba      	adds	r2, r7, r2
 800397a:	8812      	ldrh	r2, [r2, #0]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2bff      	cmp	r3, #255	; 0xff
 800398c:	d911      	bls.n	80039b2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	b2da      	uxtb	r2, r3
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	045c      	lsls	r4, r3, #17
 800399e:	230a      	movs	r3, #10
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	8819      	ldrh	r1, [r3, #0]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	4b55      	ldr	r3, [pc, #340]	; (8003afc <HAL_I2C_Master_Transmit+0x208>)
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	0023      	movs	r3, r4
 80039ac:	f000 fc3a 	bl	8004224 <I2C_TransferConfig>
 80039b0:	e075      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	049c      	lsls	r4, r3, #18
 80039c6:	230a      	movs	r3, #10
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	8819      	ldrh	r1, [r3, #0]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_I2C_Master_Transmit+0x208>)
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	0023      	movs	r3, r4
 80039d4:	f000 fc26 	bl	8004224 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80039d8:	e061      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fa95 	bl	8003f10 <I2C_WaitOnTXISFlagUntilTimeout>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e081      	b.n	8003af2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	781a      	ldrb	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d03a      	beq.n	8003a9e <HAL_I2C_Master_Transmit+0x1aa>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d136      	bne.n	8003a9e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	0013      	movs	r3, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	f000 fa19 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e053      	b.n	8003af2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2bff      	cmp	r3, #255	; 0xff
 8003a52:	d911      	bls.n	8003a78 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	22ff      	movs	r2, #255	; 0xff
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	045c      	lsls	r4, r3, #17
 8003a64:	230a      	movs	r3, #10
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	8819      	ldrh	r1, [r3, #0]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	0023      	movs	r3, r4
 8003a72:	f000 fbd7 	bl	8004224 <I2C_TransferConfig>
 8003a76:	e012      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	049c      	lsls	r4, r3, #18
 8003a8c:	230a      	movs	r3, #10
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	8819      	ldrh	r1, [r3, #0]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	0023      	movs	r3, r4
 8003a9a:	f000 fbc3 	bl	8004224 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d198      	bne.n	80039da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fa74 	bl	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e01a      	b.n	8003af2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	490c      	ldr	r1, [pc, #48]	; (8003b00 <HAL_I2C_Master_Transmit+0x20c>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2241      	movs	r2, #65	; 0x41
 8003ad8:	2120      	movs	r1, #32
 8003ada:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2242      	movs	r2, #66	; 0x42
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2240      	movs	r2, #64	; 0x40
 8003ae8:	2100      	movs	r1, #0
 8003aea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b007      	add	sp, #28
 8003af8:	bd90      	pop	{r4, r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	80002000 	.word	0x80002000
 8003b00:	fe00e800 	.word	0xfe00e800

08003b04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	000c      	movs	r4, r1
 8003b0e:	0010      	movs	r0, r2
 8003b10:	0019      	movs	r1, r3
 8003b12:	230a      	movs	r3, #10
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	1c22      	adds	r2, r4, #0
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	1c02      	adds	r2, r0, #0
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	1c0a      	adds	r2, r1, #0
 8003b26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2241      	movs	r2, #65	; 0x41
 8003b2c:	5c9b      	ldrb	r3, [r3, r2]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d000      	beq.n	8003b36 <HAL_I2C_Mem_Read+0x32>
 8003b34:	e110      	b.n	8003d58 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_I2C_Mem_Read+0x42>
 8003b3c:	232c      	movs	r3, #44	; 0x2c
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	0092      	lsls	r2, r2, #2
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e103      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	5c9b      	ldrb	r3, [r3, r2]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_I2C_Mem_Read+0x5c>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0fc      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	2101      	movs	r1, #1
 8003b66:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b68:	f7ff fbc6 	bl	80032f8 <HAL_GetTick>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	0219      	lsls	r1, r3, #8
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2319      	movs	r3, #25
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f000 f979 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	1e03      	subs	r3, r0, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0e7      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2241      	movs	r2, #65	; 0x41
 8003b8e:	2122      	movs	r1, #34	; 0x22
 8003b90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2242      	movs	r2, #66	; 0x42
 8003b96:	2140      	movs	r1, #64	; 0x40
 8003b98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	222c      	movs	r2, #44	; 0x2c
 8003baa:	18ba      	adds	r2, r7, r2
 8003bac:	8812      	ldrh	r2, [r2, #0]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bb6:	1dbb      	adds	r3, r7, #6
 8003bb8:	881c      	ldrh	r4, [r3, #0]
 8003bba:	2308      	movs	r3, #8
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	230a      	movs	r3, #10
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	8819      	ldrh	r1, [r3, #0]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	f000 f8cb 	bl	8003d6c <I2C_RequestMemoryRead>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0b9      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2bff      	cmp	r3, #255	; 0xff
 8003bee:	d911      	bls.n	8003c14 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	045c      	lsls	r4, r3, #17
 8003c00:	230a      	movs	r3, #10
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	8819      	ldrh	r1, [r3, #0]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <HAL_I2C_Mem_Read+0x260>)
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0023      	movs	r3, r4
 8003c0e:	f000 fb09 	bl	8004224 <I2C_TransferConfig>
 8003c12:	e012      	b.n	8003c3a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	049c      	lsls	r4, r3, #18
 8003c28:	230a      	movs	r3, #10
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	8819      	ldrh	r1, [r3, #0]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	4b4c      	ldr	r3, [pc, #304]	; (8003d64 <HAL_I2C_Mem_Read+0x260>)
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	0023      	movs	r3, r4
 8003c36:	f000 faf5 	bl	8004224 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	0013      	movs	r3, r2
 8003c44:	2200      	movs	r2, #0
 8003c46:	2104      	movs	r1, #4
 8003c48:	f000 f914 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003c4c:	1e03      	subs	r3, r0, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e082      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d03a      	beq.n	8003d06 <HAL_I2C_Mem_Read+0x202>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d136      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	f000 f8e5 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003caa:	1e03      	subs	r3, r0, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e053      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2bff      	cmp	r3, #255	; 0xff
 8003cba:	d911      	bls.n	8003ce0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	22ff      	movs	r2, #255	; 0xff
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	045c      	lsls	r4, r3, #17
 8003ccc:	230a      	movs	r3, #10
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	8819      	ldrh	r1, [r3, #0]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	0023      	movs	r3, r4
 8003cda:	f000 faa3 	bl	8004224 <I2C_TransferConfig>
 8003cde:	e012      	b.n	8003d06 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	049c      	lsls	r4, r3, #18
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	8819      	ldrh	r1, [r3, #0]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	0023      	movs	r3, r4
 8003d02:	f000 fa8f 	bl	8004224 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d194      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	0018      	movs	r0, r3
 8003d18:	f000 f940 	bl	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e01a      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	490c      	ldr	r1, [pc, #48]	; (8003d68 <HAL_I2C_Mem_Read+0x264>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2241      	movs	r2, #65	; 0x41
 8003d40:	2120      	movs	r1, #32
 8003d42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2242      	movs	r2, #66	; 0x42
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2240      	movs	r2, #64	; 0x40
 8003d50:	2100      	movs	r1, #0
 8003d52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b007      	add	sp, #28
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	80002400 	.word	0x80002400
 8003d68:	fe00e800 	.word	0xfe00e800

08003d6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	000c      	movs	r4, r1
 8003d76:	0010      	movs	r0, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	250a      	movs	r5, #10
 8003d7c:	197b      	adds	r3, r7, r5
 8003d7e:	1c22      	adds	r2, r4, #0
 8003d80:	801a      	strh	r2, [r3, #0]
 8003d82:	2308      	movs	r3, #8
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	1c02      	adds	r2, r0, #0
 8003d88:	801a      	strh	r2, [r3, #0]
 8003d8a:	1dbb      	adds	r3, r7, #6
 8003d8c:	1c0a      	adds	r2, r1, #0
 8003d8e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d90:	1dbb      	adds	r3, r7, #6
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	197b      	adds	r3, r7, r5
 8003d98:	8819      	ldrh	r1, [r3, #0]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <I2C_RequestMemoryRead+0xc0>)
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	f000 fa3f 	bl	8004224 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	6a39      	ldr	r1, [r7, #32]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 f8af 	bl	8003f10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d001      	beq.n	8003dba <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e033      	b.n	8003e22 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dba:	1dbb      	adds	r3, r7, #6
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
 8003dd0:	e019      	b.n	8003e06 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de6:	6a39      	ldr	r1, [r7, #32]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 f890 	bl	8003f10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e014      	b.n	8003e22 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003df8:	2308      	movs	r3, #8
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a3a      	ldr	r2, [r7, #32]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	0013      	movs	r3, r2
 8003e10:	2200      	movs	r2, #0
 8003e12:	2140      	movs	r1, #64	; 0x40
 8003e14:	f000 f82e 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d001      	beq.n	8003e20 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b004      	add	sp, #16
 8003e28:	bdb0      	pop	{r4, r5, r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	80002000 	.word	0x80002000

08003e30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d103      	bne.n	8003e4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2201      	movs	r2, #1
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d007      	beq.n	8003e6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	619a      	str	r2, [r3, #24]
  }
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	1dfb      	adds	r3, r7, #7
 8003e82:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	e030      	b.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	d02d      	beq.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7ff fa34 	bl	80032f8 <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d122      	bne.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	425a      	negs	r2, r3
 8003eb2:	4153      	adcs	r3, r2
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	001a      	movs	r2, r3
 8003eb8:	1dfb      	adds	r3, r7, #7
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d113      	bne.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2241      	movs	r2, #65	; 0x41
 8003ed0:	2120      	movs	r1, #32
 8003ed2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2242      	movs	r2, #66	; 0x42
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e00f      	b.n	8003f08 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	425a      	negs	r2, r3
 8003ef8:	4153      	adcs	r3, r2
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	001a      	movs	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d0bf      	beq.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f1c:	e032      	b.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 f87d 	bl	8004024 <I2C_IsErrorOccurred>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e030      	b.n	8003f94 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3301      	adds	r3, #1
 8003f36:	d025      	beq.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f38:	f7ff f9de 	bl	80032f8 <HAL_GetTick>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11a      	bne.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2202      	movs	r2, #2
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d013      	beq.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	2220      	movs	r2, #32
 8003f62:	431a      	orrs	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2241      	movs	r2, #65	; 0x41
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2242      	movs	r2, #66	; 0x42
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e007      	b.n	8003f94 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d1c5      	bne.n	8003f1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b004      	add	sp, #16
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa8:	e02f      	b.n	800400a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 f837 	bl	8004024 <I2C_IsErrorOccurred>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e02d      	b.n	800401a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7ff f99b 	bl	80032f8 <HAL_GetTick>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11a      	bne.n	800400a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d013      	beq.n	800400a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2241      	movs	r2, #65	; 0x41
 8003ff2:	2120      	movs	r1, #32
 8003ff4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2242      	movs	r2, #66	; 0x42
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2240      	movs	r2, #64	; 0x40
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e007      	b.n	800401a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2220      	movs	r2, #32
 8004012:	4013      	ands	r3, r2
 8004014:	2b20      	cmp	r3, #32
 8004016:	d1c8      	bne.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b08b      	sub	sp, #44	; 0x2c
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2327      	movs	r3, #39	; 0x27
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2210      	movs	r2, #16
 800404c:	4013      	ands	r3, r2
 800404e:	d100      	bne.n	8004052 <I2C_IsErrorOccurred+0x2e>
 8004050:	e082      	b.n	8004158 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2210      	movs	r2, #16
 8004058:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800405a:	e060      	b.n	800411e <I2C_IsErrorOccurred+0xfa>
 800405c:	2427      	movs	r4, #39	; 0x27
 800405e:	193b      	adds	r3, r7, r4
 8004060:	193a      	adds	r2, r7, r4
 8004062:	7812      	ldrb	r2, [r2, #0]
 8004064:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3301      	adds	r3, #1
 800406a:	d058      	beq.n	800411e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800406c:	f7ff f944 	bl	80032f8 <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	429a      	cmp	r2, r3
 800407a:	d306      	bcc.n	800408a <I2C_IsErrorOccurred+0x66>
 800407c:	193b      	adds	r3, r7, r4
 800407e:	193a      	adds	r2, r7, r4
 8004080:	7812      	ldrb	r2, [r2, #0]
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d149      	bne.n	800411e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004098:	2013      	movs	r0, #19
 800409a:	183b      	adds	r3, r7, r0
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	2142      	movs	r1, #66	; 0x42
 80040a0:	5c52      	ldrb	r2, [r2, r1]
 80040a2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	401a      	ands	r2, r3
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d126      	bne.n	8004106 <I2C_IsErrorOccurred+0xe2>
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	01db      	lsls	r3, r3, #7
 80040be:	429a      	cmp	r2, r3
 80040c0:	d021      	beq.n	8004106 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80040c2:	183b      	adds	r3, r7, r0
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d01d      	beq.n	8004106 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2180      	movs	r1, #128	; 0x80
 80040d6:	01c9      	lsls	r1, r1, #7
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040dc:	f7ff f90c 	bl	80032f8 <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040e4:	e00f      	b.n	8004106 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040e6:	f7ff f907 	bl	80032f8 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b19      	cmp	r3, #25
 80040f2:	d908      	bls.n	8004106 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2220      	movs	r2, #32
 80040f8:	4313      	orrs	r3, r2
 80040fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040fc:	2327      	movs	r3, #39	; 0x27
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]

              break;
 8004104:	e00b      	b.n	800411e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2220      	movs	r2, #32
 800410e:	4013      	ands	r3, r2
 8004110:	2127      	movs	r1, #39	; 0x27
 8004112:	187a      	adds	r2, r7, r1
 8004114:	1879      	adds	r1, r7, r1
 8004116:	7809      	ldrb	r1, [r1, #0]
 8004118:	7011      	strb	r1, [r2, #0]
 800411a:	2b20      	cmp	r3, #32
 800411c:	d1e3      	bne.n	80040e6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2220      	movs	r2, #32
 8004126:	4013      	ands	r3, r2
 8004128:	2b20      	cmp	r3, #32
 800412a:	d004      	beq.n	8004136 <I2C_IsErrorOccurred+0x112>
 800412c:	2327      	movs	r3, #39	; 0x27
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d092      	beq.n	800405c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004136:	2327      	movs	r3, #39	; 0x27
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2220      	movs	r2, #32
 8004146:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	2204      	movs	r2, #4
 800414c:	4313      	orrs	r3, r2
 800414e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004150:	2327      	movs	r3, #39	; 0x27
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4013      	ands	r3, r2
 8004168:	d00c      	beq.n	8004184 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	2201      	movs	r2, #1
 800416e:	4313      	orrs	r3, r2
 8004170:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	0052      	lsls	r2, r2, #1
 800417a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800417c:	2327      	movs	r3, #39	; 0x27
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4013      	ands	r3, r2
 800418c:	d00c      	beq.n	80041a8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	2208      	movs	r2, #8
 8004192:	4313      	orrs	r3, r2
 8004194:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	00d2      	lsls	r2, r2, #3
 800419e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041a0:	2327      	movs	r3, #39	; 0x27
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4013      	ands	r3, r2
 80041b0:	d00c      	beq.n	80041cc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2202      	movs	r2, #2
 80041b6:	4313      	orrs	r3, r2
 80041b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	0092      	lsls	r2, r2, #2
 80041c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041c4:	2327      	movs	r3, #39	; 0x27
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80041cc:	2327      	movs	r3, #39	; 0x27
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01d      	beq.n	8004212 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	0018      	movs	r0, r3
 80041da:	f7ff fe29 	bl	8003e30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	490d      	ldr	r1, [pc, #52]	; (8004220 <I2C_IsErrorOccurred+0x1fc>)
 80041ea:	400a      	ands	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2241      	movs	r2, #65	; 0x41
 80041fe:	2120      	movs	r1, #32
 8004200:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2242      	movs	r2, #66	; 0x42
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2240      	movs	r2, #64	; 0x40
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004212:	2327      	movs	r3, #39	; 0x27
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	781b      	ldrb	r3, [r3, #0]
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b00b      	add	sp, #44	; 0x2c
 800421e:	bd90      	pop	{r4, r7, pc}
 8004220:	fe00e800 	.word	0xfe00e800

08004224 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	0008      	movs	r0, r1
 800422e:	0011      	movs	r1, r2
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	240a      	movs	r4, #10
 8004234:	193b      	adds	r3, r7, r4
 8004236:	1c02      	adds	r2, r0, #0
 8004238:	801a      	strh	r2, [r3, #0]
 800423a:	2009      	movs	r0, #9
 800423c:	183b      	adds	r3, r7, r0
 800423e:	1c0a      	adds	r2, r1, #0
 8004240:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004242:	193b      	adds	r3, r7, r4
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	059b      	lsls	r3, r3, #22
 8004248:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800424a:	183b      	adds	r3, r7, r0
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	0419      	lsls	r1, r3, #16
 8004250:	23ff      	movs	r3, #255	; 0xff
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004256:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	4313      	orrs	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426e:	0d51      	lsrs	r1, r2, #21
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	00d2      	lsls	r2, r2, #3
 8004274:	400a      	ands	r2, r1
 8004276:	4907      	ldr	r1, [pc, #28]	; (8004294 <I2C_TransferConfig+0x70>)
 8004278:	430a      	orrs	r2, r1
 800427a:	43d2      	mvns	r2, r2
 800427c:	401a      	ands	r2, r3
 800427e:	0011      	movs	r1, r2
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b007      	add	sp, #28
 8004290:	bd90      	pop	{r4, r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	03ff63ff 	.word	0x03ff63ff

08004298 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2241      	movs	r2, #65	; 0x41
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d138      	bne.n	8004320 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2240      	movs	r2, #64	; 0x40
 80042b2:	5c9b      	ldrb	r3, [r3, r2]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e032      	b.n	8004322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	2101      	movs	r1, #1
 80042c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2241      	movs	r2, #65	; 0x41
 80042c8:	2124      	movs	r1, #36	; 0x24
 80042ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2101      	movs	r1, #1
 80042d8:	438a      	bics	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4911      	ldr	r1, [pc, #68]	; (800432c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2241      	movs	r2, #65	; 0x41
 8004310:	2120      	movs	r1, #32
 8004312:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	ffffefff 	.word	0xffffefff

08004330 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2241      	movs	r2, #65	; 0x41
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b20      	cmp	r3, #32
 8004344:	d139      	bne.n	80043ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2240      	movs	r2, #64	; 0x40
 800434a:	5c9b      	ldrb	r3, [r3, r2]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004350:	2302      	movs	r3, #2
 8004352:	e033      	b.n	80043bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	2101      	movs	r1, #1
 800435a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2241      	movs	r2, #65	; 0x41
 8004360:	2124      	movs	r1, #36	; 0x24
 8004362:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2101      	movs	r1, #1
 8004370:	438a      	bics	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2101      	movs	r1, #1
 80043a2:	430a      	orrs	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2241      	movs	r2, #65	; 0x41
 80043aa:	2120      	movs	r1, #32
 80043ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2240      	movs	r2, #64	; 0x40
 80043b2:	2100      	movs	r1, #0
 80043b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b004      	add	sp, #16
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	fffff0ff 	.word	0xfffff0ff

080043c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b08b      	sub	sp, #44	; 0x2c
 80043cc:	af06      	add	r7, sp, #24
 80043ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0f0      	b.n	80045bc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a79      	ldr	r2, [pc, #484]	; (80045c4 <HAL_PCD_Init+0x1fc>)
 80043de:	5c9b      	ldrb	r3, [r3, r2]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d108      	bne.n	80043f8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	23aa      	movs	r3, #170	; 0xaa
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	2100      	movs	r1, #0
 80043ee:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0018      	movs	r0, r3
 80043f4:	f7fe fea8 	bl	8003148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a72      	ldr	r2, [pc, #456]	; (80045c4 <HAL_PCD_Init+0x1fc>)
 80043fc:	2103      	movs	r1, #3
 80043fe:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0018      	movs	r0, r3
 8004406:	f002 f823 	bl	8006450 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800440a:	230f      	movs	r3, #15
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e049      	b.n	80044a8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004414:	200f      	movs	r0, #15
 8004416:	183b      	adds	r3, r7, r0
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	0013      	movs	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	189b      	adds	r3, r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	18cb      	adds	r3, r1, r3
 8004428:	3301      	adds	r3, #1
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800442e:	183b      	adds	r3, r7, r0
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	0013      	movs	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	189b      	adds	r3, r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	183a      	adds	r2, r7, r0
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004444:	183b      	adds	r3, r7, r0
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	0013      	movs	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	189b      	adds	r3, r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	18cb      	adds	r3, r1, r3
 8004456:	3303      	adds	r3, #3
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800445c:	183b      	adds	r3, r7, r0
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	0013      	movs	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	189b      	adds	r3, r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	18cb      	adds	r3, r1, r3
 800446c:	3338      	adds	r3, #56	; 0x38
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004472:	183b      	adds	r3, r7, r0
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	0013      	movs	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	189b      	adds	r3, r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	18cb      	adds	r3, r1, r3
 8004482:	333c      	adds	r3, #60	; 0x3c
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004488:	183b      	adds	r3, r7, r0
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	0013      	movs	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	189b      	adds	r3, r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	18cb      	adds	r3, r1, r3
 8004498:	3340      	adds	r3, #64	; 0x40
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449e:	183b      	adds	r3, r7, r0
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	183b      	adds	r3, r7, r0
 80044a4:	3201      	adds	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	210f      	movs	r1, #15
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d3ae      	bcc.n	8004414 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e056      	b.n	800456c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044be:	240f      	movs	r4, #15
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	236a      	movs	r3, #106	; 0x6a
 80044c8:	33ff      	adds	r3, #255	; 0xff
 80044ca:	0019      	movs	r1, r3
 80044cc:	0013      	movs	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	18c3      	adds	r3, r0, r3
 80044d6:	185b      	adds	r3, r3, r1
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	23b4      	movs	r3, #180	; 0xb4
 80044e4:	0059      	lsls	r1, r3, #1
 80044e6:	0013      	movs	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	18c3      	adds	r3, r0, r3
 80044f0:	185b      	adds	r3, r3, r1
 80044f2:	193a      	adds	r2, r7, r4
 80044f4:	7812      	ldrb	r2, [r2, #0]
 80044f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044f8:	193b      	adds	r3, r7, r4
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	236c      	movs	r3, #108	; 0x6c
 8004500:	33ff      	adds	r3, #255	; 0xff
 8004502:	0019      	movs	r1, r3
 8004504:	0013      	movs	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	189b      	adds	r3, r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	18c3      	adds	r3, r0, r3
 800450e:	185b      	adds	r3, r3, r1
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004514:	193b      	adds	r3, r7, r4
 8004516:	781a      	ldrb	r2, [r3, #0]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	23bc      	movs	r3, #188	; 0xbc
 800451c:	0059      	lsls	r1, r3, #1
 800451e:	0013      	movs	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	189b      	adds	r3, r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	18c3      	adds	r3, r0, r3
 8004528:	185b      	adds	r3, r3, r1
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800452e:	193b      	adds	r3, r7, r4
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	23be      	movs	r3, #190	; 0xbe
 8004536:	0059      	lsls	r1, r3, #1
 8004538:	0013      	movs	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	189b      	adds	r3, r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	18c3      	adds	r3, r0, r3
 8004542:	185b      	adds	r3, r3, r1
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004548:	193b      	adds	r3, r7, r4
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	23c0      	movs	r3, #192	; 0xc0
 8004550:	0059      	lsls	r1, r3, #1
 8004552:	0013      	movs	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	189b      	adds	r3, r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	18c3      	adds	r3, r0, r3
 800455c:	185b      	adds	r3, r3, r1
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004562:	193b      	adds	r3, r7, r4
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	193b      	adds	r3, r7, r4
 8004568:	3201      	adds	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	230f      	movs	r3, #15
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	d3a1      	bcc.n	80044be <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	466a      	mov	r2, sp
 8004582:	0011      	movs	r1, r2
 8004584:	001a      	movs	r2, r3
 8004586:	3210      	adds	r2, #16
 8004588:	ca70      	ldmia	r2!, {r4, r5, r6}
 800458a:	c170      	stmia	r1!, {r4, r5, r6}
 800458c:	ca30      	ldmia	r2!, {r4, r5}
 800458e:	c130      	stmia	r1!, {r4, r5}
 8004590:	6859      	ldr	r1, [r3, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f001 ff75 	bl	8006484 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2224      	movs	r2, #36	; 0x24
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <HAL_PCD_Init+0x1fc>)
 80045a6:	2101      	movs	r1, #1
 80045a8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d103      	bne.n	80045ba <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f000 f807 	bl	80045c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b005      	add	sp, #20
 80045c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c4:	000002a9 	.word	0x000002a9

080045c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	23ba      	movs	r3, #186	; 0xba
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	2101      	movs	r1, #1
 80045de:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	23b8      	movs	r3, #184	; 0xb8
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	2100      	movs	r1, #0
 80045e8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2254      	movs	r2, #84	; 0x54
 80045ee:	5a9b      	ldrh	r3, [r3, r2]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2201      	movs	r2, #1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b299      	uxth	r1, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2254      	movs	r2, #84	; 0x54
 80045fc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2254      	movs	r2, #84	; 0x54
 8004602:	5a9b      	ldrh	r3, [r3, r2]
 8004604:	b29b      	uxth	r3, r3
 8004606:	2202      	movs	r2, #2
 8004608:	4313      	orrs	r3, r2
 800460a:	b299      	uxth	r1, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2254      	movs	r2, #84	; 0x54
 8004610:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b004      	add	sp, #16
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f000 fb76 	bl	8004d1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	d100      	bne.n	800463c <HAL_RCC_OscConfig+0x20>
 800463a:	e08e      	b.n	800475a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800463c:	4bc5      	ldr	r3, [pc, #788]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	220c      	movs	r2, #12
 8004642:	4013      	ands	r3, r2
 8004644:	2b04      	cmp	r3, #4
 8004646:	d00e      	beq.n	8004666 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004648:	4bc2      	ldr	r3, [pc, #776]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	220c      	movs	r2, #12
 800464e:	4013      	ands	r3, r2
 8004650:	2b08      	cmp	r3, #8
 8004652:	d117      	bne.n	8004684 <HAL_RCC_OscConfig+0x68>
 8004654:	4bbf      	ldr	r3, [pc, #764]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	23c0      	movs	r3, #192	; 0xc0
 800465a:	025b      	lsls	r3, r3, #9
 800465c:	401a      	ands	r2, r3
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	429a      	cmp	r2, r3
 8004664:	d10e      	bne.n	8004684 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004666:	4bbb      	ldr	r3, [pc, #748]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	029b      	lsls	r3, r3, #10
 800466e:	4013      	ands	r3, r2
 8004670:	d100      	bne.n	8004674 <HAL_RCC_OscConfig+0x58>
 8004672:	e071      	b.n	8004758 <HAL_RCC_OscConfig+0x13c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d000      	beq.n	800467e <HAL_RCC_OscConfig+0x62>
 800467c:	e06c      	b.n	8004758 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f000 fb4c 	bl	8004d1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x80>
 800468c:	4bb1      	ldr	r3, [pc, #708]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4bb0      	ldr	r3, [pc, #704]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	0249      	lsls	r1, r1, #9
 8004696:	430a      	orrs	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e02f      	b.n	80046fc <HAL_RCC_OscConfig+0xe0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10c      	bne.n	80046be <HAL_RCC_OscConfig+0xa2>
 80046a4:	4bab      	ldr	r3, [pc, #684]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4baa      	ldr	r3, [pc, #680]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046aa:	49ab      	ldr	r1, [pc, #684]	; (8004958 <HAL_RCC_OscConfig+0x33c>)
 80046ac:	400a      	ands	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	4ba8      	ldr	r3, [pc, #672]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4ba7      	ldr	r3, [pc, #668]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046b6:	49a9      	ldr	r1, [pc, #676]	; (800495c <HAL_RCC_OscConfig+0x340>)
 80046b8:	400a      	ands	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e01e      	b.n	80046fc <HAL_RCC_OscConfig+0xe0>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d10e      	bne.n	80046e4 <HAL_RCC_OscConfig+0xc8>
 80046c6:	4ba3      	ldr	r3, [pc, #652]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4ba2      	ldr	r3, [pc, #648]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	02c9      	lsls	r1, r1, #11
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	4b9f      	ldr	r3, [pc, #636]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b9e      	ldr	r3, [pc, #632]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	0249      	lsls	r1, r1, #9
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xe0>
 80046e4:	4b9b      	ldr	r3, [pc, #620]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b9a      	ldr	r3, [pc, #616]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046ea:	499b      	ldr	r1, [pc, #620]	; (8004958 <HAL_RCC_OscConfig+0x33c>)
 80046ec:	400a      	ands	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	4b98      	ldr	r3, [pc, #608]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b97      	ldr	r3, [pc, #604]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80046f6:	4999      	ldr	r1, [pc, #612]	; (800495c <HAL_RCC_OscConfig+0x340>)
 80046f8:	400a      	ands	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d014      	beq.n	800472e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fe fdf8 	bl	80032f8 <HAL_GetTick>
 8004708:	0003      	movs	r3, r0
 800470a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470e:	f7fe fdf3 	bl	80032f8 <HAL_GetTick>
 8004712:	0002      	movs	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e2fd      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004720:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	029b      	lsls	r3, r3, #10
 8004728:	4013      	ands	r3, r2
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0xf2>
 800472c:	e015      	b.n	800475a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fe fde3 	bl	80032f8 <HAL_GetTick>
 8004732:	0003      	movs	r3, r0
 8004734:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004738:	f7fe fdde 	bl	80032f8 <HAL_GetTick>
 800473c:	0002      	movs	r2, r0
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e2e8      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	029b      	lsls	r3, r3, #10
 8004752:	4013      	ands	r3, r2
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x11c>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2202      	movs	r2, #2
 8004760:	4013      	ands	r3, r2
 8004762:	d100      	bne.n	8004766 <HAL_RCC_OscConfig+0x14a>
 8004764:	e06c      	b.n	8004840 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004766:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	220c      	movs	r2, #12
 800476c:	4013      	ands	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004770:	4b78      	ldr	r3, [pc, #480]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	220c      	movs	r2, #12
 8004776:	4013      	ands	r3, r2
 8004778:	2b08      	cmp	r3, #8
 800477a:	d11f      	bne.n	80047bc <HAL_RCC_OscConfig+0x1a0>
 800477c:	4b75      	ldr	r3, [pc, #468]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	23c0      	movs	r3, #192	; 0xc0
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	401a      	ands	r2, r3
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	429a      	cmp	r2, r3
 800478c:	d116      	bne.n	80047bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478e:	4b71      	ldr	r3, [pc, #452]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2202      	movs	r2, #2
 8004794:	4013      	ands	r3, r2
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x188>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e2bb      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b6b      	ldr	r3, [pc, #428]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22f8      	movs	r2, #248	; 0xf8
 80047aa:	4393      	bics	r3, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	00da      	lsls	r2, r3, #3
 80047b4:	4b67      	ldr	r3, [pc, #412]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ba:	e041      	b.n	8004840 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d024      	beq.n	800480e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c4:	4b63      	ldr	r3, [pc, #396]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4b62      	ldr	r3, [pc, #392]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80047ca:	2101      	movs	r1, #1
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe fd92 	bl	80032f8 <HAL_GetTick>
 80047d4:	0003      	movs	r3, r0
 80047d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047da:	f7fe fd8d 	bl	80032f8 <HAL_GetTick>
 80047de:	0002      	movs	r2, r0
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e297      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2202      	movs	r2, #2
 80047f2:	4013      	ands	r3, r2
 80047f4:	d0f1      	beq.n	80047da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b57      	ldr	r3, [pc, #348]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	22f8      	movs	r2, #248	; 0xf8
 80047fc:	4393      	bics	r3, r2
 80047fe:	0019      	movs	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	00da      	lsls	r2, r3, #3
 8004806:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e018      	b.n	8004840 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480e:	4b51      	ldr	r3, [pc, #324]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004814:	2101      	movs	r1, #1
 8004816:	438a      	bics	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fe fd6d 	bl	80032f8 <HAL_GetTick>
 800481e:	0003      	movs	r3, r0
 8004820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004824:	f7fe fd68 	bl	80032f8 <HAL_GetTick>
 8004828:	0002      	movs	r2, r0
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e272      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2202      	movs	r2, #2
 800483c:	4013      	ands	r3, r2
 800483e:	d1f1      	bne.n	8004824 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2208      	movs	r2, #8
 8004846:	4013      	ands	r3, r2
 8004848:	d036      	beq.n	80048b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d019      	beq.n	8004886 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004852:	4b40      	ldr	r3, [pc, #256]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004858:	2101      	movs	r1, #1
 800485a:	430a      	orrs	r2, r1
 800485c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485e:	f7fe fd4b 	bl	80032f8 <HAL_GetTick>
 8004862:	0003      	movs	r3, r0
 8004864:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004868:	f7fe fd46 	bl	80032f8 <HAL_GetTick>
 800486c:	0002      	movs	r2, r0
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e250      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2202      	movs	r2, #2
 8004880:	4013      	ands	r3, r2
 8004882:	d0f1      	beq.n	8004868 <HAL_RCC_OscConfig+0x24c>
 8004884:	e018      	b.n	80048b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004886:	4b33      	ldr	r3, [pc, #204]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488a:	4b32      	ldr	r3, [pc, #200]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800488c:	2101      	movs	r1, #1
 800488e:	438a      	bics	r2, r1
 8004890:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fe fd31 	bl	80032f8 <HAL_GetTick>
 8004896:	0003      	movs	r3, r0
 8004898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489c:	f7fe fd2c 	bl	80032f8 <HAL_GetTick>
 80048a0:	0002      	movs	r2, r0
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e236      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ae:	4b29      	ldr	r3, [pc, #164]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2202      	movs	r2, #2
 80048b4:	4013      	ands	r3, r2
 80048b6:	d1f1      	bne.n	800489c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2204      	movs	r2, #4
 80048be:	4013      	ands	r3, r2
 80048c0:	d100      	bne.n	80048c4 <HAL_RCC_OscConfig+0x2a8>
 80048c2:	e0b5      	b.n	8004a30 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c4:	201f      	movs	r0, #31
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048cc:	4b21      	ldr	r3, [pc, #132]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	055b      	lsls	r3, r3, #21
 80048d4:	4013      	ands	r3, r2
 80048d6:	d110      	bne.n	80048fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d8:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	0549      	lsls	r1, r1, #21
 80048e2:	430a      	orrs	r2, r1
 80048e4:	61da      	str	r2, [r3, #28]
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	055b      	lsls	r3, r3, #21
 80048ee:	4013      	ands	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048f4:	183b      	adds	r3, r7, r0
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_OscConfig+0x344>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4013      	ands	r3, r2
 8004904:	d11a      	bne.n	800493c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004906:	4b16      	ldr	r3, [pc, #88]	; (8004960 <HAL_RCC_OscConfig+0x344>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_RCC_OscConfig+0x344>)
 800490c:	2180      	movs	r1, #128	; 0x80
 800490e:	0049      	lsls	r1, r1, #1
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004914:	f7fe fcf0 	bl	80032f8 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fe fceb 	bl	80032f8 <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	; 0x64
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e1f5      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_OscConfig+0x344>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4013      	ands	r3, r2
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d10f      	bne.n	8004964 <HAL_RCC_OscConfig+0x348>
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	4b02      	ldr	r3, [pc, #8]	; (8004954 <HAL_RCC_OscConfig+0x338>)
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	621a      	str	r2, [r3, #32]
 8004950:	e036      	b.n	80049c0 <HAL_RCC_OscConfig+0x3a4>
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	40021000 	.word	0x40021000
 8004958:	fffeffff 	.word	0xfffeffff
 800495c:	fffbffff 	.word	0xfffbffff
 8004960:	40007000 	.word	0x40007000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10c      	bne.n	8004986 <HAL_RCC_OscConfig+0x36a>
 800496c:	4bca      	ldr	r3, [pc, #808]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 800496e:	6a1a      	ldr	r2, [r3, #32]
 8004970:	4bc9      	ldr	r3, [pc, #804]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004972:	2101      	movs	r1, #1
 8004974:	438a      	bics	r2, r1
 8004976:	621a      	str	r2, [r3, #32]
 8004978:	4bc7      	ldr	r3, [pc, #796]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	4bc6      	ldr	r3, [pc, #792]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 800497e:	2104      	movs	r1, #4
 8004980:	438a      	bics	r2, r1
 8004982:	621a      	str	r2, [r3, #32]
 8004984:	e01c      	b.n	80049c0 <HAL_RCC_OscConfig+0x3a4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b05      	cmp	r3, #5
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x38c>
 800498e:	4bc2      	ldr	r3, [pc, #776]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	4bc1      	ldr	r3, [pc, #772]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004994:	2104      	movs	r1, #4
 8004996:	430a      	orrs	r2, r1
 8004998:	621a      	str	r2, [r3, #32]
 800499a:	4bbf      	ldr	r3, [pc, #764]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	4bbe      	ldr	r3, [pc, #760]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 80049a0:	2101      	movs	r1, #1
 80049a2:	430a      	orrs	r2, r1
 80049a4:	621a      	str	r2, [r3, #32]
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0x3a4>
 80049a8:	4bbb      	ldr	r3, [pc, #748]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 80049aa:	6a1a      	ldr	r2, [r3, #32]
 80049ac:	4bba      	ldr	r3, [pc, #744]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	621a      	str	r2, [r3, #32]
 80049b4:	4bb8      	ldr	r3, [pc, #736]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	4bb7      	ldr	r3, [pc, #732]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 80049ba:	2104      	movs	r1, #4
 80049bc:	438a      	bics	r2, r1
 80049be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d014      	beq.n	80049f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c8:	f7fe fc96 	bl	80032f8 <HAL_GetTick>
 80049cc:	0003      	movs	r3, r0
 80049ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	e009      	b.n	80049e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fe fc91 	bl	80032f8 <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	4aaf      	ldr	r2, [pc, #700]	; (8004c9c <HAL_RCC_OscConfig+0x680>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e19a      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	4bac      	ldr	r3, [pc, #688]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	2202      	movs	r2, #2
 80049ec:	4013      	ands	r3, r2
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x3b6>
 80049f0:	e013      	b.n	8004a1a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f2:	f7fe fc81 	bl	80032f8 <HAL_GetTick>
 80049f6:	0003      	movs	r3, r0
 80049f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fa:	e009      	b.n	8004a10 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fe fc7c 	bl	80032f8 <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	4aa5      	ldr	r2, [pc, #660]	; (8004c9c <HAL_RCC_OscConfig+0x680>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e185      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a10:	4ba1      	ldr	r3, [pc, #644]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	2202      	movs	r2, #2
 8004a16:	4013      	ands	r3, r2
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a1a:	231f      	movs	r3, #31
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a24:	4b9c      	ldr	r3, [pc, #624]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	4b9b      	ldr	r3, [pc, #620]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a2a:	499d      	ldr	r1, [pc, #628]	; (8004ca0 <HAL_RCC_OscConfig+0x684>)
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2210      	movs	r2, #16
 8004a36:	4013      	ands	r3, r2
 8004a38:	d063      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d12a      	bne.n	8004a98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a42:	4b95      	ldr	r3, [pc, #596]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a46:	4b94      	ldr	r3, [pc, #592]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a48:	2104      	movs	r1, #4
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004a4e:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a52:	4b91      	ldr	r3, [pc, #580]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a54:	2101      	movs	r1, #1
 8004a56:	430a      	orrs	r2, r1
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5a:	f7fe fc4d 	bl	80032f8 <HAL_GetTick>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a64:	f7fe fc48 	bl	80032f8 <HAL_GetTick>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e152      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a76:	4b88      	ldr	r3, [pc, #544]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d0f1      	beq.n	8004a64 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a80:	4b85      	ldr	r3, [pc, #532]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	22f8      	movs	r2, #248	; 0xf8
 8004a86:	4393      	bics	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	00da      	lsls	r2, r3, #3
 8004a90:	4b81      	ldr	r3, [pc, #516]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004a92:	430a      	orrs	r2, r1
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34
 8004a96:	e034      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	3305      	adds	r3, #5
 8004a9e:	d111      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004aa0:	4b7d      	ldr	r3, [pc, #500]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa4:	4b7c      	ldr	r3, [pc, #496]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004aa6:	2104      	movs	r1, #4
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004aac:	4b7a      	ldr	r3, [pc, #488]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	22f8      	movs	r2, #248	; 0xf8
 8004ab2:	4393      	bics	r3, r2
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	00da      	lsls	r2, r3, #3
 8004abc:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ac2:	e01e      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ac4:	4b74      	ldr	r3, [pc, #464]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac8:	4b73      	ldr	r3, [pc, #460]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004aca:	2104      	movs	r1, #4
 8004acc:	430a      	orrs	r2, r1
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ad0:	4b71      	ldr	r3, [pc, #452]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad4:	4b70      	ldr	r3, [pc, #448]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	438a      	bics	r2, r1
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004adc:	f7fe fc0c 	bl	80032f8 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ae6:	f7fe fc07 	bl	80032f8 <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e111      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004af8:	4b67      	ldr	r3, [pc, #412]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	2202      	movs	r2, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	d1f1      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2220      	movs	r2, #32
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d05c      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004b0c:	4b62      	ldr	r3, [pc, #392]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	220c      	movs	r2, #12
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d00e      	beq.n	8004b36 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004b18:	4b5f      	ldr	r3, [pc, #380]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	220c      	movs	r2, #12
 8004b1e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d114      	bne.n	8004b4e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004b24:	4b5c      	ldr	r3, [pc, #368]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	23c0      	movs	r3, #192	; 0xc0
 8004b2a:	025b      	lsls	r3, r3, #9
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	23c0      	movs	r3, #192	; 0xc0
 8004b30:	025b      	lsls	r3, r3, #9
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d10b      	bne.n	8004b4e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b36:	4b58      	ldr	r3, [pc, #352]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x5a8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d03c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0e6      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004b56:	4b50      	ldr	r3, [pc, #320]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b5a:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	0249      	lsls	r1, r1, #9
 8004b60:	430a      	orrs	r2, r1
 8004b62:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fe fbc8 	bl	80032f8 <HAL_GetTick>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b6e:	f7fe fbc3 	bl	80032f8 <HAL_GetTick>
 8004b72:	0002      	movs	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0cd      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b80:	4b45      	ldr	r3, [pc, #276]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x552>
 8004b8c:	e01b      	b.n	8004bc6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004b8e:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b92:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004b94:	4943      	ldr	r1, [pc, #268]	; (8004ca4 <HAL_RCC_OscConfig+0x688>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fe fbad 	bl	80032f8 <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba4:	f7fe fba8 	bl	80032f8 <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0b2      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004bb6:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	029b      	lsls	r3, r3, #10
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x588>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004bc4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d100      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x5b4>
 8004bce:	e0a4      	b.n	8004d1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	220c      	movs	r2, #12
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d100      	bne.n	8004bde <HAL_RCC_OscConfig+0x5c2>
 8004bdc:	e078      	b.n	8004cd0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d14c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004bec:	492e      	ldr	r1, [pc, #184]	; (8004ca8 <HAL_RCC_OscConfig+0x68c>)
 8004bee:	400a      	ands	r2, r1
 8004bf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf2:	f7fe fb81 	bl	80032f8 <HAL_GetTick>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe fb7c 	bl	80032f8 <HAL_GetTick>
 8004c00:	0002      	movs	r2, r0
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e086      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	049b      	lsls	r3, r3, #18
 8004c16:	4013      	ands	r3, r2
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1a:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	220f      	movs	r2, #15
 8004c20:	4393      	bics	r3, r2
 8004c22:	0019      	movs	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c28:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c2e:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <HAL_RCC_OscConfig+0x690>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	431a      	orrs	r2, r3
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c4e:	2180      	movs	r1, #128	; 0x80
 8004c50:	0449      	lsls	r1, r1, #17
 8004c52:	430a      	orrs	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c56:	f7fe fb4f 	bl	80032f8 <HAL_GetTick>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fe fb4a 	bl	80032f8 <HAL_GetTick>
 8004c64:	0002      	movs	r2, r0
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e054      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	049b      	lsls	r3, r3, #18
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x644>
 8004c7e:	e04c      	b.n	8004d1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <HAL_RCC_OscConfig+0x67c>)
 8004c86:	4908      	ldr	r1, [pc, #32]	; (8004ca8 <HAL_RCC_OscConfig+0x68c>)
 8004c88:	400a      	ands	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fe fb34 	bl	80032f8 <HAL_GetTick>
 8004c90:	0003      	movs	r3, r0
 8004c92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x6a6>
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	00001388 	.word	0x00001388
 8004ca0:	efffffff 	.word	0xefffffff
 8004ca4:	fffeffff 	.word	0xfffeffff
 8004ca8:	feffffff 	.word	0xfeffffff
 8004cac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fe fb22 	bl	80032f8 <HAL_GetTick>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e02c      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <HAL_RCC_OscConfig+0x708>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	049b      	lsls	r3, r3, #18
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x694>
 8004cce:	e024      	b.n	8004d1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e01f      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <HAL_RCC_OscConfig+0x708>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCC_OscConfig+0x708>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	23c0      	movs	r3, #192	; 0xc0
 8004cec:	025b      	lsls	r3, r3, #9
 8004cee:	401a      	ands	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d10e      	bne.n	8004d16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	220f      	movs	r2, #15
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	23f0      	movs	r3, #240	; 0xf0
 8004d0a:	039b      	lsls	r3, r3, #14
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d001      	beq.n	8004d1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b008      	add	sp, #32
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000

08004d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0bf      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d911      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b5e      	ldr	r3, [pc, #376]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4393      	bics	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	4b5b      	ldr	r3, [pc, #364]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5c:	4b59      	ldr	r3, [pc, #356]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0a6      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2202      	movs	r2, #2
 8004d74:	4013      	ands	r3, r2
 8004d76:	d015      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d006      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d82:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004d88:	21e0      	movs	r1, #224	; 0xe0
 8004d8a:	00c9      	lsls	r1, r1, #3
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d90:	4b4d      	ldr	r3, [pc, #308]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	22f0      	movs	r2, #240	; 0xf0
 8004d96:	4393      	bics	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	d04c      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db6:	4b44      	ldr	r3, [pc, #272]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d120      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e07a      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dce:	4b3e      	ldr	r3, [pc, #248]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	049b      	lsls	r3, r3, #18
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d114      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06e      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d107      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004de6:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	029b      	lsls	r3, r3, #10
 8004dee:	4013      	ands	r3, r2
 8004df0:	d108      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e062      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df6:	4b34      	ldr	r3, [pc, #208]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e05b      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e04:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	4393      	bics	r3, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e18:	f7fe fa6e 	bl	80032f8 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e20:	e009      	b.n	8004e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e22:	f7fe fa69 	bl	80032f8 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <HAL_RCC_ClockConfig+0x1a4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e042      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	220c      	movs	r2, #12
 8004e3c:	401a      	ands	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1ec      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e48:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d211      	bcs.n	8004e7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4393      	bics	r3, r2
 8004e5e:	0019      	movs	r1, r3
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e68:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_RCC_ClockConfig+0x19c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4013      	ands	r3, r2
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e020      	b.n	8004ebc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4013      	ands	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e84:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <HAL_RCC_ClockConfig+0x1a8>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e98:	f000 f820 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004e9c:	0001      	movs	r1, r0
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	220f      	movs	r2, #15
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <HAL_RCC_ClockConfig+0x1ac>)
 8004eaa:	5cd3      	ldrb	r3, [r2, r3]
 8004eac:	000a      	movs	r2, r1
 8004eae:	40da      	lsrs	r2, r3
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	f7fe f9d9 	bl	800326c <HAL_InitTick>
  
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	00001388 	.word	0x00001388
 8004ed0:	fffff8ff 	.word	0xfffff8ff
 8004ed4:	080066c8 	.word	0x080066c8
 8004ed8:	20000000 	.word	0x20000000

08004edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ef6:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	220c      	movs	r2, #12
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b0c      	cmp	r3, #12
 8004f04:	d046      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0xb8>
 8004f06:	d848      	bhi.n	8004f9a <HAL_RCC_GetSysClockFreq+0xbe>
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d002      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x36>
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d003      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x3c>
 8004f10:	e043      	b.n	8004f9a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f12:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f14:	613b      	str	r3, [r7, #16]
      break;
 8004f16:	e043      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	0c9b      	lsrs	r3, r3, #18
 8004f1c:	220f      	movs	r2, #15
 8004f1e:	4013      	ands	r3, r2
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004f26:	4b21      	ldr	r3, [pc, #132]	; (8004fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	220f      	movs	r2, #15
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
 8004f32:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	23c0      	movs	r3, #192	; 0xc0
 8004f38:	025b      	lsls	r3, r3, #9
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	025b      	lsls	r3, r3, #9
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d109      	bne.n	8004f58 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	481a      	ldr	r0, [pc, #104]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f48:	f7fb f8de 	bl	8000108 <__udivsi3>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	001a      	movs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4353      	muls	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e01a      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	23c0      	movs	r3, #192	; 0xc0
 8004f5c:	025b      	lsls	r3, r3, #9
 8004f5e:	401a      	ands	r2, r3
 8004f60:	23c0      	movs	r3, #192	; 0xc0
 8004f62:	025b      	lsls	r3, r3, #9
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d109      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4814      	ldr	r0, [pc, #80]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8004f6c:	f7fb f8cc 	bl	8000108 <__udivsi3>
 8004f70:	0003      	movs	r3, r0
 8004f72:	001a      	movs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4353      	muls	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	480c      	ldr	r0, [pc, #48]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f80:	f7fb f8c2 	bl	8000108 <__udivsi3>
 8004f84:	0003      	movs	r3, r0
 8004f86:	001a      	movs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4353      	muls	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	613b      	str	r3, [r7, #16]
      break;
 8004f92:	e005      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8004f96:	613b      	str	r3, [r7, #16]
      break;
 8004f98:	e002      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f9c:	613b      	str	r3, [r7, #16]
      break;
 8004f9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004fa0:	693b      	ldr	r3, [r7, #16]
}
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b006      	add	sp, #24
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	007a1200 	.word	0x007a1200
 8004fb4:	080066e0 	.word	0x080066e0
 8004fb8:	080066f0 	.word	0x080066f0
 8004fbc:	02dc6c00 	.word	0x02dc6c00

08004fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc4:	4b02      	ldr	r3, [pc, #8]	; (8004fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	20000000 	.word	0x20000000

08004fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004fd8:	f7ff fff2 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8004fdc:	0001      	movs	r1, r0
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fea:	5cd3      	ldrb	r3, [r2, r3]
 8004fec:	40d9      	lsrs	r1, r3
 8004fee:	000b      	movs	r3, r1
}    
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	080066d8 	.word	0x080066d8

08005000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	025b      	lsls	r3, r3, #9
 8005018:	4013      	ands	r3, r2
 800501a:	d100      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800501c:	e08e      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800501e:	2017      	movs	r0, #23
 8005020:	183b      	adds	r3, r7, r0
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005026:	4b67      	ldr	r3, [pc, #412]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	055b      	lsls	r3, r3, #21
 800502e:	4013      	ands	r3, r2
 8005030:	d110      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005032:	4b64      	ldr	r3, [pc, #400]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	0549      	lsls	r1, r1, #21
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
 8005040:	4b60      	ldr	r3, [pc, #384]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	055b      	lsls	r3, r3, #21
 8005048:	4013      	ands	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504e:	183b      	adds	r3, r7, r0
 8005050:	2201      	movs	r2, #1
 8005052:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005054:	4b5c      	ldr	r3, [pc, #368]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4013      	ands	r3, r2
 800505e:	d11a      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b58      	ldr	r3, [pc, #352]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	0049      	lsls	r1, r1, #1
 800506a:	430a      	orrs	r2, r1
 800506c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506e:	f7fe f943 	bl	80032f8 <HAL_GetTick>
 8005072:	0003      	movs	r3, r0
 8005074:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	e008      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005078:	f7fe f93e 	bl	80032f8 <HAL_GetTick>
 800507c:	0002      	movs	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e097      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4013      	ands	r3, r2
 8005094:	d0f0      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005096:	4b4b      	ldr	r3, [pc, #300]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	23c0      	movs	r3, #192	; 0xc0
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4013      	ands	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d034      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	23c0      	movs	r3, #192	; 0xc0
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4013      	ands	r3, r2
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d02c      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b8:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	4a43      	ldr	r2, [pc, #268]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050be:	4013      	ands	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c2:	4b40      	ldr	r3, [pc, #256]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050c8:	2180      	movs	r1, #128	; 0x80
 80050ca:	0249      	lsls	r1, r1, #9
 80050cc:	430a      	orrs	r2, r1
 80050ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050d0:	4b3c      	ldr	r3, [pc, #240]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050d6:	493e      	ldr	r1, [pc, #248]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d8:	400a      	ands	r2, r1
 80050da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050dc:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	4013      	ands	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ea:	f7fe f905 	bl	80032f8 <HAL_GetTick>
 80050ee:	0003      	movs	r3, r0
 80050f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f2:	e009      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fe f900 	bl	80032f8 <HAL_GetTick>
 80050f8:	0002      	movs	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	4a35      	ldr	r2, [pc, #212]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e058      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005108:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005112:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	4a2d      	ldr	r2, [pc, #180]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005118:	4013      	ands	r3, r2
 800511a:	0019      	movs	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005122:	430a      	orrs	r2, r1
 8005124:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005126:	2317      	movs	r3, #23
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005130:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005136:	4928      	ldr	r1, [pc, #160]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005138:	400a      	ands	r2, r1
 800513a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	4013      	ands	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005146:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	2203      	movs	r2, #3
 800514c:	4393      	bics	r3, r2
 800514e:	0019      	movs	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005156:	430a      	orrs	r2, r1
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2220      	movs	r2, #32
 8005160:	4013      	ands	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2210      	movs	r2, #16
 800516a:	4393      	bics	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005174:	430a      	orrs	r2, r1
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	029b      	lsls	r3, r3, #10
 8005180:	4013      	ands	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	4393      	bics	r3, r2
 800518c:	0019      	movs	r1, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005194:	430a      	orrs	r2, r1
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4013      	ands	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	2240      	movs	r2, #64	; 0x40
 80051aa:	4393      	bics	r3, r2
 80051ac:	0019      	movs	r1, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80051b4:	430a      	orrs	r2, r1
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b006      	add	sp, #24
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40007000 	.word	0x40007000
 80051cc:	fffffcff 	.word	0xfffffcff
 80051d0:	fffeffff 	.word	0xfffeffff
 80051d4:	00001388 	.word	0x00001388
 80051d8:	efffffff 	.word	0xefffffff

080051dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0a8      	b.n	8005340 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	2382      	movs	r3, #130	; 0x82
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	429a      	cmp	r2, r3
 8005200:	d009      	beq.n	8005216 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	61da      	str	r2, [r3, #28]
 8005208:	e005      	b.n	8005216 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	225d      	movs	r2, #93	; 0x5d
 8005220:	5c9b      	ldrb	r3, [r3, r2]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d107      	bne.n	8005238 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	225c      	movs	r2, #92	; 0x5c
 800522c:	2100      	movs	r1, #0
 800522e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	0018      	movs	r0, r3
 8005234:	f7fd fe98 	bl	8002f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	225d      	movs	r2, #93	; 0x5d
 800523c:	2102      	movs	r1, #2
 800523e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2140      	movs	r1, #64	; 0x40
 800524c:	438a      	bics	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	23e0      	movs	r3, #224	; 0xe0
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	429a      	cmp	r2, r3
 800525a:	d902      	bls.n	8005262 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e002      	b.n	8005268 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	015b      	lsls	r3, r3, #5
 8005266:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	23f0      	movs	r3, #240	; 0xf0
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	429a      	cmp	r2, r3
 8005272:	d008      	beq.n	8005286 <HAL_SPI_Init+0xaa>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	23e0      	movs	r3, #224	; 0xe0
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	429a      	cmp	r2, r3
 800527e:	d002      	beq.n	8005286 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	2382      	movs	r3, #130	; 0x82
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	401a      	ands	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6899      	ldr	r1, [r3, #8]
 8005294:	2384      	movs	r3, #132	; 0x84
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	400b      	ands	r3, r1
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2102      	movs	r1, #2
 80052a2:	400b      	ands	r3, r1
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2101      	movs	r1, #1
 80052ac:	400b      	ands	r3, r1
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6999      	ldr	r1, [r3, #24]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	400b      	ands	r3, r1
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2138      	movs	r1, #56	; 0x38
 80052c2:	400b      	ands	r3, r1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	400b      	ands	r3, r1
 80052ce:	431a      	orrs	r2, r3
 80052d0:	0011      	movs	r1, r2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	401a      	ands	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	2204      	movs	r2, #4
 80052ec:	401a      	ands	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2110      	movs	r1, #16
 80052f4:	400b      	ands	r3, r1
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fc:	2108      	movs	r1, #8
 80052fe:	400b      	ands	r3, r1
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68d9      	ldr	r1, [r3, #12]
 8005306:	23f0      	movs	r3, #240	; 0xf0
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	400b      	ands	r3, r1
 800530c:	431a      	orrs	r2, r3
 800530e:	0011      	movs	r1, r2
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	015b      	lsls	r3, r3, #5
 8005316:	401a      	ands	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4907      	ldr	r1, [pc, #28]	; (8005348 <HAL_SPI_Init+0x16c>)
 800532c:	400a      	ands	r2, r1
 800532e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	225d      	movs	r2, #93	; 0x5d
 800533a:	2101      	movs	r1, #1
 800533c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bd80      	pop	{r7, pc}
 8005348:	fffff7ff 	.word	0xfffff7ff

0800534c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	1dbb      	adds	r3, r7, #6
 800535a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800535c:	231f      	movs	r3, #31
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	225c      	movs	r2, #92	; 0x5c
 8005368:	5c9b      	ldrb	r3, [r3, r2]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_SPI_Transmit+0x26>
 800536e:	2302      	movs	r3, #2
 8005370:	e147      	b.n	8005602 <HAL_SPI_Transmit+0x2b6>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	225c      	movs	r2, #92	; 0x5c
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800537a:	f7fd ffbd 	bl	80032f8 <HAL_GetTick>
 800537e:	0003      	movs	r3, r0
 8005380:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005382:	2316      	movs	r3, #22
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	1dba      	adds	r2, r7, #6
 8005388:	8812      	ldrh	r2, [r2, #0]
 800538a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	225d      	movs	r2, #93	; 0x5d
 8005390:	5c9b      	ldrb	r3, [r3, r2]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d004      	beq.n	80053a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005398:	231f      	movs	r3, #31
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2202      	movs	r2, #2
 800539e:	701a      	strb	r2, [r3, #0]
    goto error;
 80053a0:	e128      	b.n	80055f4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_SPI_Transmit+0x64>
 80053a8:	1dbb      	adds	r3, r7, #6
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80053b0:	231f      	movs	r3, #31
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80053b8:	e11c      	b.n	80055f4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	225d      	movs	r2, #93	; 0x5d
 80053be:	2103      	movs	r1, #3
 80053c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1dba      	adds	r2, r7, #6
 80053d2:	8812      	ldrh	r2, [r2, #0]
 80053d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1dba      	adds	r2, r7, #6
 80053da:	8812      	ldrh	r2, [r2, #0]
 80053dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2244      	movs	r2, #68	; 0x44
 80053e8:	2100      	movs	r1, #0
 80053ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2246      	movs	r2, #70	; 0x46
 80053f0:	2100      	movs	r1, #0
 80053f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	429a      	cmp	r2, r3
 800540a:	d110      	bne.n	800542e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2140      	movs	r1, #64	; 0x40
 8005418:	438a      	bics	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2180      	movs	r1, #128	; 0x80
 8005428:	01c9      	lsls	r1, r1, #7
 800542a:	430a      	orrs	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	4013      	ands	r3, r2
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d007      	beq.n	800544c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2140      	movs	r1, #64	; 0x40
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	23e0      	movs	r3, #224	; 0xe0
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	429a      	cmp	r2, r3
 8005456:	d952      	bls.n	80054fe <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <HAL_SPI_Transmit+0x11e>
 8005460:	2316      	movs	r3, #22
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d143      	bne.n	80054f2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	1c9a      	adds	r2, r3, #2
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800548e:	e030      	b.n	80054f2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2202      	movs	r2, #2
 8005498:	4013      	ands	r3, r2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d112      	bne.n	80054c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054c2:	e016      	b.n	80054f2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054c4:	f7fd ff18 	bl	80032f8 <HAL_GetTick>
 80054c8:	0002      	movs	r2, r0
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d802      	bhi.n	80054da <HAL_SPI_Transmit+0x18e>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	d102      	bne.n	80054e0 <HAL_SPI_Transmit+0x194>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d108      	bne.n	80054f2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80054e0:	231f      	movs	r3, #31
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	2203      	movs	r2, #3
 80054e6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	225d      	movs	r2, #93	; 0x5d
 80054ec:	2101      	movs	r1, #1
 80054ee:	5499      	strb	r1, [r3, r2]
          goto error;
 80054f0:	e080      	b.n	80055f4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1c9      	bne.n	8005490 <HAL_SPI_Transmit+0x144>
 80054fc:	e053      	b.n	80055a6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_SPI_Transmit+0x1c4>
 8005506:	2316      	movs	r3, #22
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d145      	bne.n	800559c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005536:	e031      	b.n	800559c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2202      	movs	r2, #2
 8005540:	4013      	ands	r3, r2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d113      	bne.n	800556e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800556c:	e016      	b.n	800559c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800556e:	f7fd fec3 	bl	80032f8 <HAL_GetTick>
 8005572:	0002      	movs	r2, r0
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d802      	bhi.n	8005584 <HAL_SPI_Transmit+0x238>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	d102      	bne.n	800558a <HAL_SPI_Transmit+0x23e>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800558a:	231f      	movs	r3, #31
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2203      	movs	r2, #3
 8005590:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	225d      	movs	r2, #93	; 0x5d
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
          goto error;
 800559a:	e02b      	b.n	80055f4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1c8      	bne.n	8005538 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 fb4b 	bl	8005c48 <SPI_EndRxTxTransaction>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80055e2:	231f      	movs	r3, #31
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e003      	b.n	80055f4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	225d      	movs	r2, #93	; 0x5d
 80055f0:	2101      	movs	r1, #1
 80055f2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	225c      	movs	r2, #92	; 0x5c
 80055f8:	2100      	movs	r1, #0
 80055fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80055fc:	231f      	movs	r3, #31
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	781b      	ldrb	r3, [r3, #0]
}
 8005602:	0018      	movs	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	b008      	add	sp, #32
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	001a      	movs	r2, r3
 800561a:	1cbb      	adds	r3, r7, #2
 800561c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800561e:	2301      	movs	r3, #1
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005622:	2323      	movs	r3, #35	; 0x23
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	225c      	movs	r2, #92	; 0x5c
 800562e:	5c9b      	ldrb	r3, [r3, r2]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x2c>
 8005634:	2302      	movs	r3, #2
 8005636:	e1c4      	b.n	80059c2 <HAL_SPI_TransmitReceive+0x3b6>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	225c      	movs	r2, #92	; 0x5c
 800563c:	2101      	movs	r1, #1
 800563e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005640:	f7fd fe5a 	bl	80032f8 <HAL_GetTick>
 8005644:	0003      	movs	r3, r0
 8005646:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005648:	201b      	movs	r0, #27
 800564a:	183b      	adds	r3, r7, r0
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	215d      	movs	r1, #93	; 0x5d
 8005650:	5c52      	ldrb	r2, [r2, r1]
 8005652:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800565a:	2312      	movs	r3, #18
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	1cba      	adds	r2, r7, #2
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005664:	183b      	adds	r3, r7, r0
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d011      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x84>
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	2382      	movs	r3, #130	; 0x82
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	429a      	cmp	r2, r3
 8005674:	d107      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x7a>
 800567e:	183b      	adds	r3, r7, r0
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b04      	cmp	r3, #4
 8005684:	d004      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005686:	2323      	movs	r3, #35	; 0x23
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	2202      	movs	r2, #2
 800568c:	701a      	strb	r2, [r3, #0]
    goto error;
 800568e:	e191      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <HAL_SPI_TransmitReceive+0x98>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_SPI_TransmitReceive+0x98>
 800569c:	1cbb      	adds	r3, r7, #2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80056a4:	2323      	movs	r3, #35	; 0x23
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	2201      	movs	r2, #1
 80056aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80056ac:	e182      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	225d      	movs	r2, #93	; 0x5d
 80056b2:	5c9b      	ldrb	r3, [r3, r2]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d003      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	225d      	movs	r2, #93	; 0x5d
 80056be:	2105      	movs	r1, #5
 80056c0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1cba      	adds	r2, r7, #2
 80056d2:	2146      	movs	r1, #70	; 0x46
 80056d4:	8812      	ldrh	r2, [r2, #0]
 80056d6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1cba      	adds	r2, r7, #2
 80056dc:	2144      	movs	r1, #68	; 0x44
 80056de:	8812      	ldrh	r2, [r2, #0]
 80056e0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1cba      	adds	r2, r7, #2
 80056ec:	8812      	ldrh	r2, [r2, #0]
 80056ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1cba      	adds	r2, r7, #2
 80056f4:	8812      	ldrh	r2, [r2, #0]
 80056f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	23e0      	movs	r3, #224	; 0xe0
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	429a      	cmp	r2, r3
 800570e:	d908      	bls.n	8005722 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	49ac      	ldr	r1, [pc, #688]	; (80059cc <HAL_SPI_TransmitReceive+0x3c0>)
 800571c:	400a      	ands	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	e008      	b.n	8005734 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	0149      	lsls	r1, r1, #5
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2240      	movs	r2, #64	; 0x40
 800573c:	4013      	ands	r3, r2
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d007      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2140      	movs	r1, #64	; 0x40
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	23e0      	movs	r3, #224	; 0xe0
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	429a      	cmp	r2, r3
 800575c:	d800      	bhi.n	8005760 <HAL_SPI_TransmitReceive+0x154>
 800575e:	e083      	b.n	8005868 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x168>
 8005768:	2312      	movs	r3, #18
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d000      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x168>
 8005772:	e06d      	b.n	8005850 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	881a      	ldrh	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	1c9a      	adds	r2, r3, #2
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005798:	e05a      	b.n	8005850 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2202      	movs	r2, #2
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d11b      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x1d4>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <HAL_SPI_TransmitReceive+0x1d4>
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d113      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	1c9a      	adds	r2, r3, #2
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d11c      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x21c>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2246      	movs	r2, #70	; 0x46
 80057f2:	5a9b      	ldrh	r3, [r3, r2]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	b292      	uxth	r2, r2
 8005806:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2246      	movs	r2, #70	; 0x46
 8005816:	5a9b      	ldrh	r3, [r3, r2]
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b299      	uxth	r1, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2246      	movs	r2, #70	; 0x46
 8005822:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005824:	2301      	movs	r3, #1
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005828:	f7fd fd66 	bl	80032f8 <HAL_GetTick>
 800582c:	0002      	movs	r2, r0
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005834:	429a      	cmp	r2, r3
 8005836:	d80b      	bhi.n	8005850 <HAL_SPI_TransmitReceive+0x244>
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	3301      	adds	r3, #1
 800583c:	d008      	beq.n	8005850 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800583e:	2323      	movs	r3, #35	; 0x23
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	2203      	movs	r2, #3
 8005844:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	225d      	movs	r2, #93	; 0x5d
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]
        goto error;
 800584e:	e0b1      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d19f      	bne.n	800579a <HAL_SPI_TransmitReceive+0x18e>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2246      	movs	r2, #70	; 0x46
 800585e:	5a9b      	ldrh	r3, [r3, r2]
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d199      	bne.n	800579a <HAL_SPI_TransmitReceive+0x18e>
 8005866:	e089      	b.n	800597c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_SPI_TransmitReceive+0x270>
 8005870:	2312      	movs	r3, #18
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d000      	beq.n	800587c <HAL_SPI_TransmitReceive+0x270>
 800587a:	e074      	b.n	8005966 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a2:	e060      	b.n	8005966 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2202      	movs	r2, #2
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d11c      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x2e0>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d017      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x2e0>
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d114      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2201      	movs	r2, #1
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d11e      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x32c>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2246      	movs	r2, #70	; 0x46
 80058fe:	5a9b      	ldrh	r3, [r3, r2]
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d018      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	001a      	movs	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	7812      	ldrb	r2, [r2, #0]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2246      	movs	r2, #70	; 0x46
 8005926:	5a9b      	ldrh	r3, [r3, r2]
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b299      	uxth	r1, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2246      	movs	r2, #70	; 0x46
 8005932:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005934:	2301      	movs	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005938:	f7fd fcde 	bl	80032f8 <HAL_GetTick>
 800593c:	0002      	movs	r2, r0
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005944:	429a      	cmp	r2, r3
 8005946:	d802      	bhi.n	800594e <HAL_SPI_TransmitReceive+0x342>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	3301      	adds	r3, #1
 800594c:	d102      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x348>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d108      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005954:	2323      	movs	r3, #35	; 0x23
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	2203      	movs	r2, #3
 800595a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	225d      	movs	r2, #93	; 0x5d
 8005960:	2101      	movs	r1, #1
 8005962:	5499      	strb	r1, [r3, r2]
        goto error;
 8005964:	e026      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d199      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x298>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2246      	movs	r2, #70	; 0x46
 8005974:	5a9b      	ldrh	r3, [r3, r2]
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d193      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0018      	movs	r0, r3
 8005984:	f000 f960 	bl	8005c48 <SPI_EndRxTxTransaction>
 8005988:	1e03      	subs	r3, r0, #0
 800598a:	d006      	beq.n	800599a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800598c:	2323      	movs	r3, #35	; 0x23
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80059a2:	2323      	movs	r3, #35	; 0x23
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	2201      	movs	r2, #1
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e003      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	225d      	movs	r2, #93	; 0x5d
 80059b0:	2101      	movs	r1, #1
 80059b2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	225c      	movs	r2, #92	; 0x5c
 80059b8:	2100      	movs	r1, #0
 80059ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80059bc:	2323      	movs	r3, #35	; 0x23
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	781b      	ldrb	r3, [r3, #0]
}
 80059c2:	0018      	movs	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b00a      	add	sp, #40	; 0x28
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	ffffefff 	.word	0xffffefff

080059d0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	225d      	movs	r2, #93	; 0x5d
 80059dc:	5c9b      	ldrb	r3, [r3, r2]
 80059de:	b2db      	uxtb	r3, r3
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b002      	add	sp, #8
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	1dfb      	adds	r3, r7, #7
 80059f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059f8:	f7fd fc7e 	bl	80032f8 <HAL_GetTick>
 80059fc:	0002      	movs	r2, r0
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	18d3      	adds	r3, r2, r3
 8005a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a08:	f7fd fc76 	bl	80032f8 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a10:	4b3a      	ldr	r3, [pc, #232]	; (8005afc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	015b      	lsls	r3, r3, #5
 8005a16:	0d1b      	lsrs	r3, r3, #20
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	4353      	muls	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a1e:	e058      	b.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	d055      	beq.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a26:	f7fd fc67 	bl	80032f8 <HAL_GetTick>
 8005a2a:	0002      	movs	r2, r0
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d902      	bls.n	8005a3c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d142      	bne.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	21e0      	movs	r1, #224	; 0xe0
 8005a48:	438a      	bics	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	2382      	movs	r3, #130	; 0x82
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d113      	bne.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d005      	beq.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d107      	bne.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2140      	movs	r1, #64	; 0x40
 8005a7c:	438a      	bics	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	019b      	lsls	r3, r3, #6
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d110      	bne.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	491a      	ldr	r1, [pc, #104]	; (8005b00 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	0189      	lsls	r1, r1, #6
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	225d      	movs	r2, #93	; 0x5d
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	225c      	movs	r2, #92	; 0x5c
 8005aba:	2100      	movs	r1, #0
 8005abc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e017      	b.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	425a      	negs	r2, r3
 8005ae2:	4153      	adcs	r3, r2
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	001a      	movs	r2, r3
 8005ae8:	1dfb      	adds	r3, r7, #7
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d197      	bne.n	8005a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b008      	add	sp, #32
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	20000000 	.word	0x20000000
 8005b00:	ffffdfff 	.word	0xffffdfff

08005b04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b12:	2317      	movs	r3, #23
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b1a:	f7fd fbed 	bl	80032f8 <HAL_GetTick>
 8005b1e:	0002      	movs	r2, r0
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b2a:	f7fd fbe5 	bl	80032f8 <HAL_GetTick>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b3a:	4b41      	ldr	r3, [pc, #260]	; (8005c40 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	0013      	movs	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	189b      	adds	r3, r3, r2
 8005b44:	00da      	lsls	r2, r3, #3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	0d1b      	lsrs	r3, r3, #20
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	4353      	muls	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b50:	e068      	b.n	8005c24 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	23c0      	movs	r3, #192	; 0xc0
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d10a      	bne.n	8005b72 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	2117      	movs	r1, #23
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b6e:	187b      	adds	r3, r7, r1
 8005b70:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	d055      	beq.n	8005c24 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b78:	f7fd fbbe 	bl	80032f8 <HAL_GetTick>
 8005b7c:	0002      	movs	r2, r0
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d902      	bls.n	8005b8e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d142      	bne.n	8005c14 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	21e0      	movs	r1, #224	; 0xe0
 8005b9a:	438a      	bics	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	2382      	movs	r3, #130	; 0x82
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d113      	bne.n	8005bd2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d005      	beq.n	8005bc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d107      	bne.n	8005bd2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2140      	movs	r1, #64	; 0x40
 8005bce:	438a      	bics	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	019b      	lsls	r3, r3, #6
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d110      	bne.n	8005c00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4916      	ldr	r1, [pc, #88]	; (8005c44 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005bea:	400a      	ands	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2180      	movs	r1, #128	; 0x80
 8005bfa:	0189      	lsls	r1, r1, #6
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	225d      	movs	r2, #93	; 0x5d
 8005c04:	2101      	movs	r1, #1
 8005c06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	225c      	movs	r2, #92	; 0x5c
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e010      	b.n	8005c36 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d18e      	bne.n	8005b52 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b00a      	add	sp, #40	; 0x28
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	20000000 	.word	0x20000000
 8005c44:	ffffdfff 	.word	0xffffdfff

08005c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	23c0      	movs	r3, #192	; 0xc0
 8005c58:	0159      	lsls	r1, r3, #5
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	0013      	movs	r3, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	f7ff ff4e 	bl	8005b04 <SPI_WaitFifoStateUntilTimeout>
 8005c68:	1e03      	subs	r3, r0, #0
 8005c6a:	d007      	beq.n	8005c7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c70:	2220      	movs	r2, #32
 8005c72:	431a      	orrs	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e027      	b.n	8005ccc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	0013      	movs	r3, r2
 8005c86:	2200      	movs	r2, #0
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	f7ff fead 	bl	80059e8 <SPI_WaitFlagStateUntilTimeout>
 8005c8e:	1e03      	subs	r3, r0, #0
 8005c90:	d007      	beq.n	8005ca2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c96:	2220      	movs	r2, #32
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e014      	b.n	8005ccc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	23c0      	movs	r3, #192	; 0xc0
 8005ca6:	00d9      	lsls	r1, r3, #3
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	0013      	movs	r3, r2
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f7ff ff27 	bl	8005b04 <SPI_WaitFifoStateUntilTimeout>
 8005cb6:	1e03      	subs	r3, r0, #0
 8005cb8:	d007      	beq.n	8005cca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e000      	b.n	8005ccc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b004      	add	sp, #16
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e044      	b.n	8005d70 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d107      	bne.n	8005cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2278      	movs	r2, #120	; 0x78
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7fd f9d7 	bl	80030ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	; 0x24
 8005d02:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2101      	movs	r1, #1
 8005d10:	438a      	bics	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	0018      	movs	r0, r3
 8005d18:	f000 f830 	bl	8005d7c <UART_SetConfig>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e024      	b.n	8005d70 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f000 f963 	bl	8005ffc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	490d      	ldr	r1, [pc, #52]	; (8005d78 <HAL_UART_Init+0xa4>)
 8005d42:	400a      	ands	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	212a      	movs	r1, #42	; 0x2a
 8005d52:	438a      	bics	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2101      	movs	r1, #1
 8005d62:	430a      	orrs	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 f9fb 	bl	8006164 <UART_CheckIdleState>
 8005d6e:	0003      	movs	r3, r0
}
 8005d70:	0018      	movs	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b002      	add	sp, #8
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	ffffb7ff 	.word	0xffffb7ff

08005d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d84:	231e      	movs	r3, #30
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a8d      	ldr	r2, [pc, #564]	; (8005fe0 <UART_SetConfig+0x264>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	0019      	movs	r1, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a88      	ldr	r2, [pc, #544]	; (8005fe4 <UART_SetConfig+0x268>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4a7f      	ldr	r2, [pc, #508]	; (8005fe8 <UART_SetConfig+0x26c>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	0019      	movs	r1, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a7b      	ldr	r2, [pc, #492]	; (8005fec <UART_SetConfig+0x270>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d127      	bne.n	8005e52 <UART_SetConfig+0xd6>
 8005e02:	4b7b      	ldr	r3, [pc, #492]	; (8005ff0 <UART_SetConfig+0x274>)
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	2203      	movs	r2, #3
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d00d      	beq.n	8005e2a <UART_SetConfig+0xae>
 8005e0e:	d81b      	bhi.n	8005e48 <UART_SetConfig+0xcc>
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d014      	beq.n	8005e3e <UART_SetConfig+0xc2>
 8005e14:	d818      	bhi.n	8005e48 <UART_SetConfig+0xcc>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <UART_SetConfig+0xa4>
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d00a      	beq.n	8005e34 <UART_SetConfig+0xb8>
 8005e1e:	e013      	b.n	8005e48 <UART_SetConfig+0xcc>
 8005e20:	231f      	movs	r3, #31
 8005e22:	18fb      	adds	r3, r7, r3
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e021      	b.n	8005e6e <UART_SetConfig+0xf2>
 8005e2a:	231f      	movs	r3, #31
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	2202      	movs	r2, #2
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e01c      	b.n	8005e6e <UART_SetConfig+0xf2>
 8005e34:	231f      	movs	r3, #31
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	2204      	movs	r2, #4
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e017      	b.n	8005e6e <UART_SetConfig+0xf2>
 8005e3e:	231f      	movs	r3, #31
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	2208      	movs	r2, #8
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e012      	b.n	8005e6e <UART_SetConfig+0xf2>
 8005e48:	231f      	movs	r3, #31
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e00d      	b.n	8005e6e <UART_SetConfig+0xf2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a67      	ldr	r2, [pc, #412]	; (8005ff4 <UART_SetConfig+0x278>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d104      	bne.n	8005e66 <UART_SetConfig+0xea>
 8005e5c:	231f      	movs	r3, #31
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e003      	b.n	8005e6e <UART_SetConfig+0xf2>
 8005e66:	231f      	movs	r3, #31
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d15c      	bne.n	8005f34 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005e7a:	231f      	movs	r3, #31
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d015      	beq.n	8005eb0 <UART_SetConfig+0x134>
 8005e84:	dc18      	bgt.n	8005eb8 <UART_SetConfig+0x13c>
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d00d      	beq.n	8005ea6 <UART_SetConfig+0x12a>
 8005e8a:	dc15      	bgt.n	8005eb8 <UART_SetConfig+0x13c>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <UART_SetConfig+0x11a>
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d005      	beq.n	8005ea0 <UART_SetConfig+0x124>
 8005e94:	e010      	b.n	8005eb8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e96:	f7ff f89d 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	61bb      	str	r3, [r7, #24]
        break;
 8005e9e:	e012      	b.n	8005ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea0:	4b55      	ldr	r3, [pc, #340]	; (8005ff8 <UART_SetConfig+0x27c>)
 8005ea2:	61bb      	str	r3, [r7, #24]
        break;
 8005ea4:	e00f      	b.n	8005ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea6:	f7ff f819 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8005eaa:	0003      	movs	r3, r0
 8005eac:	61bb      	str	r3, [r7, #24]
        break;
 8005eae:	e00a      	b.n	8005ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	61bb      	str	r3, [r7, #24]
        break;
 8005eb6:	e006      	b.n	8005ec6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ebc:	231e      	movs	r3, #30
 8005ebe:	18fb      	adds	r3, r7, r3
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
        break;
 8005ec4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d100      	bne.n	8005ece <UART_SetConfig+0x152>
 8005ecc:	e07a      	b.n	8005fc4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	005a      	lsls	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	18d2      	adds	r2, r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	0019      	movs	r1, r3
 8005ee0:	0010      	movs	r0, r2
 8005ee2:	f7fa f911 	bl	8000108 <__udivsi3>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b0f      	cmp	r3, #15
 8005eee:	d91c      	bls.n	8005f2a <UART_SetConfig+0x1ae>
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	025b      	lsls	r3, r3, #9
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d217      	bcs.n	8005f2a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	200e      	movs	r0, #14
 8005f00:	183b      	adds	r3, r7, r0
 8005f02:	210f      	movs	r1, #15
 8005f04:	438a      	bics	r2, r1
 8005f06:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2207      	movs	r2, #7
 8005f10:	4013      	ands	r3, r2
 8005f12:	b299      	uxth	r1, r3
 8005f14:	183b      	adds	r3, r7, r0
 8005f16:	183a      	adds	r2, r7, r0
 8005f18:	8812      	ldrh	r2, [r2, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	183a      	adds	r2, r7, r0
 8005f24:	8812      	ldrh	r2, [r2, #0]
 8005f26:	60da      	str	r2, [r3, #12]
 8005f28:	e04c      	b.n	8005fc4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2a:	231e      	movs	r3, #30
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	2201      	movs	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e047      	b.n	8005fc4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f34:	231f      	movs	r3, #31
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d015      	beq.n	8005f6a <UART_SetConfig+0x1ee>
 8005f3e:	dc18      	bgt.n	8005f72 <UART_SetConfig+0x1f6>
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d00d      	beq.n	8005f60 <UART_SetConfig+0x1e4>
 8005f44:	dc15      	bgt.n	8005f72 <UART_SetConfig+0x1f6>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <UART_SetConfig+0x1d4>
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d005      	beq.n	8005f5a <UART_SetConfig+0x1de>
 8005f4e:	e010      	b.n	8005f72 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7ff f840 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8005f54:	0003      	movs	r3, r0
 8005f56:	61bb      	str	r3, [r7, #24]
        break;
 8005f58:	e012      	b.n	8005f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f5a:	4b27      	ldr	r3, [pc, #156]	; (8005ff8 <UART_SetConfig+0x27c>)
 8005f5c:	61bb      	str	r3, [r7, #24]
        break;
 8005f5e:	e00f      	b.n	8005f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f60:	f7fe ffbc 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8005f64:	0003      	movs	r3, r0
 8005f66:	61bb      	str	r3, [r7, #24]
        break;
 8005f68:	e00a      	b.n	8005f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	61bb      	str	r3, [r7, #24]
        break;
 8005f70:	e006      	b.n	8005f80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f76:	231e      	movs	r3, #30
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]
        break;
 8005f7e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01e      	beq.n	8005fc4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	085a      	lsrs	r2, r3, #1
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	18d2      	adds	r2, r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	0019      	movs	r1, r3
 8005f96:	0010      	movs	r0, r2
 8005f98:	f7fa f8b6 	bl	8000108 <__udivsi3>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	d90a      	bls.n	8005fbc <UART_SetConfig+0x240>
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	025b      	lsls	r3, r3, #9
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d205      	bcs.n	8005fbc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	e003      	b.n	8005fc4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005fbc:	231e      	movs	r3, #30
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005fd0:	231e      	movs	r3, #30
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	781b      	ldrb	r3, [r3, #0]
}
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	b008      	add	sp, #32
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	efff69f3 	.word	0xefff69f3
 8005fe4:	ffffcfff 	.word	0xffffcfff
 8005fe8:	fffff4ff 	.word	0xfffff4ff
 8005fec:	40013800 	.word	0x40013800
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	40004400 	.word	0x40004400
 8005ff8:	007a1200 	.word	0x007a1200

08005ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2201      	movs	r2, #1
 800600a:	4013      	ands	r3, r2
 800600c:	d00b      	beq.n	8006026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4a4a      	ldr	r2, [pc, #296]	; (8006140 <UART_AdvFeatureConfig+0x144>)
 8006016:	4013      	ands	r3, r2
 8006018:	0019      	movs	r1, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	2202      	movs	r2, #2
 800602c:	4013      	ands	r3, r2
 800602e:	d00b      	beq.n	8006048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4a43      	ldr	r2, [pc, #268]	; (8006144 <UART_AdvFeatureConfig+0x148>)
 8006038:	4013      	ands	r3, r2
 800603a:	0019      	movs	r1, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	2204      	movs	r2, #4
 800604e:	4013      	ands	r3, r2
 8006050:	d00b      	beq.n	800606a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4a3b      	ldr	r2, [pc, #236]	; (8006148 <UART_AdvFeatureConfig+0x14c>)
 800605a:	4013      	ands	r3, r2
 800605c:	0019      	movs	r1, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	2208      	movs	r2, #8
 8006070:	4013      	ands	r3, r2
 8006072:	d00b      	beq.n	800608c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4a34      	ldr	r2, [pc, #208]	; (800614c <UART_AdvFeatureConfig+0x150>)
 800607c:	4013      	ands	r3, r2
 800607e:	0019      	movs	r1, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2210      	movs	r2, #16
 8006092:	4013      	ands	r3, r2
 8006094:	d00b      	beq.n	80060ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	4a2c      	ldr	r2, [pc, #176]	; (8006150 <UART_AdvFeatureConfig+0x154>)
 800609e:	4013      	ands	r3, r2
 80060a0:	0019      	movs	r1, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	2220      	movs	r2, #32
 80060b4:	4013      	ands	r3, r2
 80060b6:	d00b      	beq.n	80060d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	4a25      	ldr	r2, [pc, #148]	; (8006154 <UART_AdvFeatureConfig+0x158>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	0019      	movs	r1, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	2240      	movs	r2, #64	; 0x40
 80060d6:	4013      	ands	r3, r2
 80060d8:	d01d      	beq.n	8006116 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <UART_AdvFeatureConfig+0x15c>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	0019      	movs	r1, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	035b      	lsls	r3, r3, #13
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d10b      	bne.n	8006116 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a15      	ldr	r2, [pc, #84]	; (800615c <UART_AdvFeatureConfig+0x160>)
 8006106:	4013      	ands	r3, r2
 8006108:	0019      	movs	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	4013      	ands	r3, r2
 800611e:	d00b      	beq.n	8006138 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	4a0e      	ldr	r2, [pc, #56]	; (8006160 <UART_AdvFeatureConfig+0x164>)
 8006128:	4013      	ands	r3, r2
 800612a:	0019      	movs	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
  }
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b002      	add	sp, #8
 800613e:	bd80      	pop	{r7, pc}
 8006140:	fffdffff 	.word	0xfffdffff
 8006144:	fffeffff 	.word	0xfffeffff
 8006148:	fffbffff 	.word	0xfffbffff
 800614c:	ffff7fff 	.word	0xffff7fff
 8006150:	ffffefff 	.word	0xffffefff
 8006154:	ffffdfff 	.word	0xffffdfff
 8006158:	ffefffff 	.word	0xffefffff
 800615c:	ff9fffff 	.word	0xff9fffff
 8006160:	fff7ffff 	.word	0xfff7ffff

08006164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b092      	sub	sp, #72	; 0x48
 8006168:	af02      	add	r7, sp, #8
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2284      	movs	r2, #132	; 0x84
 8006170:	2100      	movs	r1, #0
 8006172:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006174:	f7fd f8c0 	bl	80032f8 <HAL_GetTick>
 8006178:	0003      	movs	r3, r0
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2208      	movs	r2, #8
 8006184:	4013      	ands	r3, r2
 8006186:	2b08      	cmp	r3, #8
 8006188:	d12c      	bne.n	80061e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	2280      	movs	r2, #128	; 0x80
 800618e:	0391      	lsls	r1, r2, #14
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4a46      	ldr	r2, [pc, #280]	; (80062ac <UART_CheckIdleState+0x148>)
 8006194:	9200      	str	r2, [sp, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	f000 f88c 	bl	80062b4 <UART_WaitOnFlagUntilTimeout>
 800619c:	1e03      	subs	r3, r0, #0
 800619e:	d021      	beq.n	80061e4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a0:	f3ef 8310 	mrs	r3, PRIMASK
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061aa:	2301      	movs	r3, #1
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	f383 8810 	msr	PRIMASK, r3
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2180      	movs	r1, #128	; 0x80
 80061c2:	438a      	bics	r2, r1
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	f383 8810 	msr	PRIMASK, r3
}
 80061d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2278      	movs	r2, #120	; 0x78
 80061dc:	2100      	movs	r1, #0
 80061de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e05f      	b.n	80062a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2204      	movs	r2, #4
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d146      	bne.n	8006280 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	03d1      	lsls	r1, r2, #15
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4a2c      	ldr	r2, [pc, #176]	; (80062ac <UART_CheckIdleState+0x148>)
 80061fc:	9200      	str	r2, [sp, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	f000 f858 	bl	80062b4 <UART_WaitOnFlagUntilTimeout>
 8006204:	1e03      	subs	r3, r0, #0
 8006206:	d03b      	beq.n	8006280 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006208:	f3ef 8310 	mrs	r3, PRIMASK
 800620c:	60fb      	str	r3, [r7, #12]
  return(result);
 800620e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
 8006212:	2301      	movs	r3, #1
 8006214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f383 8810 	msr	PRIMASK, r3
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4921      	ldr	r1, [pc, #132]	; (80062b0 <UART_CheckIdleState+0x14c>)
 800622a:	400a      	ands	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f383 8810 	msr	PRIMASK, r3
}
 8006238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800623a:	f3ef 8310 	mrs	r3, PRIMASK
 800623e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006240:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	633b      	str	r3, [r7, #48]	; 0x30
 8006244:	2301      	movs	r3, #1
 8006246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f383 8810 	msr	PRIMASK, r3
}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2101      	movs	r1, #1
 800625c:	438a      	bics	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f383 8810 	msr	PRIMASK, r3
}
 800626a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2280      	movs	r2, #128	; 0x80
 8006270:	2120      	movs	r1, #32
 8006272:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2278      	movs	r2, #120	; 0x78
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e011      	b.n	80062a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2280      	movs	r2, #128	; 0x80
 800628a:	2120      	movs	r1, #32
 800628c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2278      	movs	r2, #120	; 0x78
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	0018      	movs	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b010      	add	sp, #64	; 0x40
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	01ffffff 	.word	0x01ffffff
 80062b0:	fffffedf 	.word	0xfffffedf

080062b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	1dfb      	adds	r3, r7, #7
 80062c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c4:	e04b      	b.n	800635e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3301      	adds	r3, #1
 80062ca:	d048      	beq.n	800635e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062cc:	f7fd f814 	bl	80032f8 <HAL_GetTick>
 80062d0:	0002      	movs	r2, r0
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d302      	bcc.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e04b      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2204      	movs	r2, #4
 80062ee:	4013      	ands	r3, r2
 80062f0:	d035      	beq.n	800635e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	2208      	movs	r2, #8
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d111      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2208      	movs	r2, #8
 8006306:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	0018      	movs	r0, r3
 800630c:	f000 f83c 	bl	8006388 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2284      	movs	r2, #132	; 0x84
 8006314:	2108      	movs	r1, #8
 8006316:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2278      	movs	r2, #120	; 0x78
 800631c:	2100      	movs	r1, #0
 800631e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e02c      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69da      	ldr	r2, [r3, #28]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	401a      	ands	r2, r3
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	429a      	cmp	r2, r3
 8006336:	d112      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2280      	movs	r2, #128	; 0x80
 800633e:	0112      	lsls	r2, r2, #4
 8006340:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	0018      	movs	r0, r3
 8006346:	f000 f81f 	bl	8006388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2284      	movs	r2, #132	; 0x84
 800634e:	2120      	movs	r1, #32
 8006350:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2278      	movs	r2, #120	; 0x78
 8006356:	2100      	movs	r1, #0
 8006358:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e00f      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	425a      	negs	r2, r3
 800636e:	4153      	adcs	r3, r2
 8006370:	b2db      	uxtb	r3, r3
 8006372:	001a      	movs	r2, r3
 8006374:	1dfb      	adds	r3, r7, #7
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d0a4      	beq.n	80062c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	0018      	movs	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	b004      	add	sp, #16
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08e      	sub	sp, #56	; 0x38
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006390:	f3ef 8310 	mrs	r3, PRIMASK
 8006394:	617b      	str	r3, [r7, #20]
  return(result);
 8006396:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
 800639a:	2301      	movs	r3, #1
 800639c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f383 8810 	msr	PRIMASK, r3
}
 80063a4:	46c0      	nop			; (mov r8, r8)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4926      	ldr	r1, [pc, #152]	; (800644c <UART_EndRxTransfer+0xc4>)
 80063b2:	400a      	ands	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f383 8810 	msr	PRIMASK, r3
}
 80063c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c2:	f3ef 8310 	mrs	r3, PRIMASK
 80063c6:	623b      	str	r3, [r7, #32]
  return(result);
 80063c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
 80063cc:	2301      	movs	r3, #1
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	f383 8810 	msr	PRIMASK, r3
}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2101      	movs	r1, #1
 80063e4:	438a      	bics	r2, r1
 80063e6:	609a      	str	r2, [r3, #8]
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	f383 8810 	msr	PRIMASK, r3
}
 80063f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d118      	bne.n	800642e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006400:	60bb      	str	r3, [r7, #8]
  return(result);
 8006402:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006406:	2301      	movs	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f383 8810 	msr	PRIMASK, r3
}
 8006410:	46c0      	nop			; (mov r8, r8)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2110      	movs	r1, #16
 800641e:	438a      	bics	r2, r1
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f383 8810 	msr	PRIMASK, r3
}
 800642c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2280      	movs	r2, #128	; 0x80
 8006432:	2120      	movs	r1, #32
 8006434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	46bd      	mov	sp, r7
 8006446:	b00e      	add	sp, #56	; 0x38
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	fffffedf 	.word	0xfffffedf

08006450 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006458:	4b09      	ldr	r3, [pc, #36]	; (8006480 <USB_DisableGlobalInt+0x30>)
 800645a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2240      	movs	r2, #64	; 0x40
 8006460:	5a9b      	ldrh	r3, [r3, r2]
 8006462:	b29b      	uxth	r3, r3
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	b292      	uxth	r2, r2
 8006468:	43d2      	mvns	r2, r2
 800646a:	b292      	uxth	r2, r2
 800646c:	4013      	ands	r3, r2
 800646e:	b299      	uxth	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2240      	movs	r2, #64	; 0x40
 8006474:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	b004      	add	sp, #16
 800647e:	bd80      	pop	{r7, pc}
 8006480:	0000bf80 	.word	0x0000bf80

08006484 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006484:	b084      	sub	sp, #16
 8006486:	b590      	push	{r4, r7, lr}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	2004      	movs	r0, #4
 8006490:	2410      	movs	r4, #16
 8006492:	1900      	adds	r0, r0, r4
 8006494:	2408      	movs	r4, #8
 8006496:	46a4      	mov	ip, r4
 8006498:	44bc      	add	ip, r7
 800649a:	4460      	add	r0, ip
 800649c:	6001      	str	r1, [r0, #0]
 800649e:	6042      	str	r2, [r0, #4]
 80064a0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2240      	movs	r2, #64	; 0x40
 80064a6:	2101      	movs	r1, #1
 80064a8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2240      	movs	r2, #64	; 0x40
 80064ae:	2100      	movs	r1, #0
 80064b0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2244      	movs	r2, #68	; 0x44
 80064b6:	2100      	movs	r1, #0
 80064b8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2250      	movs	r2, #80	; 0x50
 80064be:	2100      	movs	r1, #0
 80064c0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	0018      	movs	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b003      	add	sp, #12
 80064ca:	bc90      	pop	{r4, r7}
 80064cc:	bc08      	pop	{r3}
 80064ce:	b004      	add	sp, #16
 80064d0:	4718      	bx	r3
	...

080064d4 <__libc_init_array>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	2600      	movs	r6, #0
 80064d8:	4d0c      	ldr	r5, [pc, #48]	; (800650c <__libc_init_array+0x38>)
 80064da:	4c0d      	ldr	r4, [pc, #52]	; (8006510 <__libc_init_array+0x3c>)
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	42a6      	cmp	r6, r4
 80064e2:	d109      	bne.n	80064f8 <__libc_init_array+0x24>
 80064e4:	2600      	movs	r6, #0
 80064e6:	f000 f821 	bl	800652c <_init>
 80064ea:	4d0a      	ldr	r5, [pc, #40]	; (8006514 <__libc_init_array+0x40>)
 80064ec:	4c0a      	ldr	r4, [pc, #40]	; (8006518 <__libc_init_array+0x44>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	42a6      	cmp	r6, r4
 80064f4:	d105      	bne.n	8006502 <__libc_init_array+0x2e>
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	00b3      	lsls	r3, r6, #2
 80064fa:	58eb      	ldr	r3, [r5, r3]
 80064fc:	4798      	blx	r3
 80064fe:	3601      	adds	r6, #1
 8006500:	e7ee      	b.n	80064e0 <__libc_init_array+0xc>
 8006502:	00b3      	lsls	r3, r6, #2
 8006504:	58eb      	ldr	r3, [r5, r3]
 8006506:	4798      	blx	r3
 8006508:	3601      	adds	r6, #1
 800650a:	e7f2      	b.n	80064f2 <__libc_init_array+0x1e>
 800650c:	08006700 	.word	0x08006700
 8006510:	08006700 	.word	0x08006700
 8006514:	08006700 	.word	0x08006700
 8006518:	08006704 	.word	0x08006704

0800651c <memset>:
 800651c:	0003      	movs	r3, r0
 800651e:	1882      	adds	r2, r0, r2
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	7019      	strb	r1, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <_init>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr

08006538 <_fini>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr
