
STM32Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb0  08002cb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cb0  08002cb0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cb0  08002cb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000000c  08002cc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08002cc4  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011165  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d5  00000000  00000000  00031199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00033570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00034328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002330  00000000  00000000  00034ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cf8  00000000  00000000  00037328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090404  00000000  00000000  00049020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9424  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e8  00000000  00000000  000d9474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c60 	.word	0x08002c60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c60 	.word	0x08002c60

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <indicator_setPortPin>:
//	indicator.Port8bits = Port8bits;
//	indicator.pin = pin;
//}

void indicator_setPortPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cbb      	adds	r3, r7, #2
 800022c:	801a      	strh	r2, [r3, #0]
	indicator.GPIOx = GPIOx;
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <indicator_setPortPin+0x24>)
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	609a      	str	r2, [r3, #8]
	indicator.GPIO_Pin = GPIO_Pin;
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <indicator_setPortPin+0x24>)
 8000236:	1cba      	adds	r2, r7, #2
 8000238:	8812      	ldrh	r2, [r2, #0]
 800023a:	819a      	strh	r2, [r3, #12]
}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000028 	.word	0x20000028

08000248 <indicator_setKSysTickTime_ms>:
{
	indicator.KOff_MAX = KSysTickTimeOff_ms;
}
#else
void indicator_setKSysTickTime_ms(uint16_t KSysTickTime_ms)// div by SYSTICK_MS
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	0002      	movs	r2, r0
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	801a      	strh	r2, [r3, #0]
	indicator.KOn_MAX = KSysTickTime_ms;
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <indicator_setKSysTickTime_ms+0x1c>)
 8000256:	1dba      	adds	r2, r7, #6
 8000258:	8812      	ldrh	r2, [r2, #0]
 800025a:	809a      	strh	r2, [r3, #4]
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000028 	.word	0x20000028

08000268 <indicator_On>:
#endif

void indicator_On(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	indicator.sm0 = 1;
 800026c:	4b02      	ldr	r3, [pc, #8]	; (8000278 <indicator_On+0x10>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000028 	.word	0x20000028

0800027c <indicator_Off>:
void indicator_Off(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	//PinTo0(*indicator.Port8bits, indicator.pin);
	PinTo0(indicator.GPIOx, indicator.GPIO_Pin);
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <indicator_Off+0x24>)
 8000282:	6898      	ldr	r0, [r3, #8]
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <indicator_Off+0x24>)
 8000286:	899b      	ldrh	r3, [r3, #12]
 8000288:	b29b      	uxth	r3, r3
 800028a:	2200      	movs	r2, #0
 800028c:	0019      	movs	r1, r3
 800028e:	f000 ff93 	bl	80011b8 <HAL_GPIO_WritePin>
	indicator.sm0 = 0;
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <indicator_Off+0x24>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000028 	.word	0x20000028

080002a4 <indicator_job>:
void indicator_cycle_start(void)
{
	indicator.sm0 = 3;
}
void indicator_job(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	//1 ON, run and stop automatically
	if (indicator.sm0 == 1)
 80002a8:	4b3d      	ldr	r3, [pc, #244]	; (80003a0 <indicator_job+0xfc>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b25b      	sxtb	r3, r3
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d115      	bne.n	80002de <indicator_job+0x3a>
	{
		//PinTo1(*indicator.Port8bits, indicator.pin);
		PinTo1(indicator.GPIOx, indicator.GPIO_Pin);
 80002b2:	4b3b      	ldr	r3, [pc, #236]	; (80003a0 <indicator_job+0xfc>)
 80002b4:	6898      	ldr	r0, [r3, #8]
 80002b6:	4b3a      	ldr	r3, [pc, #232]	; (80003a0 <indicator_job+0xfc>)
 80002b8:	899b      	ldrh	r3, [r3, #12]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	2201      	movs	r2, #1
 80002be:	0019      	movs	r1, r3
 80002c0:	f000 ff7a 	bl	80011b8 <HAL_GPIO_WritePin>
		indicator.counter0 = 0;
 80002c4:	4b36      	ldr	r3, [pc, #216]	; (80003a0 <indicator_job+0xfc>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	805a      	strh	r2, [r3, #2]
		indicator.sm0++;
 80002ca:	4b35      	ldr	r3, [pc, #212]	; (80003a0 <indicator_job+0xfc>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	b25a      	sxtb	r2, r3
 80002d8:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <indicator_job+0xfc>)
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	e01f      	b.n	800031e <indicator_job+0x7a>
	}
	else if (indicator.sm0 == 2)
 80002de:	4b30      	ldr	r3, [pc, #192]	; (80003a0 <indicator_job+0xfc>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b25b      	sxtb	r3, r3
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d11a      	bne.n	800031e <indicator_job+0x7a>
	{
		if (main_flag.systick)
 80002e8:	4b2e      	ldr	r3, [pc, #184]	; (80003a4 <indicator_job+0x100>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2201      	movs	r2, #1
 80002ee:	4013      	ands	r3, r2
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d013      	beq.n	800031e <indicator_job+0x7a>
		{
			indicator.counter0++;
 80002f6:	4b2a      	ldr	r3, [pc, #168]	; (80003a0 <indicator_job+0xfc>)
 80002f8:	885b      	ldrh	r3, [r3, #2]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	3301      	adds	r3, #1
 80002fe:	b29a      	uxth	r2, r3
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <indicator_job+0xfc>)
 8000302:	805a      	strh	r2, [r3, #2]
			if (indicator.counter0 >= indicator.KOn_MAX)
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <indicator_job+0xfc>)
 8000306:	885b      	ldrh	r3, [r3, #2]
 8000308:	b29a      	uxth	r2, r3
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <indicator_job+0xfc>)
 800030c:	889b      	ldrh	r3, [r3, #4]
 800030e:	b29b      	uxth	r3, r3
 8000310:	429a      	cmp	r2, r3
 8000312:	d304      	bcc.n	800031e <indicator_job+0x7a>
			{
				indicator.counter0 = 0;
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <indicator_job+0xfc>)
 8000316:	2200      	movs	r2, #0
 8000318:	805a      	strh	r2, [r3, #2]
				indicator_Off();
 800031a:	f7ff ffaf 	bl	800027c <indicator_Off>
		}
	}


	//Cycle, stop by user
	if (indicator.sm0 == 3)
 800031e:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <indicator_job+0xfc>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	b25b      	sxtb	r3, r3
 8000324:	2b03      	cmp	r3, #3
 8000326:	d115      	bne.n	8000354 <indicator_job+0xb0>
	{
		//PinToggle(*indicator.Port8bits, indicator.pin);
		PinToggle(indicator.GPIOx, indicator.GPIO_Pin);
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <indicator_job+0xfc>)
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <indicator_job+0xfc>)
 800032e:	899b      	ldrh	r3, [r3, #12]
 8000330:	b29b      	uxth	r3, r3
 8000332:	0019      	movs	r1, r3
 8000334:	0010      	movs	r0, r2
 8000336:	f000 ff5c 	bl	80011f2 <HAL_GPIO_TogglePin>

		indicator.counter0 = 0;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <indicator_job+0xfc>)
 800033c:	2200      	movs	r2, #0
 800033e:	805a      	strh	r2, [r3, #2]
		indicator.sm0++;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <indicator_job+0xfc>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b25b      	sxtb	r3, r3
 8000346:	b2db      	uxtb	r3, r3
 8000348:	3301      	adds	r3, #1
 800034a:	b2db      	uxtb	r3, r3
 800034c:	b25a      	sxtb	r2, r3
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <indicator_job+0xfc>)
 8000350:	701a      	strb	r2, [r3, #0]
				indicator.sm0--;
			}
		}
	}

}
 8000352:	e021      	b.n	8000398 <indicator_job+0xf4>
	else if (indicator.sm0 == 4)
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <indicator_job+0xfc>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b25b      	sxtb	r3, r3
 800035a:	2b04      	cmp	r3, #4
 800035c:	d11c      	bne.n	8000398 <indicator_job+0xf4>
		if (main_flag.systick)
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <indicator_job+0x100>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2201      	movs	r2, #1
 8000364:	4013      	ands	r3, r2
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d015      	beq.n	8000398 <indicator_job+0xf4>
			if (++indicator.counter0 >= indicator.KOn_MAX)
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <indicator_job+0xfc>)
 800036e:	885b      	ldrh	r3, [r3, #2]
 8000370:	b29b      	uxth	r3, r3
 8000372:	3301      	adds	r3, #1
 8000374:	b29b      	uxth	r3, r3
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <indicator_job+0xfc>)
 8000378:	1c19      	adds	r1, r3, #0
 800037a:	8051      	strh	r1, [r2, #2]
 800037c:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <indicator_job+0xfc>)
 800037e:	8892      	ldrh	r2, [r2, #4]
 8000380:	b292      	uxth	r2, r2
 8000382:	4293      	cmp	r3, r2
 8000384:	d308      	bcc.n	8000398 <indicator_job+0xf4>
				indicator.sm0--;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <indicator_job+0xfc>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b25b      	sxtb	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	3b01      	subs	r3, #1
 8000390:	b2db      	uxtb	r3, r3
 8000392:	b25a      	sxtb	r2, r3
 8000394:	4b02      	ldr	r3, [pc, #8]	; (80003a0 <indicator_job+0xfc>)
 8000396:	701a      	strb	r2, [r3, #0]
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	20000028 	.word	0x20000028
 80003a4:	200004d0 	.word	0x200004d0

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ae:	f000 fc5f 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b2:	f000 f831 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b6:	f000 f9a3 	bl	8000700 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80003ba:	f000 f97b 	bl	80006b4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80003be:	f000 f88d 	bl	80004dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80003c2:	f000 f8cb 	bl	800055c <MX_SPI1_Init>
  MX_SPI2_Init();
 80003c6:	f000 f907 	bl	80005d8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80003ca:	f000 f943 	bl	8000654 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_GPIO_WritePin(LCD_CTRL_BACKLIGHT_GPIO_Port, LCD_CTRL_BACKLIGHT_Pin, GPIO_PIN_SET);
 80003ce:	2390      	movs	r3, #144	; 0x90
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	2201      	movs	r2, #1
 80003d4:	2108      	movs	r1, #8
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 feee 	bl	80011b8 <HAL_GPIO_WritePin>


   indicator_setPortPin(BUZZER_GPIO_Port, BUZZER_Pin);
 80003dc:	2390      	movs	r3, #144	; 0x90
 80003de:	05db      	lsls	r3, r3, #23
 80003e0:	2102      	movs	r1, #2
 80003e2:	0018      	movs	r0, r3
 80003e4:	f7ff ff1c 	bl	8000220 <indicator_setPortPin>
   indicator_setKSysTickTime_ms(75E-3/SYSTICK);
 80003e8:	204b      	movs	r0, #75	; 0x4b
 80003ea:	f7ff ff2d 	bl	8000248 <indicator_setKSysTickTime_ms>

   indicator_On();	//ok!
 80003ee:	f7ff ff3b 	bl	8000268 <indicator_On>
   //indicator_cycle_start();
   while (1)
   {
	   HAL_Delay(1);//1ms
 80003f2:	2001      	movs	r0, #1
 80003f4:	f000 fca0 	bl	8000d38 <HAL_Delay>
	   main_flag.systick = 1;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <main+0x6c>)
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	2101      	movs	r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	701a      	strb	r2, [r3, #0]
	   indicator_job();
 8000402:	f7ff ff4f 	bl	80002a4 <indicator_job>
	   main_flag.systick = 0;
 8000406:	4b03      	ldr	r3, [pc, #12]	; (8000414 <main+0x6c>)
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	2101      	movs	r1, #1
 800040c:	438a      	bics	r2, r1
 800040e:	701a      	strb	r2, [r3, #0]
	   HAL_Delay(1);//1ms
 8000410:	e7ef      	b.n	80003f2 <main+0x4a>
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	200004d0 	.word	0x200004d0

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b099      	sub	sp, #100	; 0x64
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	242c      	movs	r4, #44	; 0x2c
 8000420:	193b      	adds	r3, r7, r4
 8000422:	0018      	movs	r0, r3
 8000424:	2334      	movs	r3, #52	; 0x34
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f002 fc11 	bl	8002c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042e:	231c      	movs	r3, #28
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	2310      	movs	r3, #16
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f002 fc09 	bl	8002c50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	0018      	movs	r0, r3
 8000442:	2318      	movs	r3, #24
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f002 fc02 	bl	8002c50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800044c:	0021      	movs	r1, r4
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2222      	movs	r2, #34	; 0x22
 8000452:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2201      	movs	r2, #1
 8000458:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2201      	movs	r2, #1
 800045e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2210      	movs	r2, #16
 8000464:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	187b      	adds	r3, r7, r1
 800046e:	0018      	movs	r0, r3
 8000470:	f001 f932 	bl	80016d8 <HAL_RCC_OscConfig>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000478:	f000 fa14 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	211c      	movs	r1, #28
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2203      	movs	r2, #3
 8000488:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2101      	movs	r1, #1
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fca2 	bl	8001de4 <HAL_RCC_ClockConfig>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004a4:	f000 f9fe 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <SystemClock_Config+0xc0>)
 80004ac:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fdfa 	bl	80020bc <HAL_RCCEx_PeriphCLKConfig>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80004cc:	f000 f9ea 	bl	80008a4 <Error_Handler>
  }
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b019      	add	sp, #100	; 0x64
 80004d6:	bd90      	pop	{r4, r7, pc}
 80004d8:	00020021 	.word	0x00020021

080004dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_I2C1_Init+0x74>)
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <MX_I2C1_Init+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_I2C1_Init+0x74>)
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <MX_I2C1_Init+0x7c>)
 80004ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_I2C1_Init+0x74>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_I2C1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_I2C1_Init+0x74>)
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fe85 	bl	8001228 <HAL_I2C_Init>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000522:	f000 f9bf 	bl	80008a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_I2C1_Init+0x74>)
 8000528:	2100      	movs	r1, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f000 ff12 	bl	8001354 <HAL_I2CEx_ConfigAnalogFilter>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000534:	f000 f9b6 	bl	80008a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <MX_I2C1_Init+0x74>)
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f000 ff55 	bl	80013ec <HAL_I2CEx_ConfigDigitalFilter>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f9ad 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000038 	.word	0x20000038
 8000554:	40005400 	.word	0x40005400
 8000558:	2000090e 	.word	0x2000090e

0800055c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 1 */
	//CLKPhase this related field sets the clock phase, and it can assume the values SPI_PHASE_1EDGE
	//(which corresponds to CPHA=0) and SPI_PHASE_2EDGE (which corresponds to CPHA=1).
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_SPI1_Init+0x74>)
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <MX_SPI1_Init+0x78>)
 8000564:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_SPI1_Init+0x74>)
 8000568:	2282      	movs	r2, #130	; 0x82
 800056a:	0052      	lsls	r2, r2, #1
 800056c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_SPI1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_SPI1_Init+0x74>)
 8000576:	22e0      	movs	r2, #224	; 0xe0
 8000578:	00d2      	lsls	r2, r2, #3
 800057a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; //SPI_POLARITY_LOW for INA229, HIGH for ST7920
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_SPI1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;//ina229 needs 2EDGE, ST7920 needs 2EDGE too
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_SPI1_Init+0x74>)
 8000584:	2201      	movs	r2, #1
 8000586:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_SPI1_Init+0x74>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0092      	lsls	r2, r2, #2
 800058e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_SPI1_Init+0x74>)
 8000592:	2238      	movs	r2, #56	; 0x38
 8000594:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_SPI1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_SPI1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_SPI1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_SPI1_Init+0x74>)
 80005aa:	2207      	movs	r2, #7
 80005ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_SPI1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_SPI1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MX_SPI1_Init+0x74>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fe6b 	bl	8002298 <HAL_SPI_Init>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005c6:	f000 f96d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	40013000 	.word	0x40013000

080005d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_SPI2_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_SPI2_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_SPI2_Init+0x74>)
 80005e4:	2282      	movs	r2, #130	; 0x82
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_SPI2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_SPI2_Init+0x74>)
 80005f2:	22e0      	movs	r2, #224	; 0xe0
 80005f4:	00d2      	lsls	r2, r2, #3
 80005f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_SPI2_Init+0x74>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_SPI2_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_SPI2_Init+0x74>)
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	0092      	lsls	r2, r2, #2
 800060a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_SPI2_Init+0x74>)
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_SPI2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_SPI2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_SPI2_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_SPI2_Init+0x74>)
 8000626:	2207      	movs	r2, #7
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_SPI2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_SPI2_Init+0x74>)
 8000632:	2208      	movs	r2, #8
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <MX_SPI2_Init+0x74>)
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fe2d 	bl	8002298 <HAL_SPI_Init>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 f92f 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000f0 	.word	0x200000f0
 8000650:	40003800 	.word	0x40003800

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <MX_USART1_UART_Init+0x5c>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000660:	2296      	movs	r2, #150	; 0x96
 8000662:	0212      	lsls	r2, r2, #8
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000698:	0018      	movs	r0, r3
 800069a:	f001 feb5 	bl	8002408 <HAL_UART_Init>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f8ff 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000154 	.word	0x20000154
 80006b0:	40013800 	.word	0x40013800

080006b4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MX_USB_PCD_Init+0x48>)
 80006bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006c0:	2208      	movs	r2, #8
 80006c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_USB_PCD_Init+0x44>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fecd 	bl	8001484 <HAL_PCD_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80006ee:	f000 f8d9 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200001dc 	.word	0x200001dc
 80006fc:	40005c00 	.word	0x40005c00

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	2414      	movs	r4, #20
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2314      	movs	r3, #20
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f002 fa9d 	bl	8002c50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b5c      	ldr	r3, [pc, #368]	; (8000888 <MX_GPIO_Init+0x188>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b5b      	ldr	r3, [pc, #364]	; (8000888 <MX_GPIO_Init+0x188>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0309      	lsls	r1, r1, #12
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b58      	ldr	r3, [pc, #352]	; (8000888 <MX_GPIO_Init+0x188>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	031b      	lsls	r3, r3, #12
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b55      	ldr	r3, [pc, #340]	; (8000888 <MX_GPIO_Init+0x188>)
 8000734:	695a      	ldr	r2, [r3, #20]
 8000736:	4b54      	ldr	r3, [pc, #336]	; (8000888 <MX_GPIO_Init+0x188>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	03c9      	lsls	r1, r1, #15
 800073c:	430a      	orrs	r2, r1
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	4b51      	ldr	r3, [pc, #324]	; (8000888 <MX_GPIO_Init+0x188>)
 8000742:	695a      	ldr	r2, [r3, #20]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b4e      	ldr	r3, [pc, #312]	; (8000888 <MX_GPIO_Init+0x188>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <MX_GPIO_Init+0x188>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0289      	lsls	r1, r1, #10
 8000758:	430a      	orrs	r2, r1
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <MX_GPIO_Init+0x188>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	029b      	lsls	r3, r3, #10
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <MX_GPIO_Init+0x188>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b46      	ldr	r3, [pc, #280]	; (8000888 <MX_GPIO_Init+0x188>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	02c9      	lsls	r1, r1, #11
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <MX_GPIO_Init+0x188>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	02db      	lsls	r3, r3, #11
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 8000786:	4941      	ldr	r1, [pc, #260]	; (800088c <MX_GPIO_Init+0x18c>)
 8000788:	2390      	movs	r3, #144	; 0x90
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2200      	movs	r2, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fd12 	bl	80011b8 <HAL_GPIO_WritePin>
                          |OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000794:	2390      	movs	r3, #144	; 0x90
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2201      	movs	r2, #1
 800079a:	2110      	movs	r1, #16
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fd0b 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KB_ROW0_Pin|KB_ROW1_Pin|KB_ROW2_Pin|LCD_RS_CS_HIGH_Pin
 80007a2:	493b      	ldr	r1, [pc, #236]	; (8000890 <MX_GPIO_Init+0x190>)
 80007a4:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_GPIO_Init+0x194>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fd05 	bl	80011b8 <HAL_GPIO_WritePin>
                          |PIN_TEST_Pin|KB_ROW3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	22e0      	movs	r2, #224	; 0xe0
 80007b2:	0212      	lsls	r2, r2, #8
 80007b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2201      	movs	r2, #1
 80007c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	4a34      	ldr	r2, [pc, #208]	; (8000898 <MX_GPIO_Init+0x198>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 fb8d 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin BUZZER_Pin LCD_RST_Pin LCD_CTRL_BACKLIGHT_Pin
                           OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0x18c>)
 80007d2:	601a      	str	r2, [r3, #0]
                          |OUT2_Pin|OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	193a      	adds	r2, r7, r4
 80007e8:	2390      	movs	r3, #144	; 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fb7a 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2210      	movs	r2, #16
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2203      	movs	r2, #3
 800080a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800080c:	193a      	adds	r2, r7, r4
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fb67 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_ROW0_Pin KB_ROW1_Pin KB_ROW2_Pin LCD_RS_CS_HIGH_Pin
                           PIN_TEST_Pin KB_ROW3_Pin */
  GPIO_InitStruct.Pin = KB_ROW0_Pin|KB_ROW1_Pin|KB_ROW2_Pin|LCD_RS_CS_HIGH_Pin
 800081a:	193b      	adds	r3, r7, r4
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_GPIO_Init+0x190>)
 800081e:	601a      	str	r2, [r3, #0]
                          |PIN_TEST_Pin|KB_ROW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	193b      	adds	r3, r7, r4
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MX_GPIO_Init+0x194>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f000 fb55 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin KB_COL0_Pin KB_COL1_Pin KB_COL2_Pin
                           KB_COL3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|KB_COL0_Pin|KB_COL1_Pin|KB_COL2_Pin
 800083e:	193b      	adds	r3, r7, r4
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <MX_GPIO_Init+0x19c>)
 8000842:	601a      	str	r2, [r3, #0]
                          |KB_COL3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2201      	movs	r2, #1
 800084e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	193b      	adds	r3, r7, r4
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <MX_GPIO_Init+0x194>)
 8000854:	0019      	movs	r1, r3
 8000856:	0010      	movs	r0, r2
 8000858:	f000 fb46 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 800085c:	0021      	movs	r1, r4
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2201      	movs	r2, #1
 8000870:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8000872:	187b      	adds	r3, r7, r1
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 8000876:	0019      	movs	r1, r3
 8000878:	0010      	movs	r0, r2
 800087a:	f000 fb35 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b00b      	add	sp, #44	; 0x2c
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000
 800088c:	0000810f 	.word	0x0000810f
 8000890:	0000280f 	.word	0x0000280f
 8000894:	48000400 	.word	0x48000400
 8000898:	48000800 	.word	0x48000800
 800089c:	00001330 	.word	0x00001330
 80008a0:	48001400 	.word	0x48001400

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x44>)
 80008b8:	699a      	ldr	r2, [r3, #24]
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_MspInit+0x44>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	619a      	str	r2, [r3, #24]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x44>)
 80008d0:	69da      	ldr	r2, [r3, #28]
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x44>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0549      	lsls	r1, r1, #21
 80008d8:	430a      	orrs	r2, r1
 80008da:	61da      	str	r2, [r3, #28]
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_MspInit+0x44>)
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	055b      	lsls	r3, r3, #21
 80008e4:	4013      	ands	r3, r2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	2414      	movs	r4, #20
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 f9a0 	bl	8002c50 <memset>
  if(hi2c->Instance==I2C1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <HAL_I2C_MspInit+0x90>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d131      	bne.n	800097e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_I2C_MspInit+0x94>)
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_I2C_MspInit+0x94>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	02c9      	lsls	r1, r1, #11
 8000924:	430a      	orrs	r2, r1
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_I2C_MspInit+0x94>)
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	02db      	lsls	r3, r3, #11
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	22c0      	movs	r2, #192	; 0xc0
 800093c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2212      	movs	r2, #18
 8000942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2203      	movs	r2, #3
 800094e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	187b      	adds	r3, r7, r1
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_I2C_MspInit+0x98>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f000 fac3 	bl	8000ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_I2C_MspInit+0x94>)
 8000964:	69da      	ldr	r2, [r3, #28]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_I2C_MspInit+0x94>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0389      	lsls	r1, r1, #14
 800096c:	430a      	orrs	r2, r1
 800096e:	61da      	str	r2, [r3, #28]
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_I2C_MspInit+0x94>)
 8000972:	69da      	ldr	r2, [r3, #28]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	039b      	lsls	r3, r3, #14
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b00b      	add	sp, #44	; 0x2c
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40005400 	.word	0x40005400
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400

08000994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b08d      	sub	sp, #52	; 0x34
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	241c      	movs	r4, #28
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	0018      	movs	r0, r3
 80009a2:	2314      	movs	r3, #20
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f002 f952 	bl	8002c50 <memset>
  if(hspi->Instance==SPI1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <HAL_SPI_MspInit+0x134>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d133      	bne.n	8000a1e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009b6:	4b45      	ldr	r3, [pc, #276]	; (8000acc <HAL_SPI_MspInit+0x138>)
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <HAL_SPI_MspInit+0x138>)
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	0149      	lsls	r1, r1, #5
 80009c0:	430a      	orrs	r2, r1
 80009c2:	619a      	str	r2, [r3, #24]
 80009c4:	4b41      	ldr	r3, [pc, #260]	; (8000acc <HAL_SPI_MspInit+0x138>)
 80009c6:	699a      	ldr	r2, [r3, #24]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	015b      	lsls	r3, r3, #5
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <HAL_SPI_MspInit+0x138>)
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <HAL_SPI_MspInit+0x138>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0289      	lsls	r1, r1, #10
 80009dc:	430a      	orrs	r2, r1
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <HAL_SPI_MspInit+0x138>)
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	4013      	ands	r3, r2
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	0021      	movs	r1, r4
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	22e0      	movs	r2, #224	; 0xe0
 80009f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2202      	movs	r2, #2
 80009fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2203      	movs	r2, #3
 8000a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	187a      	adds	r2, r7, r1
 8000a10:	2390      	movs	r3, #144	; 0x90
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	0011      	movs	r1, r2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fa66 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a1c:	e04f      	b.n	8000abe <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <HAL_SPI_MspInit+0x13c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d14a      	bne.n	8000abe <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <HAL_SPI_MspInit+0x138>)
 8000a2a:	69da      	ldr	r2, [r3, #28]
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_SPI_MspInit+0x138>)
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	01c9      	lsls	r1, r1, #7
 8000a32:	430a      	orrs	r2, r1
 8000a34:	61da      	str	r2, [r3, #28]
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_SPI_MspInit+0x138>)
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	01db      	lsls	r3, r3, #7
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_SPI_MspInit+0x138>)
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_SPI_MspInit+0x138>)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	02c9      	lsls	r1, r1, #11
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_SPI_MspInit+0x138>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	02db      	lsls	r3, r3, #11
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a60:	211c      	movs	r1, #28
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	00d2      	lsls	r2, r2, #3
 8000a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2202      	movs	r2, #2
 8000a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2205      	movs	r2, #5
 8000a82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <HAL_SPI_MspInit+0x140>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f000 fa2c 	bl	8000ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a90:	0021      	movs	r1, r4
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	22c0      	movs	r2, #192	; 0xc0
 8000a96:	0212      	lsls	r2, r2, #8
 8000a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_SPI_MspInit+0x140>)
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	0010      	movs	r0, r2
 8000aba:	f000 fa15 	bl	8000ee8 <HAL_GPIO_Init>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b00d      	add	sp, #52	; 0x34
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40003800 	.word	0x40003800
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b08b      	sub	sp, #44	; 0x2c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	2414      	movs	r4, #20
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f002 f8b0 	bl	8002c50 <memset>
  if(huart->Instance==USART1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_UART_MspInit+0x94>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d133      	bne.n	8000b62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	01c9      	lsls	r1, r1, #7
 8000b04:	430a      	orrs	r2, r1
 8000b06:	619a      	str	r2, [r3, #24]
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b0a:	699a      	ldr	r2, [r3, #24]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	01db      	lsls	r3, r3, #7
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0289      	lsls	r1, r1, #10
 8000b20:	430a      	orrs	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	029b      	lsls	r3, r3, #10
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	22c0      	movs	r2, #192	; 0xc0
 8000b36:	00d2      	lsls	r2, r2, #3
 8000b38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	0021      	movs	r1, r4
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2202      	movs	r2, #2
 8000b40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2201      	movs	r2, #1
 8000b52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	187a      	adds	r2, r7, r1
 8000b56:	2390      	movs	r3, #144	; 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 f9c3 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b00b      	add	sp, #44	; 0x2c
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_PCD_MspInit+0x38>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10d      	bne.n	8000ba2 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_PCD_MspInit+0x3c>)
 8000b88:	69da      	ldr	r2, [r3, #28]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_PCD_MspInit+0x3c>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0409      	lsls	r1, r1, #16
 8000b90:	430a      	orrs	r2, r1
 8000b92:	61da      	str	r2, [r3, #28]
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_PCD_MspInit+0x3c>)
 8000b96:	69da      	ldr	r2, [r3, #28]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	041b      	lsls	r3, r3, #16
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40005c00 	.word	0x40005c00
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f892 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be8:	f000 f83d 	bl	8000c66 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <LoopForever+0x6>)
    LDR R1, [R0]
 8000bee:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000bf0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <LoopForever+0xa>)
    CMP R1, R2
 8000bf4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000bf6:	d105      	bne.n	8000c04 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bfa:	4912      	ldr	r1, [pc, #72]	; (8000c44 <LoopForever+0x12>)
    STR R1, [R0]
 8000bfc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bfe:	4812      	ldr	r0, [pc, #72]	; (8000c48 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c00:	4912      	ldr	r1, [pc, #72]	; (8000c4c <LoopForever+0x1a>)
    STR R1, [R0]
 8000c02:	6001      	str	r1, [r0, #0]

08000c04 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	4812      	ldr	r0, [pc, #72]	; (8000c50 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c06:	4913      	ldr	r1, [pc, #76]	; (8000c54 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <LoopForever+0x26>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c1c:	4c10      	ldr	r4, [pc, #64]	; (8000c60 <LoopForever+0x2e>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f001 ffed 	bl	8002c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff fbbb 	bl	80003a8 <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000c38:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c3c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000c40:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000c44:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c48:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c4c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c58:	08002cb8 	.word	0x08002cb8
  ldr r2, =_sbss
 8000c5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c60:	200004d8 	.word	0x200004d8

08000c64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_IRQHandler>

08000c66 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <HAL_Init+0x24>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_Init+0x24>)
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f809 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c86:	f7ff fe13 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_InitTick+0x60>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	0019      	movs	r1, r3
 8000caa:	23fa      	movs	r3, #250	; 0xfa
 8000cac:	0098      	lsls	r0, r3, #2
 8000cae:	f7ff fa2b 	bl	8000108 <__udivsi3>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f7ff fa26 	bl	8000108 <__udivsi3>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f905 	bl	8000ece <HAL_SYSTICK_Config>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e00f      	b.n	8000cec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d80b      	bhi.n	8000cea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f8e2 	bl	8000ea4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_InitTick+0x64>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b003      	add	sp, #12
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	18d2      	adds	r2, r2, r3
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_IncTick+0x20>)
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200004d4 	.word	0x200004d4

08000d24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200004d4 	.word	0x200004d4

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff fff0 	bl	8000d24 <HAL_GetTick>
 8000d44:	0003      	movs	r3, r0
 8000d46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	001a      	movs	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	189b      	adds	r3, r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	f7ff ffe0 	bl	8000d24 <HAL_GetTick>
 8000d64:	0002      	movs	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d828      	bhi.n	8000de8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d96:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	33c0      	adds	r3, #192	; 0xc0
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	589b      	ldr	r3, [r3, r2]
 8000da6:	1dfa      	adds	r2, r7, #7
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	0011      	movs	r1, r2
 8000dac:	2203      	movs	r2, #3
 8000dae:	400a      	ands	r2, r1
 8000db0:	00d2      	lsls	r2, r2, #3
 8000db2:	21ff      	movs	r1, #255	; 0xff
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	43d2      	mvns	r2, r2
 8000dba:	401a      	ands	r2, r3
 8000dbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	019b      	lsls	r3, r3, #6
 8000dc2:	22ff      	movs	r2, #255	; 0xff
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	2303      	movs	r3, #3
 8000dce:	4003      	ands	r3, r0
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	430a      	orrs	r2, r1
 8000de0:	33c0      	adds	r3, #192	; 0xc0
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000de6:	e031      	b.n	8000e4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0019      	movs	r1, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	400b      	ands	r3, r1
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3306      	adds	r3, #6
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	001c      	movs	r4, r3
 8000e38:	230f      	movs	r3, #15
 8000e3a:	4023      	ands	r3, r4
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	430a      	orrs	r2, r1
 8000e42:	3306      	adds	r3, #6
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	18c3      	adds	r3, r0, r3
 8000e48:	3304      	adds	r3, #4
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b003      	add	sp, #12
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	045b      	lsls	r3, r3, #17
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d301      	bcc.n	8000e74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e70:	2301      	movs	r3, #1
 8000e72:	e010      	b.n	8000e96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <SysTick_Config+0x44>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	425b      	negs	r3, r3
 8000e80:	2103      	movs	r1, #3
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff ff7c 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x44>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x44>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	210f      	movs	r1, #15
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	1c02      	adds	r2, r0, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ff5d 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ffbf 	bl	8000e5c <SysTick_Config>
 8000ede:	0003      	movs	r3, r0
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e149      	b.n	800118c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4091      	lsls	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d100      	bne.n	8000f10 <HAL_GPIO_Init+0x28>
 8000f0e:	e13a      	b.n	8001186 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	2201      	movs	r2, #1
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d123      	bne.n	800101a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	58d3      	ldr	r3, [r2, r3]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2107      	movs	r1, #7
 8000ffe:	400b      	ands	r3, r1
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	401a      	ands	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	029b      	lsls	r3, r3, #10
 8001056:	4013      	ands	r3, r2
 8001058:	d100      	bne.n	800105c <HAL_GPIO_Init+0x174>
 800105a:	e094      	b.n	8001186 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <HAL_GPIO_Init+0x2bc>)
 800105e:	699a      	ldr	r2, [r3, #24]
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <HAL_GPIO_Init+0x2bc>)
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	619a      	str	r2, [r3, #24]
 8001068:	4b4e      	ldr	r3, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x2bc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	2201      	movs	r2, #1
 800106e:	4013      	ands	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x2c0>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	589b      	ldr	r3, [r3, r2]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2203      	movs	r2, #3
 8001086:	4013      	ands	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	409a      	lsls	r2, r3
 800108e:	0013      	movs	r3, r2
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	2390      	movs	r3, #144	; 0x90
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	429a      	cmp	r2, r3
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x1d6>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a41      	ldr	r2, [pc, #260]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x1d2>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <HAL_GPIO_Init+0x2c8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x1ce>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010be:	2300      	movs	r3, #0
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	2103      	movs	r1, #3
 80010c4:	400a      	ands	r2, r1
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x2c0>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	035b      	lsls	r3, r3, #13
 80010f6:	4013      	ands	r3, r2
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43da      	mvns	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	039b      	lsls	r3, r3, #14
 8001120:	4013      	ands	r3, r2
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	029b      	lsls	r3, r3, #10
 800114a:	4013      	ands	r3, r2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	025b      	lsls	r3, r3, #9
 8001174:	4013      	ands	r3, r2
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	40da      	lsrs	r2, r3
 8001194:	1e13      	subs	r3, r2, #0
 8001196:	d000      	beq.n	800119a <HAL_GPIO_Init+0x2b2>
 8001198:	e6ae      	b.n	8000ef8 <HAL_GPIO_Init+0x10>
  } 
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b006      	add	sp, #24
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	48000400 	.word	0x48000400
 80011b0:	48000800 	.word	0x48000800
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	0008      	movs	r0, r1
 80011c2:	0011      	movs	r1, r2
 80011c4:	1cbb      	adds	r3, r7, #2
 80011c6:	1c02      	adds	r2, r0, #0
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	1c7b      	adds	r3, r7, #1
 80011cc:	1c0a      	adds	r2, r1, #0
 80011ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d0:	1c7b      	adds	r3, r7, #1
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d8:	1cbb      	adds	r3, r7, #2
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e2:	1cbb      	adds	r3, r7, #2
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	000a      	movs	r2, r1
 80011fc:	1cbb      	adds	r3, r7, #2
 80011fe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001206:	1cbb      	adds	r3, r7, #2
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	041a      	lsls	r2, r3, #16
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	1cb9      	adds	r1, r7, #2
 8001216:	8809      	ldrh	r1, [r1, #0]
 8001218:	400b      	ands	r3, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e082      	b.n	8001340 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2241      	movs	r2, #65	; 0x41
 800123e:	5c9b      	ldrb	r3, [r3, r2]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2240      	movs	r2, #64	; 0x40
 800124a:	2100      	movs	r1, #0
 800124c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fb51 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2241      	movs	r2, #65	; 0x41
 800125a:	2124      	movs	r1, #36	; 0x24
 800125c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	438a      	bics	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_I2C_Init+0x120>)
 8001278:	400a      	ands	r2, r1
 800127a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4931      	ldr	r1, [pc, #196]	; (800134c <HAL_I2C_Init+0x124>)
 8001288:	400a      	ands	r2, r1
 800128a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	0209      	lsls	r1, r1, #8
 80012a0:	430a      	orrs	r2, r1
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e007      	b.n	80012b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2184      	movs	r1, #132	; 0x84
 80012b0:	0209      	lsls	r1, r1, #8
 80012b2:	430a      	orrs	r2, r1
 80012b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d104      	bne.n	80012c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	491f      	ldr	r1, [pc, #124]	; (8001350 <HAL_I2C_Init+0x128>)
 80012d4:	430a      	orrs	r2, r1
 80012d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	491a      	ldr	r1, [pc, #104]	; (800134c <HAL_I2C_Init+0x124>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69d9      	ldr	r1, [r3, #28]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2241      	movs	r2, #65	; 0x41
 800132c:	2120      	movs	r1, #32
 800132e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2242      	movs	r2, #66	; 0x42
 800133a:	2100      	movs	r1, #0
 800133c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}
 8001348:	f0ffffff 	.word	0xf0ffffff
 800134c:	ffff7fff 	.word	0xffff7fff
 8001350:	02008000 	.word	0x02008000

08001354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2241      	movs	r2, #65	; 0x41
 8001362:	5c9b      	ldrb	r3, [r3, r2]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b20      	cmp	r3, #32
 8001368:	d138      	bne.n	80013dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2240      	movs	r2, #64	; 0x40
 800136e:	5c9b      	ldrb	r3, [r3, r2]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001374:	2302      	movs	r3, #2
 8001376:	e032      	b.n	80013de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	2101      	movs	r1, #1
 800137e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2241      	movs	r2, #65	; 0x41
 8001384:	2124      	movs	r1, #36	; 0x24
 8001386:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4911      	ldr	r1, [pc, #68]	; (80013e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2241      	movs	r2, #65	; 0x41
 80013cc:	2120      	movs	r1, #32
 80013ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	e000      	b.n	80013de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013dc:	2302      	movs	r3, #2
  }
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	ffffefff 	.word	0xffffefff

080013ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2241      	movs	r2, #65	; 0x41
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b20      	cmp	r3, #32
 8001400:	d139      	bne.n	8001476 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	5c9b      	ldrb	r3, [r3, r2]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800140c:	2302      	movs	r3, #2
 800140e:	e033      	b.n	8001478 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	2101      	movs	r1, #1
 8001416:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2241      	movs	r2, #65	; 0x41
 800141c:	2124      	movs	r1, #36	; 0x24
 800141e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2101      	movs	r1, #1
 800142c:	438a      	bics	r2, r1
 800142e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2241      	movs	r2, #65	; 0x41
 8001466:	2120      	movs	r1, #32
 8001468:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	2100      	movs	r1, #0
 8001470:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001476:	2302      	movs	r3, #2
  }
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b004      	add	sp, #16
 800147e:	bd80      	pop	{r7, pc}
 8001480:	fffff0ff 	.word	0xfffff0ff

08001484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af06      	add	r7, sp, #24
 800148a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0f0      	b.n	8001678 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a79      	ldr	r2, [pc, #484]	; (8001680 <HAL_PCD_Init+0x1fc>)
 800149a:	5c9b      	ldrb	r3, [r3, r2]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d108      	bne.n	80014b4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	23aa      	movs	r3, #170	; 0xaa
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	2100      	movs	r1, #0
 80014aa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff fb60 	bl	8000b74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a72      	ldr	r2, [pc, #456]	; (8001680 <HAL_PCD_Init+0x1fc>)
 80014b8:	2103      	movs	r1, #3
 80014ba:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f001 fb5f 	bl	8002b84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c6:	230f      	movs	r3, #15
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e049      	b.n	8001564 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d0:	200f      	movs	r0, #15
 80014d2:	183b      	adds	r3, r7, r0
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	0013      	movs	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	189b      	adds	r3, r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	18cb      	adds	r3, r1, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ea:	183b      	adds	r3, r7, r0
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	0013      	movs	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	189b      	adds	r3, r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	183a      	adds	r2, r7, r0
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001500:	183b      	adds	r3, r7, r0
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	0013      	movs	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	189b      	adds	r3, r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	18cb      	adds	r3, r1, r3
 8001512:	3303      	adds	r3, #3
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001518:	183b      	adds	r3, r7, r0
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	0013      	movs	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	189b      	adds	r3, r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	18cb      	adds	r3, r1, r3
 8001528:	3338      	adds	r3, #56	; 0x38
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800152e:	183b      	adds	r3, r7, r0
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	0013      	movs	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	189b      	adds	r3, r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	18cb      	adds	r3, r1, r3
 800153e:	333c      	adds	r3, #60	; 0x3c
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001544:	183b      	adds	r3, r7, r0
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	0013      	movs	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	189b      	adds	r3, r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	18cb      	adds	r3, r1, r3
 8001554:	3340      	adds	r3, #64	; 0x40
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155a:	183b      	adds	r3, r7, r0
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	183b      	adds	r3, r7, r0
 8001560:	3201      	adds	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	210f      	movs	r1, #15
 8001566:	187b      	adds	r3, r7, r1
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3ae      	bcc.n	80014d0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e056      	b.n	8001628 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800157a:	240f      	movs	r4, #15
 800157c:	193b      	adds	r3, r7, r4
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	236a      	movs	r3, #106	; 0x6a
 8001584:	33ff      	adds	r3, #255	; 0xff
 8001586:	0019      	movs	r1, r3
 8001588:	0013      	movs	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	189b      	adds	r3, r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	18c3      	adds	r3, r0, r3
 8001592:	185b      	adds	r3, r3, r1
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001598:	193b      	adds	r3, r7, r4
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	23b4      	movs	r3, #180	; 0xb4
 80015a0:	0059      	lsls	r1, r3, #1
 80015a2:	0013      	movs	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	189b      	adds	r3, r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	18c3      	adds	r3, r0, r3
 80015ac:	185b      	adds	r3, r3, r1
 80015ae:	193a      	adds	r2, r7, r4
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	236c      	movs	r3, #108	; 0x6c
 80015bc:	33ff      	adds	r3, #255	; 0xff
 80015be:	0019      	movs	r1, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	189b      	adds	r3, r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	18c3      	adds	r3, r0, r3
 80015ca:	185b      	adds	r3, r3, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	23bc      	movs	r3, #188	; 0xbc
 80015d8:	0059      	lsls	r1, r3, #1
 80015da:	0013      	movs	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	18c3      	adds	r3, r0, r3
 80015e4:	185b      	adds	r3, r3, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	23be      	movs	r3, #190	; 0xbe
 80015f2:	0059      	lsls	r1, r3, #1
 80015f4:	0013      	movs	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	189b      	adds	r3, r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	18c3      	adds	r3, r0, r3
 80015fe:	185b      	adds	r3, r3, r1
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001604:	193b      	adds	r3, r7, r4
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	23c0      	movs	r3, #192	; 0xc0
 800160c:	0059      	lsls	r1, r3, #1
 800160e:	0013      	movs	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	189b      	adds	r3, r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	18c3      	adds	r3, r0, r3
 8001618:	185b      	adds	r3, r3, r1
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161e:	193b      	adds	r3, r7, r4
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	193b      	adds	r3, r7, r4
 8001624:	3201      	adds	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	230f      	movs	r3, #15
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3a1      	bcc.n	800157a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	466a      	mov	r2, sp
 800163e:	0011      	movs	r1, r2
 8001640:	001a      	movs	r2, r3
 8001642:	3210      	adds	r2, #16
 8001644:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001646:	c170      	stmia	r1!, {r4, r5, r6}
 8001648:	ca30      	ldmia	r2!, {r4, r5}
 800164a:	c130      	stmia	r1!, {r4, r5}
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f001 fab1 	bl	8002bb8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2224      	movs	r2, #36	; 0x24
 800165a:	2100      	movs	r1, #0
 800165c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_PCD_Init+0x1fc>)
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d103      	bne.n	8001676 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	0018      	movs	r0, r3
 8001672:	f000 f807 	bl	8001684 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b005      	add	sp, #20
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001680:	000002a9 	.word	0x000002a9

08001684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	23ba      	movs	r3, #186	; 0xba
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	2101      	movs	r1, #1
 800169a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	23b8      	movs	r3, #184	; 0xb8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	2100      	movs	r1, #0
 80016a4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2254      	movs	r2, #84	; 0x54
 80016aa:	5a9b      	ldrh	r3, [r3, r2]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	2201      	movs	r2, #1
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b299      	uxth	r1, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2254      	movs	r2, #84	; 0x54
 80016b8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2254      	movs	r2, #84	; 0x54
 80016be:	5a9b      	ldrh	r3, [r3, r2]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2202      	movs	r2, #2
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b299      	uxth	r1, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2254      	movs	r2, #84	; 0x54
 80016cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b004      	add	sp, #16
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f000 fb76 	bl	8001dd8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	d100      	bne.n	80016f8 <HAL_RCC_OscConfig+0x20>
 80016f6:	e08e      	b.n	8001816 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016f8:	4bc5      	ldr	r3, [pc, #788]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	220c      	movs	r2, #12
 80016fe:	4013      	ands	r3, r2
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00e      	beq.n	8001722 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001704:	4bc2      	ldr	r3, [pc, #776]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	220c      	movs	r2, #12
 800170a:	4013      	ands	r3, r2
 800170c:	2b08      	cmp	r3, #8
 800170e:	d117      	bne.n	8001740 <HAL_RCC_OscConfig+0x68>
 8001710:	4bbf      	ldr	r3, [pc, #764]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	401a      	ands	r2, r3
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	025b      	lsls	r3, r3, #9
 800171e:	429a      	cmp	r2, r3
 8001720:	d10e      	bne.n	8001740 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001722:	4bbb      	ldr	r3, [pc, #748]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	029b      	lsls	r3, r3, #10
 800172a:	4013      	ands	r3, r2
 800172c:	d100      	bne.n	8001730 <HAL_RCC_OscConfig+0x58>
 800172e:	e071      	b.n	8001814 <HAL_RCC_OscConfig+0x13c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d000      	beq.n	800173a <HAL_RCC_OscConfig+0x62>
 8001738:	e06c      	b.n	8001814 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	f000 fb4c 	bl	8001dd8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_RCC_OscConfig+0x80>
 8001748:	4bb1      	ldr	r3, [pc, #708]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4bb0      	ldr	r3, [pc, #704]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0249      	lsls	r1, r1, #9
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e02f      	b.n	80017b8 <HAL_RCC_OscConfig+0xe0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0xa2>
 8001760:	4bab      	ldr	r3, [pc, #684]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4baa      	ldr	r3, [pc, #680]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001766:	49ab      	ldr	r1, [pc, #684]	; (8001a14 <HAL_RCC_OscConfig+0x33c>)
 8001768:	400a      	ands	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	4ba8      	ldr	r3, [pc, #672]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4ba7      	ldr	r3, [pc, #668]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001772:	49a9      	ldr	r1, [pc, #676]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 8001774:	400a      	ands	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e01e      	b.n	80017b8 <HAL_RCC_OscConfig+0xe0>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d10e      	bne.n	80017a0 <HAL_RCC_OscConfig+0xc8>
 8001782:	4ba3      	ldr	r3, [pc, #652]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4ba2      	ldr	r3, [pc, #648]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	02c9      	lsls	r1, r1, #11
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	4b9f      	ldr	r3, [pc, #636]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b9e      	ldr	r3, [pc, #632]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	0249      	lsls	r1, r1, #9
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xe0>
 80017a0:	4b9b      	ldr	r3, [pc, #620]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b9a      	ldr	r3, [pc, #616]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80017a6:	499b      	ldr	r1, [pc, #620]	; (8001a14 <HAL_RCC_OscConfig+0x33c>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	4b98      	ldr	r3, [pc, #608]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b97      	ldr	r3, [pc, #604]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80017b2:	4999      	ldr	r1, [pc, #612]	; (8001a18 <HAL_RCC_OscConfig+0x340>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d014      	beq.n	80017ea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fab0 	bl	8000d24 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ca:	f7ff faab 	bl	8000d24 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e2fd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017dc:	4b8c      	ldr	r3, [pc, #560]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	029b      	lsls	r3, r3, #10
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0xf2>
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fa9b 	bl	8000d24 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa96 	bl	8000d24 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e2e8      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b82      	ldr	r3, [pc, #520]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x11c>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x14a>
 8001820:	e06c      	b.n	80018fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001822:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	220c      	movs	r2, #12
 8001828:	4013      	ands	r3, r2
 800182a:	d00e      	beq.n	800184a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800182c:	4b78      	ldr	r3, [pc, #480]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	220c      	movs	r2, #12
 8001832:	4013      	ands	r3, r2
 8001834:	2b08      	cmp	r3, #8
 8001836:	d11f      	bne.n	8001878 <HAL_RCC_OscConfig+0x1a0>
 8001838:	4b75      	ldr	r3, [pc, #468]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	23c0      	movs	r3, #192	; 0xc0
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	401a      	ands	r2, r3
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	429a      	cmp	r2, r3
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x188>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e2bb      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	22f8      	movs	r2, #248	; 0xf8
 8001866:	4393      	bics	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00da      	lsls	r2, r3, #3
 8001870:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e041      	b.n	80018fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d024      	beq.n	80018ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b62      	ldr	r3, [pc, #392]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fa4a 	bl	8000d24 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fa45 	bl	8000d24 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e297      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2202      	movs	r2, #2
 80018ae:	4013      	ands	r3, r2
 80018b0:	d0f1      	beq.n	8001896 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	22f8      	movs	r2, #248	; 0xf8
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00da      	lsls	r2, r3, #3
 80018c2:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e018      	b.n	80018fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	438a      	bics	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fa25 	bl	8000d24 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fa20 	bl	8000d24 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e272      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2202      	movs	r2, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d1f1      	bne.n	80018e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2208      	movs	r2, #8
 8001902:	4013      	ands	r3, r2
 8001904:	d036      	beq.n	8001974 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001914:	2101      	movs	r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fa03 	bl	8000d24 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff f9fe 	bl	8000d24 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e250      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d0f1      	beq.n	8001924 <HAL_RCC_OscConfig+0x24c>
 8001940:	e018      	b.n	8001974 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001942:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001948:	2101      	movs	r1, #1
 800194a:	438a      	bics	r2, r1
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff f9e9 	bl	8000d24 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff f9e4 	bl	8000d24 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e236      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	2202      	movs	r2, #2
 8001970:	4013      	ands	r3, r2
 8001972:	d1f1      	bne.n	8001958 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2204      	movs	r2, #4
 800197a:	4013      	ands	r3, r2
 800197c:	d100      	bne.n	8001980 <HAL_RCC_OscConfig+0x2a8>
 800197e:	e0b5      	b.n	8001aec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001980:	201f      	movs	r0, #31
 8001982:	183b      	adds	r3, r7, r0
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800198a:	69da      	ldr	r2, [r3, #28]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	055b      	lsls	r3, r3, #21
 8001990:	4013      	ands	r3, r2
 8001992:	d110      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001996:	69da      	ldr	r2, [r3, #28]
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	0549      	lsls	r1, r1, #21
 800199e:	430a      	orrs	r2, r1
 80019a0:	61da      	str	r2, [r3, #28]
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	055b      	lsls	r3, r3, #21
 80019aa:	4013      	ands	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_OscConfig+0x344>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	d11a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_RCC_OscConfig+0x344>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_RCC_OscConfig+0x344>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0049      	lsls	r1, r1, #1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d0:	f7ff f9a8 	bl	8000d24 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff f9a3 	bl	8000d24 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e1f5      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x344>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d10f      	bne.n	8001a20 <HAL_RCC_OscConfig+0x348>
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_RCC_OscConfig+0x338>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	621a      	str	r2, [r3, #32]
 8001a0c:	e036      	b.n	8001a7c <HAL_RCC_OscConfig+0x3a4>
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40021000 	.word	0x40021000
 8001a14:	fffeffff 	.word	0xfffeffff
 8001a18:	fffbffff 	.word	0xfffbffff
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x36a>
 8001a28:	4bca      	ldr	r3, [pc, #808]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	6a1a      	ldr	r2, [r3, #32]
 8001a2c:	4bc9      	ldr	r3, [pc, #804]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	438a      	bics	r2, r1
 8001a32:	621a      	str	r2, [r3, #32]
 8001a34:	4bc7      	ldr	r3, [pc, #796]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	6a1a      	ldr	r2, [r3, #32]
 8001a38:	4bc6      	ldr	r3, [pc, #792]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	621a      	str	r2, [r3, #32]
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x3a4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x38c>
 8001a4a:	4bc2      	ldr	r3, [pc, #776]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	4bc1      	ldr	r3, [pc, #772]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a50:	2104      	movs	r1, #4
 8001a52:	430a      	orrs	r2, r1
 8001a54:	621a      	str	r2, [r3, #32]
 8001a56:	4bbf      	ldr	r3, [pc, #764]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	4bbe      	ldr	r3, [pc, #760]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	621a      	str	r2, [r3, #32]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0x3a4>
 8001a64:	4bbb      	ldr	r3, [pc, #748]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	6a1a      	ldr	r2, [r3, #32]
 8001a68:	4bba      	ldr	r3, [pc, #744]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	621a      	str	r2, [r3, #32]
 8001a70:	4bb8      	ldr	r3, [pc, #736]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	4bb7      	ldr	r3, [pc, #732]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001a76:	2104      	movs	r1, #4
 8001a78:	438a      	bics	r2, r1
 8001a7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d014      	beq.n	8001aae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff f94e 	bl	8000d24 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f949 	bl	8000d24 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4aaf      	ldr	r2, [pc, #700]	; (8001d58 <HAL_RCC_OscConfig+0x680>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e19a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	4bac      	ldr	r3, [pc, #688]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3b6>
 8001aac:	e013      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff f939 	bl	8000d24 <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	e009      	b.n	8001acc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f934 	bl	8000d24 <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4aa5      	ldr	r2, [pc, #660]	; (8001d58 <HAL_RCC_OscConfig+0x680>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e185      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001acc:	4ba1      	ldr	r3, [pc, #644]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ad6:	231f      	movs	r3, #31
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b9c      	ldr	r3, [pc, #624]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	499d      	ldr	r1, [pc, #628]	; (8001d5c <HAL_RCC_OscConfig+0x684>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2210      	movs	r2, #16
 8001af2:	4013      	ands	r3, r2
 8001af4:	d063      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d12a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001afe:	4b95      	ldr	r3, [pc, #596]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b02:	4b94      	ldr	r3, [pc, #592]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b04:	2104      	movs	r1, #4
 8001b06:	430a      	orrs	r2, r1
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b0a:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b0e:	4b91      	ldr	r3, [pc, #580]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff f905 	bl	8000d24 <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b20:	f7ff f900 	bl	8000d24 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e152      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	2202      	movs	r2, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d0f1      	beq.n	8001b20 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b3c:	4b85      	ldr	r3, [pc, #532]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	22f8      	movs	r2, #248	; 0xf8
 8001b42:	4393      	bics	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	00da      	lsls	r2, r3, #3
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
 8001b52:	e034      	b.n	8001bbe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	3305      	adds	r3, #5
 8001b5a:	d111      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b5c:	4b7d      	ldr	r3, [pc, #500]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b60:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b62:	2104      	movs	r1, #4
 8001b64:	438a      	bics	r2, r1
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b68:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	22f8      	movs	r2, #248	; 0xf8
 8001b6e:	4393      	bics	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	00da      	lsls	r2, r3, #3
 8001b78:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7e:	e01e      	b.n	8001bbe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b80:	4b74      	ldr	r3, [pc, #464]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b84:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	2104      	movs	r1, #4
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b8c:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b90:	4b70      	ldr	r3, [pc, #448]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff f8c4 	bl	8000d24 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ba2:	f7ff f8bf 	bl	8000d24 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e111      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bb4:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d1f1      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d05c      	beq.n	8001c82 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bc8:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	220c      	movs	r2, #12
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bd4:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	220c      	movs	r2, #12
 8001bda:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d114      	bne.n	8001c0a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001be0:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	401a      	ands	r2, r3
 8001bea:	23c0      	movs	r3, #192	; 0xc0
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d10b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bf2:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d040      	beq.n	8001c80 <HAL_RCC_OscConfig+0x5a8>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d03c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0e6      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c12:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	0249      	lsls	r1, r1, #9
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f880 	bl	8000d24 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2a:	f7ff f87b 	bl	8000d24 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0cd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x552>
 8001c48:	e01b      	b.n	8001c82 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001c50:	4943      	ldr	r1, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x688>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff f865 	bl	8000d24 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c60:	f7ff f860 	bl	8000d24 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0b2      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x588>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c80:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d100      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5b4>
 8001c8a:	e0a4      	b.n	8001dd6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	220c      	movs	r2, #12
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x5c2>
 8001c98:	e078      	b.n	8001d8c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d14c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001ca8:	492e      	ldr	r1, [pc, #184]	; (8001d64 <HAL_RCC_OscConfig+0x68c>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff f839 	bl	8000d24 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f834 	bl	8000d24 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e086      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	049b      	lsls	r3, r3, #18
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	220f      	movs	r2, #15
 8001cdc:	4393      	bics	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_RCC_OscConfig+0x690>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0449      	lsls	r1, r1, #17
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7ff f807 	bl	8000d24 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f802 	bl	8000d24 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e054      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	049b      	lsls	r3, r3, #18
 8001d36:	4013      	ands	r3, r2
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x644>
 8001d3a:	e04c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_RCC_OscConfig+0x67c>)
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x68c>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe ffec 	bl	8000d24 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x6a6>
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	40021000 	.word	0x40021000
 8001d58:	00001388 	.word	0x00001388
 8001d5c:	efffffff 	.word	0xefffffff
 8001d60:	fffeffff 	.word	0xfffeffff
 8001d64:	feffffff 	.word	0xfeffffff
 8001d68:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7fe ffda 	bl	8000d24 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e02c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_RCC_OscConfig+0x708>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	049b      	lsls	r3, r3, #18
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x694>
 8001d8a:	e024      	b.n	8001dd6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e01f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_RCC_OscConfig+0x708>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x708>)
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	025b      	lsls	r3, r3, #9
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10e      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	220f      	movs	r2, #15
 8001db8:	401a      	ands	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	23f0      	movs	r3, #240	; 0xf0
 8001dc6:	039b      	lsls	r3, r3, #14
 8001dc8:	401a      	ands	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b008      	add	sp, #32
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0bf      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4013      	ands	r3, r2
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d911      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	4b59      	ldr	r3, [pc, #356]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0a6      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d015      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d006      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e3e:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001e44:	21e0      	movs	r1, #224	; 0xe0
 8001e46:	00c9      	lsls	r1, r1, #3
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	22f0      	movs	r2, #240	; 0xf0
 8001e52:	4393      	bics	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	d04c      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	029b      	lsls	r3, r3, #10
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d120      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07a      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	049b      	lsls	r3, r3, #18
 8001e92:	4013      	ands	r3, r2
 8001e94:	d114      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06e      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	029b      	lsls	r3, r3, #10
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e062      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e05b      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4393      	bics	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed4:	f7fe ff26 	bl	8000d24 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001edc:	e009      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ede:	f7fe ff21 	bl	8000d24 <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_RCC_ClockConfig+0x1a4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e042      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	401a      	ands	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1ec      	bne.n	8001ede <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d211      	bcs.n	8001f36 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_RCC_ClockConfig+0x19c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e020      	b.n	8001f78 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_RCC_ClockConfig+0x1a8>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f54:	f000 f820 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f58:	0001      	movs	r1, r0
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_ClockConfig+0x1a0>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	220f      	movs	r2, #15
 8001f62:	4013      	ands	r3, r2
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x1ac>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	000a      	movs	r2, r1
 8001f6a:	40da      	lsrs	r2, r3
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f7fe fe91 	bl	8000c98 <HAL_InitTick>
  
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b004      	add	sp, #16
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40022000 	.word	0x40022000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	00001388 	.word	0x00001388
 8001f8c:	fffff8ff 	.word	0xfffff8ff
 8001f90:	08002c78 	.word	0x08002c78
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	220c      	movs	r2, #12
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d046      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0xb8>
 8001fc2:	d848      	bhi.n	8002056 <HAL_RCC_GetSysClockFreq+0xbe>
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d002      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x36>
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d003      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x3c>
 8001fcc:	e043      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fd0:	613b      	str	r3, [r7, #16]
      break;
 8001fd2:	e043      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	220f      	movs	r2, #15
 8001fda:	4013      	ands	r3, r2
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	4013      	ands	r3, r2
 8001fea:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	23c0      	movs	r3, #192	; 0xc0
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	025b      	lsls	r3, r3, #9
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d109      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	481a      	ldr	r0, [pc, #104]	; (800206c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002004:	f7fe f880 	bl	8000108 <__udivsi3>
 8002008:	0003      	movs	r3, r0
 800200a:	001a      	movs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4353      	muls	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e01a      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	23c0      	movs	r3, #192	; 0xc0
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	401a      	ands	r2, r3
 800201c:	23c0      	movs	r3, #192	; 0xc0
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	429a      	cmp	r2, r3
 8002022:	d109      	bne.n	8002038 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	4814      	ldr	r0, [pc, #80]	; (8002078 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002028:	f7fe f86e 	bl	8000108 <__udivsi3>
 800202c:	0003      	movs	r3, r0
 800202e:	001a      	movs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4353      	muls	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e008      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	480c      	ldr	r0, [pc, #48]	; (800206c <HAL_RCC_GetSysClockFreq+0xd4>)
 800203c:	f7fe f864 	bl	8000108 <__udivsi3>
 8002040:	0003      	movs	r3, r0
 8002042:	001a      	movs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4353      	muls	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	613b      	str	r3, [r7, #16]
      break;
 800204e:	e005      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002052:	613b      	str	r3, [r7, #16]
      break;
 8002054:	e002      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b006      	add	sp, #24
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	40021000 	.word	0x40021000
 800206c:	007a1200 	.word	0x007a1200
 8002070:	08002c90 	.word	0x08002c90
 8002074:	08002ca0 	.word	0x08002ca0
 8002078:	02dc6c00 	.word	0x02dc6c00

0800207c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002080:	4b02      	ldr	r3, [pc, #8]	; (800208c <HAL_RCC_GetHCLKFreq+0x10>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	20000000 	.word	0x20000000

08002090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002094:	f7ff fff2 	bl	800207c <HAL_RCC_GetHCLKFreq>
 8002098:	0001      	movs	r1, r0
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	2207      	movs	r2, #7
 80020a2:	4013      	ands	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	40d9      	lsrs	r1, r3
 80020aa:	000b      	movs	r3, r1
}    
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08002c88 	.word	0x08002c88

080020bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	025b      	lsls	r3, r3, #9
 80020d4:	4013      	ands	r3, r2
 80020d6:	d100      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020d8:	e08e      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2017      	movs	r0, #23
 80020dc:	183b      	adds	r3, r7, r0
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	055b      	lsls	r3, r3, #21
 80020ea:	4013      	ands	r3, r2
 80020ec:	d110      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b64      	ldr	r3, [pc, #400]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0549      	lsls	r1, r1, #21
 80020f8:	430a      	orrs	r2, r1
 80020fa:	61da      	str	r2, [r3, #28]
 80020fc:	4b60      	ldr	r3, [pc, #384]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	055b      	lsls	r3, r3, #21
 8002104:	4013      	ands	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	183b      	adds	r3, r7, r0
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d11a      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	0049      	lsls	r1, r1, #1
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212a:	f7fe fdfb 	bl	8000d24 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	e008      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fdf6 	bl	8000d24 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e097      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4013      	ands	r3, r2
 8002150:	d0f0      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	23c0      	movs	r3, #192	; 0xc0
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d034      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	23c0      	movs	r3, #192	; 0xc0
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4013      	ands	r3, r2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d02c      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a43      	ldr	r2, [pc, #268]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0249      	lsls	r1, r1, #9
 8002188:	430a      	orrs	r2, r1
 800218a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002192:	493e      	ldr	r1, [pc, #248]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002194:	400a      	ands	r2, r1
 8002196:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe fdbd 	bl	8000d24 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	e009      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe fdb8 	bl	8000d24 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	4a35      	ldr	r2, [pc, #212]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e058      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	2202      	movs	r2, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e2:	2317      	movs	r3, #23
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021f2:	4928      	ldr	r1, [pc, #160]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	2203      	movs	r2, #3
 8002208:	4393      	bics	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002212:	430a      	orrs	r2, r1
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2220      	movs	r2, #32
 800221c:	4013      	ands	r3, r2
 800221e:	d009      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	2210      	movs	r2, #16
 8002226:	4393      	bics	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002230:	430a      	orrs	r2, r1
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	4013      	ands	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	4393      	bics	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002250:	430a      	orrs	r2, r1
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	4393      	bics	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002270:	430a      	orrs	r2, r1
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b006      	add	sp, #24
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	fffffcff 	.word	0xfffffcff
 800228c:	fffeffff 	.word	0xfffeffff
 8002290:	00001388 	.word	0x00001388
 8002294:	efffffff 	.word	0xefffffff

08002298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0a8      	b.n	80023fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2382      	movs	r3, #130	; 0x82
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d009      	beq.n	80022d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	61da      	str	r2, [r3, #28]
 80022c4:	e005      	b.n	80022d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	225d      	movs	r2, #93	; 0x5d
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	225c      	movs	r2, #92	; 0x5c
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fe fb50 	bl	8000994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	225d      	movs	r2, #93	; 0x5d
 80022f8:	2102      	movs	r1, #2
 80022fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	438a      	bics	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23e0      	movs	r3, #224	; 0xe0
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	429a      	cmp	r2, r3
 8002316:	d902      	bls.n	800231e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e002      	b.n	8002324 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	23f0      	movs	r3, #240	; 0xf0
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	429a      	cmp	r2, r3
 800232e:	d008      	beq.n	8002342 <HAL_SPI_Init+0xaa>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	23e0      	movs	r3, #224	; 0xe0
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	429a      	cmp	r2, r3
 800233a:	d002      	beq.n	8002342 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	2382      	movs	r3, #130	; 0x82
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	401a      	ands	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	2384      	movs	r3, #132	; 0x84
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	400b      	ands	r3, r1
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2102      	movs	r1, #2
 800235e:	400b      	ands	r3, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2101      	movs	r1, #1
 8002368:	400b      	ands	r3, r1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6999      	ldr	r1, [r3, #24]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	400b      	ands	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2138      	movs	r1, #56	; 0x38
 800237e:	400b      	ands	r3, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	400b      	ands	r3, r1
 800238a:	431a      	orrs	r2, r3
 800238c:	0011      	movs	r1, r2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	2204      	movs	r2, #4
 80023a8:	401a      	ands	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2110      	movs	r1, #16
 80023b0:	400b      	ands	r3, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	2108      	movs	r1, #8
 80023ba:	400b      	ands	r3, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68d9      	ldr	r1, [r3, #12]
 80023c2:	23f0      	movs	r3, #240	; 0xf0
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	400b      	ands	r3, r1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	0011      	movs	r1, r2
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	401a      	ands	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4907      	ldr	r1, [pc, #28]	; (8002404 <HAL_SPI_Init+0x16c>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	225d      	movs	r2, #93	; 0x5d
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}
 8002404:	fffff7ff 	.word	0xfffff7ff

08002408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e044      	b.n	80024a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2278      	movs	r2, #120	; 0x78
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe fb53 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2224      	movs	r2, #36	; 0x24
 8002436:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f830 	bl	80024b0 <UART_SetConfig>
 8002450:	0003      	movs	r3, r0
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e024      	b.n	80024a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f963 	bl	8002730 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	490d      	ldr	r1, [pc, #52]	; (80024ac <HAL_UART_Init+0xa4>)
 8002476:	400a      	ands	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	212a      	movs	r1, #42	; 0x2a
 8002486:	438a      	bics	r2, r1
 8002488:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2101      	movs	r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 f9fb 	bl	8002898 <UART_CheckIdleState>
 80024a2:	0003      	movs	r3, r0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	ffffb7ff 	.word	0xffffb7ff

080024b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024b8:	231e      	movs	r3, #30
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a8d      	ldr	r2, [pc, #564]	; (8002714 <UART_SetConfig+0x264>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a88      	ldr	r2, [pc, #544]	; (8002718 <UART_SetConfig+0x268>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a7f      	ldr	r2, [pc, #508]	; (800271c <UART_SetConfig+0x26c>)
 800251e:	4013      	ands	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7b      	ldr	r2, [pc, #492]	; (8002720 <UART_SetConfig+0x270>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d127      	bne.n	8002586 <UART_SetConfig+0xd6>
 8002536:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <UART_SetConfig+0x274>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	2203      	movs	r2, #3
 800253c:	4013      	ands	r3, r2
 800253e:	2b03      	cmp	r3, #3
 8002540:	d00d      	beq.n	800255e <UART_SetConfig+0xae>
 8002542:	d81b      	bhi.n	800257c <UART_SetConfig+0xcc>
 8002544:	2b02      	cmp	r3, #2
 8002546:	d014      	beq.n	8002572 <UART_SetConfig+0xc2>
 8002548:	d818      	bhi.n	800257c <UART_SetConfig+0xcc>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <UART_SetConfig+0xa4>
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00a      	beq.n	8002568 <UART_SetConfig+0xb8>
 8002552:	e013      	b.n	800257c <UART_SetConfig+0xcc>
 8002554:	231f      	movs	r3, #31
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e021      	b.n	80025a2 <UART_SetConfig+0xf2>
 800255e:	231f      	movs	r3, #31
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2202      	movs	r2, #2
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e01c      	b.n	80025a2 <UART_SetConfig+0xf2>
 8002568:	231f      	movs	r3, #31
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2204      	movs	r2, #4
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	e017      	b.n	80025a2 <UART_SetConfig+0xf2>
 8002572:	231f      	movs	r3, #31
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2208      	movs	r2, #8
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e012      	b.n	80025a2 <UART_SetConfig+0xf2>
 800257c:	231f      	movs	r3, #31
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2210      	movs	r2, #16
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e00d      	b.n	80025a2 <UART_SetConfig+0xf2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a67      	ldr	r2, [pc, #412]	; (8002728 <UART_SetConfig+0x278>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d104      	bne.n	800259a <UART_SetConfig+0xea>
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e003      	b.n	80025a2 <UART_SetConfig+0xf2>
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2210      	movs	r2, #16
 80025a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d15c      	bne.n	8002668 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d015      	beq.n	80025e4 <UART_SetConfig+0x134>
 80025b8:	dc18      	bgt.n	80025ec <UART_SetConfig+0x13c>
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d00d      	beq.n	80025da <UART_SetConfig+0x12a>
 80025be:	dc15      	bgt.n	80025ec <UART_SetConfig+0x13c>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <UART_SetConfig+0x11a>
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d005      	beq.n	80025d4 <UART_SetConfig+0x124>
 80025c8:	e010      	b.n	80025ec <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fd61 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 80025ce:	0003      	movs	r3, r0
 80025d0:	61bb      	str	r3, [r7, #24]
        break;
 80025d2:	e012      	b.n	80025fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <UART_SetConfig+0x27c>)
 80025d6:	61bb      	str	r3, [r7, #24]
        break;
 80025d8:	e00f      	b.n	80025fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025da:	f7ff fcdd 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 80025de:	0003      	movs	r3, r0
 80025e0:	61bb      	str	r3, [r7, #24]
        break;
 80025e2:	e00a      	b.n	80025fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	61bb      	str	r3, [r7, #24]
        break;
 80025ea:	e006      	b.n	80025fa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025f0:	231e      	movs	r3, #30
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
        break;
 80025f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d100      	bne.n	8002602 <UART_SetConfig+0x152>
 8002600:	e07a      	b.n	80026f8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	005a      	lsls	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	18d2      	adds	r2, r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f7fd fd77 	bl	8000108 <__udivsi3>
 800261a:	0003      	movs	r3, r0
 800261c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d91c      	bls.n	800265e <UART_SetConfig+0x1ae>
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	025b      	lsls	r3, r3, #9
 800262a:	429a      	cmp	r2, r3
 800262c:	d217      	bcs.n	800265e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	b29a      	uxth	r2, r3
 8002632:	200e      	movs	r0, #14
 8002634:	183b      	adds	r3, r7, r0
 8002636:	210f      	movs	r1, #15
 8002638:	438a      	bics	r2, r1
 800263a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	085b      	lsrs	r3, r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	2207      	movs	r2, #7
 8002644:	4013      	ands	r3, r2
 8002646:	b299      	uxth	r1, r3
 8002648:	183b      	adds	r3, r7, r0
 800264a:	183a      	adds	r2, r7, r0
 800264c:	8812      	ldrh	r2, [r2, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	183a      	adds	r2, r7, r0
 8002658:	8812      	ldrh	r2, [r2, #0]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	e04c      	b.n	80026f8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800265e:	231e      	movs	r3, #30
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e047      	b.n	80026f8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002668:	231f      	movs	r3, #31
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d015      	beq.n	800269e <UART_SetConfig+0x1ee>
 8002672:	dc18      	bgt.n	80026a6 <UART_SetConfig+0x1f6>
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00d      	beq.n	8002694 <UART_SetConfig+0x1e4>
 8002678:	dc15      	bgt.n	80026a6 <UART_SetConfig+0x1f6>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <UART_SetConfig+0x1d4>
 800267e:	2b02      	cmp	r3, #2
 8002680:	d005      	beq.n	800268e <UART_SetConfig+0x1de>
 8002682:	e010      	b.n	80026a6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002684:	f7ff fd04 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002688:	0003      	movs	r3, r0
 800268a:	61bb      	str	r3, [r7, #24]
        break;
 800268c:	e012      	b.n	80026b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800268e:	4b27      	ldr	r3, [pc, #156]	; (800272c <UART_SetConfig+0x27c>)
 8002690:	61bb      	str	r3, [r7, #24]
        break;
 8002692:	e00f      	b.n	80026b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002694:	f7ff fc80 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8002698:	0003      	movs	r3, r0
 800269a:	61bb      	str	r3, [r7, #24]
        break;
 800269c:	e00a      	b.n	80026b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	61bb      	str	r3, [r7, #24]
        break;
 80026a4:	e006      	b.n	80026b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026aa:	231e      	movs	r3, #30
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
        break;
 80026b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01e      	beq.n	80026f8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	085a      	lsrs	r2, r3, #1
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	18d2      	adds	r2, r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	0019      	movs	r1, r3
 80026ca:	0010      	movs	r0, r2
 80026cc:	f7fd fd1c 	bl	8000108 <__udivsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d90a      	bls.n	80026f0 <UART_SetConfig+0x240>
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d205      	bcs.n	80026f0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	e003      	b.n	80026f8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80026f0:	231e      	movs	r3, #30
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002704:	231e      	movs	r3, #30
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b008      	add	sp, #32
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	efff69f3 	.word	0xefff69f3
 8002718:	ffffcfff 	.word	0xffffcfff
 800271c:	fffff4ff 	.word	0xfffff4ff
 8002720:	40013800 	.word	0x40013800
 8002724:	40021000 	.word	0x40021000
 8002728:	40004400 	.word	0x40004400
 800272c:	007a1200 	.word	0x007a1200

08002730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d00b      	beq.n	800275a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a4a      	ldr	r2, [pc, #296]	; (8002874 <UART_AdvFeatureConfig+0x144>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d00b      	beq.n	800277c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a43      	ldr	r2, [pc, #268]	; (8002878 <UART_AdvFeatureConfig+0x148>)
 800276c:	4013      	ands	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2204      	movs	r2, #4
 8002782:	4013      	ands	r3, r2
 8002784:	d00b      	beq.n	800279e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a3b      	ldr	r2, [pc, #236]	; (800287c <UART_AdvFeatureConfig+0x14c>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2208      	movs	r2, #8
 80027a4:	4013      	ands	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a34      	ldr	r2, [pc, #208]	; (8002880 <UART_AdvFeatureConfig+0x150>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	2210      	movs	r2, #16
 80027c6:	4013      	ands	r3, r2
 80027c8:	d00b      	beq.n	80027e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <UART_AdvFeatureConfig+0x154>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2220      	movs	r2, #32
 80027e8:	4013      	ands	r3, r2
 80027ea:	d00b      	beq.n	8002804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4a25      	ldr	r2, [pc, #148]	; (8002888 <UART_AdvFeatureConfig+0x158>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	4013      	ands	r3, r2
 800280c:	d01d      	beq.n	800284a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <UART_AdvFeatureConfig+0x15c>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	035b      	lsls	r3, r3, #13
 800282e:	429a      	cmp	r2, r3
 8002830:	d10b      	bne.n	800284a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <UART_AdvFeatureConfig+0x160>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	4013      	ands	r3, r2
 8002852:	d00b      	beq.n	800286c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <UART_AdvFeatureConfig+0x164>)
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
  }
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}
 8002874:	fffdffff 	.word	0xfffdffff
 8002878:	fffeffff 	.word	0xfffeffff
 800287c:	fffbffff 	.word	0xfffbffff
 8002880:	ffff7fff 	.word	0xffff7fff
 8002884:	ffffefff 	.word	0xffffefff
 8002888:	ffffdfff 	.word	0xffffdfff
 800288c:	ffefffff 	.word	0xffefffff
 8002890:	ff9fffff 	.word	0xff9fffff
 8002894:	fff7ffff 	.word	0xfff7ffff

08002898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b092      	sub	sp, #72	; 0x48
 800289c:	af02      	add	r7, sp, #8
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2284      	movs	r2, #132	; 0x84
 80028a4:	2100      	movs	r1, #0
 80028a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028a8:	f7fe fa3c 	bl	8000d24 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2208      	movs	r2, #8
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d12c      	bne.n	8002918 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	0391      	lsls	r1, r2, #14
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4a46      	ldr	r2, [pc, #280]	; (80029e0 <UART_CheckIdleState+0x148>)
 80028c8:	9200      	str	r2, [sp, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f000 f88c 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d021      	beq.n	8002918 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d4:	f3ef 8310 	mrs	r3, PRIMASK
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80028de:	2301      	movs	r3, #1
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	438a      	bics	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	f383 8810 	msr	PRIMASK, r3
}
 8002904:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2278      	movs	r2, #120	; 0x78
 8002910:	2100      	movs	r1, #0
 8002912:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e05f      	b.n	80029d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2204      	movs	r2, #4
 8002920:	4013      	ands	r3, r2
 8002922:	2b04      	cmp	r3, #4
 8002924:	d146      	bne.n	80029b4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	03d1      	lsls	r1, r2, #15
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4a2c      	ldr	r2, [pc, #176]	; (80029e0 <UART_CheckIdleState+0x148>)
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	f000 f858 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d03b      	beq.n	80029b4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293c:	f3ef 8310 	mrs	r3, PRIMASK
 8002940:	60fb      	str	r3, [r7, #12]
  return(result);
 8002942:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	2301      	movs	r3, #1
 8002948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f383 8810 	msr	PRIMASK, r3
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4921      	ldr	r1, [pc, #132]	; (80029e4 <UART_CheckIdleState+0x14c>)
 800295e:	400a      	ands	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f383 8810 	msr	PRIMASK, r3
}
 800296c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296e:	f3ef 8310 	mrs	r3, PRIMASK
 8002972:	61bb      	str	r3, [r7, #24]
  return(result);
 8002974:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
 8002978:	2301      	movs	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f383 8810 	msr	PRIMASK, r3
}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	438a      	bics	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f383 8810 	msr	PRIMASK, r3
}
 800299e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	2120      	movs	r1, #32
 80029a6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2278      	movs	r2, #120	; 0x78
 80029ac:	2100      	movs	r1, #0
 80029ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e011      	b.n	80029d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	2120      	movs	r1, #32
 80029c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2278      	movs	r2, #120	; 0x78
 80029d2:	2100      	movs	r1, #0
 80029d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b010      	add	sp, #64	; 0x40
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	01ffffff 	.word	0x01ffffff
 80029e4:	fffffedf 	.word	0xfffffedf

080029e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f8:	e04b      	b.n	8002a92 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	3301      	adds	r3, #1
 80029fe:	d048      	beq.n	8002a92 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a00:	f7fe f990 	bl	8000d24 <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d302      	bcc.n	8002a16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04b      	b.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2204      	movs	r2, #4
 8002a22:	4013      	ands	r3, r2
 8002a24:	d035      	beq.n	8002a92 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d111      	bne.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2208      	movs	r2, #8
 8002a3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f83c 	bl	8002abc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2284      	movs	r2, #132	; 0x84
 8002a48:	2108      	movs	r1, #8
 8002a4a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2278      	movs	r2, #120	; 0x78
 8002a50:	2100      	movs	r1, #0
 8002a52:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e02c      	b.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	401a      	ands	r2, r3
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d112      	bne.n	8002a92 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 f81f 	bl	8002abc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2284      	movs	r2, #132	; 0x84
 8002a82:	2120      	movs	r1, #32
 8002a84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2278      	movs	r2, #120	; 0x78
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e00f      	b.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	425a      	negs	r2, r3
 8002aa2:	4153      	adcs	r3, r2
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d0a4      	beq.n	80029fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b004      	add	sp, #16
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08e      	sub	sp, #56	; 0x38
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac8:	617b      	str	r3, [r7, #20]
  return(result);
 8002aca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f383 8810 	msr	PRIMASK, r3
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4926      	ldr	r1, [pc, #152]	; (8002b80 <UART_EndRxTransfer+0xc4>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f383 8810 	msr	PRIMASK, r3
}
 8002af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af6:	f3ef 8310 	mrs	r3, PRIMASK
 8002afa:	623b      	str	r3, [r7, #32]
  return(result);
 8002afc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
 8002b00:	2301      	movs	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	f383 8810 	msr	PRIMASK, r3
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2101      	movs	r1, #1
 8002b18:	438a      	bics	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d118      	bne.n	8002b62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b30:	f3ef 8310 	mrs	r3, PRIMASK
 8002b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f383 8810 	msr	PRIMASK, r3
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2110      	movs	r1, #16
 8002b52:	438a      	bics	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f383 8810 	msr	PRIMASK, r3
}
 8002b60:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	2120      	movs	r1, #32
 8002b68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b00e      	add	sp, #56	; 0x38
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	fffffedf 	.word	0xfffffedf

08002b84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <USB_DisableGlobalInt+0x30>)
 8002b8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	5a9b      	ldrh	r3, [r3, r2]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	b292      	uxth	r2, r2
 8002b9c:	43d2      	mvns	r2, r2
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b299      	uxth	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2240      	movs	r2, #64	; 0x40
 8002ba8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b004      	add	sp, #16
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	0000bf80 	.word	0x0000bf80

08002bb8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002bb8:	b084      	sub	sp, #16
 8002bba:	b590      	push	{r4, r7, lr}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	2004      	movs	r0, #4
 8002bc4:	2410      	movs	r4, #16
 8002bc6:	1900      	adds	r0, r0, r4
 8002bc8:	2408      	movs	r4, #8
 8002bca:	46a4      	mov	ip, r4
 8002bcc:	44bc      	add	ip, r7
 8002bce:	4460      	add	r0, ip
 8002bd0:	6001      	str	r1, [r0, #0]
 8002bd2:	6042      	str	r2, [r0, #4]
 8002bd4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2240      	movs	r2, #64	; 0x40
 8002be2:	2100      	movs	r1, #0
 8002be4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2244      	movs	r2, #68	; 0x44
 8002bea:	2100      	movs	r1, #0
 8002bec:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2250      	movs	r2, #80	; 0x50
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b003      	add	sp, #12
 8002bfe:	bc90      	pop	{r4, r7}
 8002c00:	bc08      	pop	{r3}
 8002c02:	b004      	add	sp, #16
 8002c04:	4718      	bx	r3
	...

08002c08 <__libc_init_array>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	4d0c      	ldr	r5, [pc, #48]	; (8002c40 <__libc_init_array+0x38>)
 8002c0e:	4c0d      	ldr	r4, [pc, #52]	; (8002c44 <__libc_init_array+0x3c>)
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	42a6      	cmp	r6, r4
 8002c16:	d109      	bne.n	8002c2c <__libc_init_array+0x24>
 8002c18:	2600      	movs	r6, #0
 8002c1a:	f000 f821 	bl	8002c60 <_init>
 8002c1e:	4d0a      	ldr	r5, [pc, #40]	; (8002c48 <__libc_init_array+0x40>)
 8002c20:	4c0a      	ldr	r4, [pc, #40]	; (8002c4c <__libc_init_array+0x44>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	42a6      	cmp	r6, r4
 8002c28:	d105      	bne.n	8002c36 <__libc_init_array+0x2e>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	00b3      	lsls	r3, r6, #2
 8002c2e:	58eb      	ldr	r3, [r5, r3]
 8002c30:	4798      	blx	r3
 8002c32:	3601      	adds	r6, #1
 8002c34:	e7ee      	b.n	8002c14 <__libc_init_array+0xc>
 8002c36:	00b3      	lsls	r3, r6, #2
 8002c38:	58eb      	ldr	r3, [r5, r3]
 8002c3a:	4798      	blx	r3
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	e7f2      	b.n	8002c26 <__libc_init_array+0x1e>
 8002c40:	08002cb0 	.word	0x08002cb0
 8002c44:	08002cb0 	.word	0x08002cb0
 8002c48:	08002cb0 	.word	0x08002cb0
 8002c4c:	08002cb4 	.word	0x08002cb4

08002c50 <memset>:
 8002c50:	0003      	movs	r3, r0
 8002c52:	1882      	adds	r2, r0, r2
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d100      	bne.n	8002c5a <memset+0xa>
 8002c58:	4770      	bx	lr
 8002c5a:	7019      	strb	r1, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	e7f9      	b.n	8002c54 <memset+0x4>

08002c60 <_init>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c66:	bc08      	pop	{r3}
 8002c68:	469e      	mov	lr, r3
 8002c6a:	4770      	bx	lr

08002c6c <_fini>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr
