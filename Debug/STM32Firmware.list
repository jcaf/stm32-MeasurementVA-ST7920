
STM32Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004748  08004748  00014748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004884  08004884  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004884  08004884  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004884  08004884  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800488c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000010  08004898  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08004898  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019695  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337d  00000000  00000000  000396c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000faa5  00000000  00000000  0003ca46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0004c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001af0  00000000  00000000  0004d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001937d  00000000  00000000  0004ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001acc0  00000000  00000000  0006805d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090956  00000000  00000000  00082d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113673  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002978  00000000  00000000  001136c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800472c 	.word	0x0800472c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800472c 	.word	0x0800472c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 fda9 	bl	8000f70 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fcf9 	bl	8000e20 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fd9b 	bl	8000f70 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fd91 	bl	8000f70 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fd21 	bl	8000ea4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 fd17 	bl	8000ea4 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_d2uiz>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	2200      	movs	r2, #0
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <__aeabi_d2uiz+0x38>)
 800048a:	0004      	movs	r4, r0
 800048c:	000d      	movs	r5, r1
 800048e:	f7ff ffef 	bl	8000470 <__aeabi_dcmpge>
 8000492:	2800      	cmp	r0, #0
 8000494:	d104      	bne.n	80004a0 <__aeabi_d2uiz+0x1c>
 8000496:	0020      	movs	r0, r4
 8000498:	0029      	movs	r1, r5
 800049a:	f001 fbcb 	bl	8001c34 <__aeabi_d2iz>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <__aeabi_d2uiz+0x38>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0020      	movs	r0, r4
 80004a6:	0029      	movs	r1, r5
 80004a8:	f001 f832 	bl	8001510 <__aeabi_dsub>
 80004ac:	f001 fbc2 	bl	8001c34 <__aeabi_d2iz>
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	061b      	lsls	r3, r3, #24
 80004b4:	469c      	mov	ip, r3
 80004b6:	4460      	add	r0, ip
 80004b8:	e7f1      	b.n	800049e <__aeabi_d2uiz+0x1a>
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	41e00000 	.word	0x41e00000

080004c0 <__aeabi_fmul>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	464f      	mov	r7, r9
 80004c4:	4646      	mov	r6, r8
 80004c6:	46d6      	mov	lr, sl
 80004c8:	0244      	lsls	r4, r0, #9
 80004ca:	0045      	lsls	r5, r0, #1
 80004cc:	b5c0      	push	{r6, r7, lr}
 80004ce:	0a64      	lsrs	r4, r4, #9
 80004d0:	1c0f      	adds	r7, r1, #0
 80004d2:	0e2d      	lsrs	r5, r5, #24
 80004d4:	0fc6      	lsrs	r6, r0, #31
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_fmul+0x1c>
 80004da:	e08d      	b.n	80005f8 <__aeabi_fmul+0x138>
 80004dc:	2dff      	cmp	r5, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fmul+0x22>
 80004e0:	e092      	b.n	8000608 <__aeabi_fmul+0x148>
 80004e2:	2300      	movs	r3, #0
 80004e4:	2080      	movs	r0, #128	; 0x80
 80004e6:	4699      	mov	r9, r3
 80004e8:	469a      	mov	sl, r3
 80004ea:	00e4      	lsls	r4, r4, #3
 80004ec:	04c0      	lsls	r0, r0, #19
 80004ee:	4304      	orrs	r4, r0
 80004f0:	3d7f      	subs	r5, #127	; 0x7f
 80004f2:	0278      	lsls	r0, r7, #9
 80004f4:	0a43      	lsrs	r3, r0, #9
 80004f6:	4698      	mov	r8, r3
 80004f8:	007b      	lsls	r3, r7, #1
 80004fa:	0e1b      	lsrs	r3, r3, #24
 80004fc:	0fff      	lsrs	r7, r7, #31
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d100      	bne.n	8000504 <__aeabi_fmul+0x44>
 8000502:	e070      	b.n	80005e6 <__aeabi_fmul+0x126>
 8000504:	2bff      	cmp	r3, #255	; 0xff
 8000506:	d100      	bne.n	800050a <__aeabi_fmul+0x4a>
 8000508:	e086      	b.n	8000618 <__aeabi_fmul+0x158>
 800050a:	4642      	mov	r2, r8
 800050c:	00d0      	lsls	r0, r2, #3
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	3b7f      	subs	r3, #127	; 0x7f
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	2300      	movs	r3, #0
 8000516:	04d2      	lsls	r2, r2, #19
 8000518:	4302      	orrs	r2, r0
 800051a:	4690      	mov	r8, r2
 800051c:	469c      	mov	ip, r3
 800051e:	0031      	movs	r1, r6
 8000520:	464b      	mov	r3, r9
 8000522:	4079      	eors	r1, r7
 8000524:	1c68      	adds	r0, r5, #1
 8000526:	2b0f      	cmp	r3, #15
 8000528:	d81c      	bhi.n	8000564 <__aeabi_fmul+0xa4>
 800052a:	4a76      	ldr	r2, [pc, #472]	; (8000704 <__aeabi_fmul+0x244>)
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	58d3      	ldr	r3, [r2, r3]
 8000530:	469f      	mov	pc, r3
 8000532:	0039      	movs	r1, r7
 8000534:	4644      	mov	r4, r8
 8000536:	46e2      	mov	sl, ip
 8000538:	4653      	mov	r3, sl
 800053a:	2b02      	cmp	r3, #2
 800053c:	d00f      	beq.n	800055e <__aeabi_fmul+0x9e>
 800053e:	2b03      	cmp	r3, #3
 8000540:	d100      	bne.n	8000544 <__aeabi_fmul+0x84>
 8000542:	e0d7      	b.n	80006f4 <__aeabi_fmul+0x234>
 8000544:	2b01      	cmp	r3, #1
 8000546:	d137      	bne.n	80005b8 <__aeabi_fmul+0xf8>
 8000548:	2000      	movs	r0, #0
 800054a:	2400      	movs	r4, #0
 800054c:	05c0      	lsls	r0, r0, #23
 800054e:	4320      	orrs	r0, r4
 8000550:	07c9      	lsls	r1, r1, #31
 8000552:	4308      	orrs	r0, r1
 8000554:	bce0      	pop	{r5, r6, r7}
 8000556:	46ba      	mov	sl, r7
 8000558:	46b1      	mov	r9, r6
 800055a:	46a8      	mov	r8, r5
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	20ff      	movs	r0, #255	; 0xff
 8000560:	2400      	movs	r4, #0
 8000562:	e7f3      	b.n	800054c <__aeabi_fmul+0x8c>
 8000564:	0c26      	lsrs	r6, r4, #16
 8000566:	0424      	lsls	r4, r4, #16
 8000568:	0c22      	lsrs	r2, r4, #16
 800056a:	4644      	mov	r4, r8
 800056c:	0424      	lsls	r4, r4, #16
 800056e:	0c24      	lsrs	r4, r4, #16
 8000570:	4643      	mov	r3, r8
 8000572:	0027      	movs	r7, r4
 8000574:	0c1b      	lsrs	r3, r3, #16
 8000576:	4357      	muls	r7, r2
 8000578:	4374      	muls	r4, r6
 800057a:	435a      	muls	r2, r3
 800057c:	435e      	muls	r6, r3
 800057e:	1912      	adds	r2, r2, r4
 8000580:	0c3b      	lsrs	r3, r7, #16
 8000582:	189b      	adds	r3, r3, r2
 8000584:	429c      	cmp	r4, r3
 8000586:	d903      	bls.n	8000590 <__aeabi_fmul+0xd0>
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	0252      	lsls	r2, r2, #9
 800058c:	4694      	mov	ip, r2
 800058e:	4466      	add	r6, ip
 8000590:	043f      	lsls	r7, r7, #16
 8000592:	041a      	lsls	r2, r3, #16
 8000594:	0c3f      	lsrs	r7, r7, #16
 8000596:	19d2      	adds	r2, r2, r7
 8000598:	0194      	lsls	r4, r2, #6
 800059a:	1e67      	subs	r7, r4, #1
 800059c:	41bc      	sbcs	r4, r7
 800059e:	0c1b      	lsrs	r3, r3, #16
 80005a0:	0e92      	lsrs	r2, r2, #26
 80005a2:	199b      	adds	r3, r3, r6
 80005a4:	4314      	orrs	r4, r2
 80005a6:	019b      	lsls	r3, r3, #6
 80005a8:	431c      	orrs	r4, r3
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	d400      	bmi.n	80005b0 <__aeabi_fmul+0xf0>
 80005ae:	e09b      	b.n	80006e8 <__aeabi_fmul+0x228>
 80005b0:	2301      	movs	r3, #1
 80005b2:	0862      	lsrs	r2, r4, #1
 80005b4:	401c      	ands	r4, r3
 80005b6:	4314      	orrs	r4, r2
 80005b8:	0002      	movs	r2, r0
 80005ba:	327f      	adds	r2, #127	; 0x7f
 80005bc:	2a00      	cmp	r2, #0
 80005be:	dd64      	ble.n	800068a <__aeabi_fmul+0x1ca>
 80005c0:	0763      	lsls	r3, r4, #29
 80005c2:	d004      	beq.n	80005ce <__aeabi_fmul+0x10e>
 80005c4:	230f      	movs	r3, #15
 80005c6:	4023      	ands	r3, r4
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d000      	beq.n	80005ce <__aeabi_fmul+0x10e>
 80005cc:	3404      	adds	r4, #4
 80005ce:	0123      	lsls	r3, r4, #4
 80005d0:	d503      	bpl.n	80005da <__aeabi_fmul+0x11a>
 80005d2:	0002      	movs	r2, r0
 80005d4:	4b4c      	ldr	r3, [pc, #304]	; (8000708 <__aeabi_fmul+0x248>)
 80005d6:	3280      	adds	r2, #128	; 0x80
 80005d8:	401c      	ands	r4, r3
 80005da:	2afe      	cmp	r2, #254	; 0xfe
 80005dc:	dcbf      	bgt.n	800055e <__aeabi_fmul+0x9e>
 80005de:	01a4      	lsls	r4, r4, #6
 80005e0:	0a64      	lsrs	r4, r4, #9
 80005e2:	b2d0      	uxtb	r0, r2
 80005e4:	e7b2      	b.n	800054c <__aeabi_fmul+0x8c>
 80005e6:	4643      	mov	r3, r8
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d13d      	bne.n	8000668 <__aeabi_fmul+0x1a8>
 80005ec:	464a      	mov	r2, r9
 80005ee:	3301      	adds	r3, #1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4691      	mov	r9, r2
 80005f4:	469c      	mov	ip, r3
 80005f6:	e792      	b.n	800051e <__aeabi_fmul+0x5e>
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d129      	bne.n	8000650 <__aeabi_fmul+0x190>
 80005fc:	2304      	movs	r3, #4
 80005fe:	4699      	mov	r9, r3
 8000600:	3b03      	subs	r3, #3
 8000602:	2500      	movs	r5, #0
 8000604:	469a      	mov	sl, r3
 8000606:	e774      	b.n	80004f2 <__aeabi_fmul+0x32>
 8000608:	2c00      	cmp	r4, #0
 800060a:	d11b      	bne.n	8000644 <__aeabi_fmul+0x184>
 800060c:	2308      	movs	r3, #8
 800060e:	4699      	mov	r9, r3
 8000610:	3b06      	subs	r3, #6
 8000612:	25ff      	movs	r5, #255	; 0xff
 8000614:	469a      	mov	sl, r3
 8000616:	e76c      	b.n	80004f2 <__aeabi_fmul+0x32>
 8000618:	4643      	mov	r3, r8
 800061a:	35ff      	adds	r5, #255	; 0xff
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10b      	bne.n	8000638 <__aeabi_fmul+0x178>
 8000620:	2302      	movs	r3, #2
 8000622:	464a      	mov	r2, r9
 8000624:	431a      	orrs	r2, r3
 8000626:	4691      	mov	r9, r2
 8000628:	469c      	mov	ip, r3
 800062a:	e778      	b.n	800051e <__aeabi_fmul+0x5e>
 800062c:	4653      	mov	r3, sl
 800062e:	0031      	movs	r1, r6
 8000630:	2b02      	cmp	r3, #2
 8000632:	d000      	beq.n	8000636 <__aeabi_fmul+0x176>
 8000634:	e783      	b.n	800053e <__aeabi_fmul+0x7e>
 8000636:	e792      	b.n	800055e <__aeabi_fmul+0x9e>
 8000638:	2303      	movs	r3, #3
 800063a:	464a      	mov	r2, r9
 800063c:	431a      	orrs	r2, r3
 800063e:	4691      	mov	r9, r2
 8000640:	469c      	mov	ip, r3
 8000642:	e76c      	b.n	800051e <__aeabi_fmul+0x5e>
 8000644:	230c      	movs	r3, #12
 8000646:	4699      	mov	r9, r3
 8000648:	3b09      	subs	r3, #9
 800064a:	25ff      	movs	r5, #255	; 0xff
 800064c:	469a      	mov	sl, r3
 800064e:	e750      	b.n	80004f2 <__aeabi_fmul+0x32>
 8000650:	0020      	movs	r0, r4
 8000652:	f001 fb9d 	bl	8001d90 <__clzsi2>
 8000656:	2576      	movs	r5, #118	; 0x76
 8000658:	1f43      	subs	r3, r0, #5
 800065a:	409c      	lsls	r4, r3
 800065c:	2300      	movs	r3, #0
 800065e:	426d      	negs	r5, r5
 8000660:	4699      	mov	r9, r3
 8000662:	469a      	mov	sl, r3
 8000664:	1a2d      	subs	r5, r5, r0
 8000666:	e744      	b.n	80004f2 <__aeabi_fmul+0x32>
 8000668:	4640      	mov	r0, r8
 800066a:	f001 fb91 	bl	8001d90 <__clzsi2>
 800066e:	4642      	mov	r2, r8
 8000670:	1f43      	subs	r3, r0, #5
 8000672:	409a      	lsls	r2, r3
 8000674:	2300      	movs	r3, #0
 8000676:	1a2d      	subs	r5, r5, r0
 8000678:	4690      	mov	r8, r2
 800067a:	469c      	mov	ip, r3
 800067c:	3d76      	subs	r5, #118	; 0x76
 800067e:	e74e      	b.n	800051e <__aeabi_fmul+0x5e>
 8000680:	2480      	movs	r4, #128	; 0x80
 8000682:	2100      	movs	r1, #0
 8000684:	20ff      	movs	r0, #255	; 0xff
 8000686:	03e4      	lsls	r4, r4, #15
 8000688:	e760      	b.n	800054c <__aeabi_fmul+0x8c>
 800068a:	2301      	movs	r3, #1
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	2b1b      	cmp	r3, #27
 8000690:	dd00      	ble.n	8000694 <__aeabi_fmul+0x1d4>
 8000692:	e759      	b.n	8000548 <__aeabi_fmul+0x88>
 8000694:	0022      	movs	r2, r4
 8000696:	309e      	adds	r0, #158	; 0x9e
 8000698:	40da      	lsrs	r2, r3
 800069a:	4084      	lsls	r4, r0
 800069c:	0013      	movs	r3, r2
 800069e:	1e62      	subs	r2, r4, #1
 80006a0:	4194      	sbcs	r4, r2
 80006a2:	431c      	orrs	r4, r3
 80006a4:	0763      	lsls	r3, r4, #29
 80006a6:	d004      	beq.n	80006b2 <__aeabi_fmul+0x1f2>
 80006a8:	230f      	movs	r3, #15
 80006aa:	4023      	ands	r3, r4
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fmul+0x1f2>
 80006b0:	3404      	adds	r4, #4
 80006b2:	0163      	lsls	r3, r4, #5
 80006b4:	d51a      	bpl.n	80006ec <__aeabi_fmul+0x22c>
 80006b6:	2001      	movs	r0, #1
 80006b8:	2400      	movs	r4, #0
 80006ba:	e747      	b.n	800054c <__aeabi_fmul+0x8c>
 80006bc:	2080      	movs	r0, #128	; 0x80
 80006be:	03c0      	lsls	r0, r0, #15
 80006c0:	4204      	tst	r4, r0
 80006c2:	d009      	beq.n	80006d8 <__aeabi_fmul+0x218>
 80006c4:	4643      	mov	r3, r8
 80006c6:	4203      	tst	r3, r0
 80006c8:	d106      	bne.n	80006d8 <__aeabi_fmul+0x218>
 80006ca:	4644      	mov	r4, r8
 80006cc:	4304      	orrs	r4, r0
 80006ce:	0264      	lsls	r4, r4, #9
 80006d0:	0039      	movs	r1, r7
 80006d2:	20ff      	movs	r0, #255	; 0xff
 80006d4:	0a64      	lsrs	r4, r4, #9
 80006d6:	e739      	b.n	800054c <__aeabi_fmul+0x8c>
 80006d8:	2080      	movs	r0, #128	; 0x80
 80006da:	03c0      	lsls	r0, r0, #15
 80006dc:	4304      	orrs	r4, r0
 80006de:	0264      	lsls	r4, r4, #9
 80006e0:	0031      	movs	r1, r6
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	0a64      	lsrs	r4, r4, #9
 80006e6:	e731      	b.n	800054c <__aeabi_fmul+0x8c>
 80006e8:	0028      	movs	r0, r5
 80006ea:	e765      	b.n	80005b8 <__aeabi_fmul+0xf8>
 80006ec:	01a4      	lsls	r4, r4, #6
 80006ee:	2000      	movs	r0, #0
 80006f0:	0a64      	lsrs	r4, r4, #9
 80006f2:	e72b      	b.n	800054c <__aeabi_fmul+0x8c>
 80006f4:	2080      	movs	r0, #128	; 0x80
 80006f6:	03c0      	lsls	r0, r0, #15
 80006f8:	4304      	orrs	r4, r0
 80006fa:	0264      	lsls	r4, r4, #9
 80006fc:	20ff      	movs	r0, #255	; 0xff
 80006fe:	0a64      	lsrs	r4, r4, #9
 8000700:	e724      	b.n	800054c <__aeabi_fmul+0x8c>
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	08004748 	.word	0x08004748
 8000708:	f7ffffff 	.word	0xf7ffffff

0800070c <__aeabi_i2f>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	2800      	cmp	r0, #0
 8000710:	d013      	beq.n	800073a <__aeabi_i2f+0x2e>
 8000712:	17c3      	asrs	r3, r0, #31
 8000714:	18c6      	adds	r6, r0, r3
 8000716:	405e      	eors	r6, r3
 8000718:	0fc4      	lsrs	r4, r0, #31
 800071a:	0030      	movs	r0, r6
 800071c:	f001 fb38 	bl	8001d90 <__clzsi2>
 8000720:	239e      	movs	r3, #158	; 0x9e
 8000722:	0005      	movs	r5, r0
 8000724:	1a1b      	subs	r3, r3, r0
 8000726:	2b96      	cmp	r3, #150	; 0x96
 8000728:	dc0f      	bgt.n	800074a <__aeabi_i2f+0x3e>
 800072a:	2808      	cmp	r0, #8
 800072c:	dd01      	ble.n	8000732 <__aeabi_i2f+0x26>
 800072e:	3d08      	subs	r5, #8
 8000730:	40ae      	lsls	r6, r5
 8000732:	0276      	lsls	r6, r6, #9
 8000734:	0a76      	lsrs	r6, r6, #9
 8000736:	b2d8      	uxtb	r0, r3
 8000738:	e002      	b.n	8000740 <__aeabi_i2f+0x34>
 800073a:	2400      	movs	r4, #0
 800073c:	2000      	movs	r0, #0
 800073e:	2600      	movs	r6, #0
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	4330      	orrs	r0, r6
 8000744:	07e4      	lsls	r4, r4, #31
 8000746:	4320      	orrs	r0, r4
 8000748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800074a:	2b99      	cmp	r3, #153	; 0x99
 800074c:	dd0c      	ble.n	8000768 <__aeabi_i2f+0x5c>
 800074e:	2205      	movs	r2, #5
 8000750:	0031      	movs	r1, r6
 8000752:	1a12      	subs	r2, r2, r0
 8000754:	40d1      	lsrs	r1, r2
 8000756:	000a      	movs	r2, r1
 8000758:	0001      	movs	r1, r0
 800075a:	0030      	movs	r0, r6
 800075c:	311b      	adds	r1, #27
 800075e:	4088      	lsls	r0, r1
 8000760:	1e41      	subs	r1, r0, #1
 8000762:	4188      	sbcs	r0, r1
 8000764:	4302      	orrs	r2, r0
 8000766:	0016      	movs	r6, r2
 8000768:	2d05      	cmp	r5, #5
 800076a:	dc12      	bgt.n	8000792 <__aeabi_i2f+0x86>
 800076c:	0031      	movs	r1, r6
 800076e:	4f0d      	ldr	r7, [pc, #52]	; (80007a4 <__aeabi_i2f+0x98>)
 8000770:	4039      	ands	r1, r7
 8000772:	0772      	lsls	r2, r6, #29
 8000774:	d009      	beq.n	800078a <__aeabi_i2f+0x7e>
 8000776:	200f      	movs	r0, #15
 8000778:	4030      	ands	r0, r6
 800077a:	2804      	cmp	r0, #4
 800077c:	d005      	beq.n	800078a <__aeabi_i2f+0x7e>
 800077e:	3104      	adds	r1, #4
 8000780:	014a      	lsls	r2, r1, #5
 8000782:	d502      	bpl.n	800078a <__aeabi_i2f+0x7e>
 8000784:	239f      	movs	r3, #159	; 0x9f
 8000786:	4039      	ands	r1, r7
 8000788:	1b5b      	subs	r3, r3, r5
 800078a:	0189      	lsls	r1, r1, #6
 800078c:	0a4e      	lsrs	r6, r1, #9
 800078e:	b2d8      	uxtb	r0, r3
 8000790:	e7d6      	b.n	8000740 <__aeabi_i2f+0x34>
 8000792:	1f6a      	subs	r2, r5, #5
 8000794:	4096      	lsls	r6, r2
 8000796:	0031      	movs	r1, r6
 8000798:	4f02      	ldr	r7, [pc, #8]	; (80007a4 <__aeabi_i2f+0x98>)
 800079a:	4039      	ands	r1, r7
 800079c:	0772      	lsls	r2, r6, #29
 800079e:	d0f4      	beq.n	800078a <__aeabi_i2f+0x7e>
 80007a0:	e7e9      	b.n	8000776 <__aeabi_i2f+0x6a>
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	fbffffff 	.word	0xfbffffff

080007a8 <__aeabi_dadd>:
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	464f      	mov	r7, r9
 80007ac:	4646      	mov	r6, r8
 80007ae:	46d6      	mov	lr, sl
 80007b0:	000d      	movs	r5, r1
 80007b2:	0004      	movs	r4, r0
 80007b4:	b5c0      	push	{r6, r7, lr}
 80007b6:	001f      	movs	r7, r3
 80007b8:	0011      	movs	r1, r2
 80007ba:	0328      	lsls	r0, r5, #12
 80007bc:	0f62      	lsrs	r2, r4, #29
 80007be:	0a40      	lsrs	r0, r0, #9
 80007c0:	4310      	orrs	r0, r2
 80007c2:	007a      	lsls	r2, r7, #1
 80007c4:	0d52      	lsrs	r2, r2, #21
 80007c6:	00e3      	lsls	r3, r4, #3
 80007c8:	033c      	lsls	r4, r7, #12
 80007ca:	4691      	mov	r9, r2
 80007cc:	0a64      	lsrs	r4, r4, #9
 80007ce:	0ffa      	lsrs	r2, r7, #31
 80007d0:	0f4f      	lsrs	r7, r1, #29
 80007d2:	006e      	lsls	r6, r5, #1
 80007d4:	4327      	orrs	r7, r4
 80007d6:	4692      	mov	sl, r2
 80007d8:	46b8      	mov	r8, r7
 80007da:	0d76      	lsrs	r6, r6, #21
 80007dc:	0fed      	lsrs	r5, r5, #31
 80007de:	00c9      	lsls	r1, r1, #3
 80007e0:	4295      	cmp	r5, r2
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x3e>
 80007e4:	e099      	b.n	800091a <__aeabi_dadd+0x172>
 80007e6:	464c      	mov	r4, r9
 80007e8:	1b34      	subs	r4, r6, r4
 80007ea:	46a4      	mov	ip, r4
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	dc00      	bgt.n	80007f2 <__aeabi_dadd+0x4a>
 80007f0:	e07c      	b.n	80008ec <__aeabi_dadd+0x144>
 80007f2:	464a      	mov	r2, r9
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x52>
 80007f8:	e0b8      	b.n	800096c <__aeabi_dadd+0x1c4>
 80007fa:	4ac5      	ldr	r2, [pc, #788]	; (8000b10 <__aeabi_dadd+0x368>)
 80007fc:	4296      	cmp	r6, r2
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x5a>
 8000800:	e11c      	b.n	8000a3c <__aeabi_dadd+0x294>
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	003c      	movs	r4, r7
 8000806:	0412      	lsls	r2, r2, #16
 8000808:	4314      	orrs	r4, r2
 800080a:	46a0      	mov	r8, r4
 800080c:	4662      	mov	r2, ip
 800080e:	2a38      	cmp	r2, #56	; 0x38
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0x6c>
 8000812:	e161      	b.n	8000ad8 <__aeabi_dadd+0x330>
 8000814:	2a1f      	cmp	r2, #31
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x72>
 8000818:	e1cc      	b.n	8000bb4 <__aeabi_dadd+0x40c>
 800081a:	4664      	mov	r4, ip
 800081c:	2220      	movs	r2, #32
 800081e:	1b12      	subs	r2, r2, r4
 8000820:	4644      	mov	r4, r8
 8000822:	4094      	lsls	r4, r2
 8000824:	000f      	movs	r7, r1
 8000826:	46a1      	mov	r9, r4
 8000828:	4664      	mov	r4, ip
 800082a:	4091      	lsls	r1, r2
 800082c:	40e7      	lsrs	r7, r4
 800082e:	464c      	mov	r4, r9
 8000830:	1e4a      	subs	r2, r1, #1
 8000832:	4191      	sbcs	r1, r2
 8000834:	433c      	orrs	r4, r7
 8000836:	4642      	mov	r2, r8
 8000838:	4321      	orrs	r1, r4
 800083a:	4664      	mov	r4, ip
 800083c:	40e2      	lsrs	r2, r4
 800083e:	1a80      	subs	r0, r0, r2
 8000840:	1a5c      	subs	r4, r3, r1
 8000842:	42a3      	cmp	r3, r4
 8000844:	419b      	sbcs	r3, r3
 8000846:	425f      	negs	r7, r3
 8000848:	1bc7      	subs	r7, r0, r7
 800084a:	023b      	lsls	r3, r7, #8
 800084c:	d400      	bmi.n	8000850 <__aeabi_dadd+0xa8>
 800084e:	e0d0      	b.n	80009f2 <__aeabi_dadd+0x24a>
 8000850:	027f      	lsls	r7, r7, #9
 8000852:	0a7f      	lsrs	r7, r7, #9
 8000854:	2f00      	cmp	r7, #0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0xb2>
 8000858:	e0ff      	b.n	8000a5a <__aeabi_dadd+0x2b2>
 800085a:	0038      	movs	r0, r7
 800085c:	f001 fa98 	bl	8001d90 <__clzsi2>
 8000860:	0001      	movs	r1, r0
 8000862:	3908      	subs	r1, #8
 8000864:	2320      	movs	r3, #32
 8000866:	0022      	movs	r2, r4
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	408f      	lsls	r7, r1
 800086c:	40da      	lsrs	r2, r3
 800086e:	408c      	lsls	r4, r1
 8000870:	4317      	orrs	r7, r2
 8000872:	42b1      	cmp	r1, r6
 8000874:	da00      	bge.n	8000878 <__aeabi_dadd+0xd0>
 8000876:	e0ff      	b.n	8000a78 <__aeabi_dadd+0x2d0>
 8000878:	1b89      	subs	r1, r1, r6
 800087a:	1c4b      	adds	r3, r1, #1
 800087c:	2b1f      	cmp	r3, #31
 800087e:	dd00      	ble.n	8000882 <__aeabi_dadd+0xda>
 8000880:	e0a8      	b.n	80009d4 <__aeabi_dadd+0x22c>
 8000882:	2220      	movs	r2, #32
 8000884:	0039      	movs	r1, r7
 8000886:	1ad2      	subs	r2, r2, r3
 8000888:	0020      	movs	r0, r4
 800088a:	4094      	lsls	r4, r2
 800088c:	4091      	lsls	r1, r2
 800088e:	40d8      	lsrs	r0, r3
 8000890:	1e62      	subs	r2, r4, #1
 8000892:	4194      	sbcs	r4, r2
 8000894:	40df      	lsrs	r7, r3
 8000896:	2600      	movs	r6, #0
 8000898:	4301      	orrs	r1, r0
 800089a:	430c      	orrs	r4, r1
 800089c:	0763      	lsls	r3, r4, #29
 800089e:	d009      	beq.n	80008b4 <__aeabi_dadd+0x10c>
 80008a0:	230f      	movs	r3, #15
 80008a2:	4023      	ands	r3, r4
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d005      	beq.n	80008b4 <__aeabi_dadd+0x10c>
 80008a8:	1d23      	adds	r3, r4, #4
 80008aa:	42a3      	cmp	r3, r4
 80008ac:	41a4      	sbcs	r4, r4
 80008ae:	4264      	negs	r4, r4
 80008b0:	193f      	adds	r7, r7, r4
 80008b2:	001c      	movs	r4, r3
 80008b4:	023b      	lsls	r3, r7, #8
 80008b6:	d400      	bmi.n	80008ba <__aeabi_dadd+0x112>
 80008b8:	e09e      	b.n	80009f8 <__aeabi_dadd+0x250>
 80008ba:	4b95      	ldr	r3, [pc, #596]	; (8000b10 <__aeabi_dadd+0x368>)
 80008bc:	3601      	adds	r6, #1
 80008be:	429e      	cmp	r6, r3
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x11c>
 80008c2:	e0b7      	b.n	8000a34 <__aeabi_dadd+0x28c>
 80008c4:	4a93      	ldr	r2, [pc, #588]	; (8000b14 <__aeabi_dadd+0x36c>)
 80008c6:	08e4      	lsrs	r4, r4, #3
 80008c8:	4017      	ands	r7, r2
 80008ca:	077b      	lsls	r3, r7, #29
 80008cc:	0571      	lsls	r1, r6, #21
 80008ce:	027f      	lsls	r7, r7, #9
 80008d0:	4323      	orrs	r3, r4
 80008d2:	0b3f      	lsrs	r7, r7, #12
 80008d4:	0d4a      	lsrs	r2, r1, #21
 80008d6:	0512      	lsls	r2, r2, #20
 80008d8:	433a      	orrs	r2, r7
 80008da:	07ed      	lsls	r5, r5, #31
 80008dc:	432a      	orrs	r2, r5
 80008de:	0018      	movs	r0, r3
 80008e0:	0011      	movs	r1, r2
 80008e2:	bce0      	pop	{r5, r6, r7}
 80008e4:	46ba      	mov	sl, r7
 80008e6:	46b1      	mov	r9, r6
 80008e8:	46a8      	mov	r8, r5
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d04b      	beq.n	8000988 <__aeabi_dadd+0x1e0>
 80008f0:	464c      	mov	r4, r9
 80008f2:	1ba4      	subs	r4, r4, r6
 80008f4:	46a4      	mov	ip, r4
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_dadd+0x154>
 80008fa:	e123      	b.n	8000b44 <__aeabi_dadd+0x39c>
 80008fc:	0004      	movs	r4, r0
 80008fe:	431c      	orrs	r4, r3
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x15c>
 8000902:	e1af      	b.n	8000c64 <__aeabi_dadd+0x4bc>
 8000904:	4662      	mov	r2, ip
 8000906:	1e54      	subs	r4, r2, #1
 8000908:	2a01      	cmp	r2, #1
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x166>
 800090c:	e215      	b.n	8000d3a <__aeabi_dadd+0x592>
 800090e:	4d80      	ldr	r5, [pc, #512]	; (8000b10 <__aeabi_dadd+0x368>)
 8000910:	45ac      	cmp	ip, r5
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x16e>
 8000914:	e1c8      	b.n	8000ca8 <__aeabi_dadd+0x500>
 8000916:	46a4      	mov	ip, r4
 8000918:	e11b      	b.n	8000b52 <__aeabi_dadd+0x3aa>
 800091a:	464a      	mov	r2, r9
 800091c:	1ab2      	subs	r2, r6, r2
 800091e:	4694      	mov	ip, r2
 8000920:	2a00      	cmp	r2, #0
 8000922:	dc00      	bgt.n	8000926 <__aeabi_dadd+0x17e>
 8000924:	e0ac      	b.n	8000a80 <__aeabi_dadd+0x2d8>
 8000926:	464a      	mov	r2, r9
 8000928:	2a00      	cmp	r2, #0
 800092a:	d043      	beq.n	80009b4 <__aeabi_dadd+0x20c>
 800092c:	4a78      	ldr	r2, [pc, #480]	; (8000b10 <__aeabi_dadd+0x368>)
 800092e:	4296      	cmp	r6, r2
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x18c>
 8000932:	e1af      	b.n	8000c94 <__aeabi_dadd+0x4ec>
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	003c      	movs	r4, r7
 8000938:	0412      	lsls	r2, r2, #16
 800093a:	4314      	orrs	r4, r2
 800093c:	46a0      	mov	r8, r4
 800093e:	4662      	mov	r2, ip
 8000940:	2a38      	cmp	r2, #56	; 0x38
 8000942:	dc67      	bgt.n	8000a14 <__aeabi_dadd+0x26c>
 8000944:	2a1f      	cmp	r2, #31
 8000946:	dc00      	bgt.n	800094a <__aeabi_dadd+0x1a2>
 8000948:	e15f      	b.n	8000c0a <__aeabi_dadd+0x462>
 800094a:	4647      	mov	r7, r8
 800094c:	3a20      	subs	r2, #32
 800094e:	40d7      	lsrs	r7, r2
 8000950:	4662      	mov	r2, ip
 8000952:	2a20      	cmp	r2, #32
 8000954:	d005      	beq.n	8000962 <__aeabi_dadd+0x1ba>
 8000956:	4664      	mov	r4, ip
 8000958:	2240      	movs	r2, #64	; 0x40
 800095a:	1b12      	subs	r2, r2, r4
 800095c:	4644      	mov	r4, r8
 800095e:	4094      	lsls	r4, r2
 8000960:	4321      	orrs	r1, r4
 8000962:	1e4a      	subs	r2, r1, #1
 8000964:	4191      	sbcs	r1, r2
 8000966:	000c      	movs	r4, r1
 8000968:	433c      	orrs	r4, r7
 800096a:	e057      	b.n	8000a1c <__aeabi_dadd+0x274>
 800096c:	003a      	movs	r2, r7
 800096e:	430a      	orrs	r2, r1
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x1cc>
 8000972:	e105      	b.n	8000b80 <__aeabi_dadd+0x3d8>
 8000974:	0022      	movs	r2, r4
 8000976:	3a01      	subs	r2, #1
 8000978:	2c01      	cmp	r4, #1
 800097a:	d100      	bne.n	800097e <__aeabi_dadd+0x1d6>
 800097c:	e182      	b.n	8000c84 <__aeabi_dadd+0x4dc>
 800097e:	4c64      	ldr	r4, [pc, #400]	; (8000b10 <__aeabi_dadd+0x368>)
 8000980:	45a4      	cmp	ip, r4
 8000982:	d05b      	beq.n	8000a3c <__aeabi_dadd+0x294>
 8000984:	4694      	mov	ip, r2
 8000986:	e741      	b.n	800080c <__aeabi_dadd+0x64>
 8000988:	4c63      	ldr	r4, [pc, #396]	; (8000b18 <__aeabi_dadd+0x370>)
 800098a:	1c77      	adds	r7, r6, #1
 800098c:	4227      	tst	r7, r4
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x1ea>
 8000990:	e0c4      	b.n	8000b1c <__aeabi_dadd+0x374>
 8000992:	0004      	movs	r4, r0
 8000994:	431c      	orrs	r4, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d000      	beq.n	800099c <__aeabi_dadd+0x1f4>
 800099a:	e169      	b.n	8000c70 <__aeabi_dadd+0x4c8>
 800099c:	2c00      	cmp	r4, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x1fa>
 80009a0:	e1bf      	b.n	8000d22 <__aeabi_dadd+0x57a>
 80009a2:	4644      	mov	r4, r8
 80009a4:	430c      	orrs	r4, r1
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x202>
 80009a8:	e1d0      	b.n	8000d4c <__aeabi_dadd+0x5a4>
 80009aa:	0742      	lsls	r2, r0, #29
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	08c0      	lsrs	r0, r0, #3
 80009b2:	e029      	b.n	8000a08 <__aeabi_dadd+0x260>
 80009b4:	003a      	movs	r2, r7
 80009b6:	430a      	orrs	r2, r1
 80009b8:	d100      	bne.n	80009bc <__aeabi_dadd+0x214>
 80009ba:	e170      	b.n	8000c9e <__aeabi_dadd+0x4f6>
 80009bc:	4662      	mov	r2, ip
 80009be:	4664      	mov	r4, ip
 80009c0:	3a01      	subs	r2, #1
 80009c2:	2c01      	cmp	r4, #1
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x220>
 80009c6:	e0e0      	b.n	8000b8a <__aeabi_dadd+0x3e2>
 80009c8:	4c51      	ldr	r4, [pc, #324]	; (8000b10 <__aeabi_dadd+0x368>)
 80009ca:	45a4      	cmp	ip, r4
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x228>
 80009ce:	e161      	b.n	8000c94 <__aeabi_dadd+0x4ec>
 80009d0:	4694      	mov	ip, r2
 80009d2:	e7b4      	b.n	800093e <__aeabi_dadd+0x196>
 80009d4:	003a      	movs	r2, r7
 80009d6:	391f      	subs	r1, #31
 80009d8:	40ca      	lsrs	r2, r1
 80009da:	0011      	movs	r1, r2
 80009dc:	2b20      	cmp	r3, #32
 80009de:	d003      	beq.n	80009e8 <__aeabi_dadd+0x240>
 80009e0:	2240      	movs	r2, #64	; 0x40
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	409f      	lsls	r7, r3
 80009e6:	433c      	orrs	r4, r7
 80009e8:	1e63      	subs	r3, r4, #1
 80009ea:	419c      	sbcs	r4, r3
 80009ec:	2700      	movs	r7, #0
 80009ee:	2600      	movs	r6, #0
 80009f0:	430c      	orrs	r4, r1
 80009f2:	0763      	lsls	r3, r4, #29
 80009f4:	d000      	beq.n	80009f8 <__aeabi_dadd+0x250>
 80009f6:	e753      	b.n	80008a0 <__aeabi_dadd+0xf8>
 80009f8:	46b4      	mov	ip, r6
 80009fa:	08e4      	lsrs	r4, r4, #3
 80009fc:	077b      	lsls	r3, r7, #29
 80009fe:	4323      	orrs	r3, r4
 8000a00:	08f8      	lsrs	r0, r7, #3
 8000a02:	4a43      	ldr	r2, [pc, #268]	; (8000b10 <__aeabi_dadd+0x368>)
 8000a04:	4594      	cmp	ip, r2
 8000a06:	d01d      	beq.n	8000a44 <__aeabi_dadd+0x29c>
 8000a08:	4662      	mov	r2, ip
 8000a0a:	0307      	lsls	r7, r0, #12
 8000a0c:	0552      	lsls	r2, r2, #21
 8000a0e:	0b3f      	lsrs	r7, r7, #12
 8000a10:	0d52      	lsrs	r2, r2, #21
 8000a12:	e760      	b.n	80008d6 <__aeabi_dadd+0x12e>
 8000a14:	4644      	mov	r4, r8
 8000a16:	430c      	orrs	r4, r1
 8000a18:	1e62      	subs	r2, r4, #1
 8000a1a:	4194      	sbcs	r4, r2
 8000a1c:	18e4      	adds	r4, r4, r3
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	419b      	sbcs	r3, r3
 8000a22:	425f      	negs	r7, r3
 8000a24:	183f      	adds	r7, r7, r0
 8000a26:	023b      	lsls	r3, r7, #8
 8000a28:	d5e3      	bpl.n	80009f2 <__aeabi_dadd+0x24a>
 8000a2a:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <__aeabi_dadd+0x368>)
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	429e      	cmp	r6, r3
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dadd+0x28c>
 8000a32:	e0b5      	b.n	8000ba0 <__aeabi_dadd+0x3f8>
 8000a34:	0032      	movs	r2, r6
 8000a36:	2700      	movs	r7, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e74c      	b.n	80008d6 <__aeabi_dadd+0x12e>
 8000a3c:	0742      	lsls	r2, r0, #29
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	08c0      	lsrs	r0, r0, #3
 8000a44:	001a      	movs	r2, r3
 8000a46:	4302      	orrs	r2, r0
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x2a4>
 8000a4a:	e1e1      	b.n	8000e10 <__aeabi_dadd+0x668>
 8000a4c:	2780      	movs	r7, #128	; 0x80
 8000a4e:	033f      	lsls	r7, r7, #12
 8000a50:	4307      	orrs	r7, r0
 8000a52:	033f      	lsls	r7, r7, #12
 8000a54:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <__aeabi_dadd+0x368>)
 8000a56:	0b3f      	lsrs	r7, r7, #12
 8000a58:	e73d      	b.n	80008d6 <__aeabi_dadd+0x12e>
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f001 f998 	bl	8001d90 <__clzsi2>
 8000a60:	0001      	movs	r1, r0
 8000a62:	3118      	adds	r1, #24
 8000a64:	291f      	cmp	r1, #31
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_dadd+0x2c2>
 8000a68:	e6fc      	b.n	8000864 <__aeabi_dadd+0xbc>
 8000a6a:	3808      	subs	r0, #8
 8000a6c:	4084      	lsls	r4, r0
 8000a6e:	0027      	movs	r7, r4
 8000a70:	2400      	movs	r4, #0
 8000a72:	42b1      	cmp	r1, r6
 8000a74:	db00      	blt.n	8000a78 <__aeabi_dadd+0x2d0>
 8000a76:	e6ff      	b.n	8000878 <__aeabi_dadd+0xd0>
 8000a78:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <__aeabi_dadd+0x36c>)
 8000a7a:	1a76      	subs	r6, r6, r1
 8000a7c:	4017      	ands	r7, r2
 8000a7e:	e70d      	b.n	800089c <__aeabi_dadd+0xf4>
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d02f      	beq.n	8000ae4 <__aeabi_dadd+0x33c>
 8000a84:	464a      	mov	r2, r9
 8000a86:	1b92      	subs	r2, r2, r6
 8000a88:	4694      	mov	ip, r2
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x2e8>
 8000a8e:	e0ad      	b.n	8000bec <__aeabi_dadd+0x444>
 8000a90:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <__aeabi_dadd+0x368>)
 8000a92:	4591      	cmp	r9, r2
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x2f0>
 8000a96:	e10f      	b.n	8000cb8 <__aeabi_dadd+0x510>
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0412      	lsls	r2, r2, #16
 8000a9c:	4310      	orrs	r0, r2
 8000a9e:	4662      	mov	r2, ip
 8000aa0:	2a38      	cmp	r2, #56	; 0x38
 8000aa2:	dd00      	ble.n	8000aa6 <__aeabi_dadd+0x2fe>
 8000aa4:	e10f      	b.n	8000cc6 <__aeabi_dadd+0x51e>
 8000aa6:	2a1f      	cmp	r2, #31
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_dadd+0x304>
 8000aaa:	e180      	b.n	8000dae <__aeabi_dadd+0x606>
 8000aac:	4664      	mov	r4, ip
 8000aae:	2220      	movs	r2, #32
 8000ab0:	001e      	movs	r6, r3
 8000ab2:	1b12      	subs	r2, r2, r4
 8000ab4:	4667      	mov	r7, ip
 8000ab6:	0004      	movs	r4, r0
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	4094      	lsls	r4, r2
 8000abc:	40fe      	lsrs	r6, r7
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	4193      	sbcs	r3, r2
 8000ac2:	40f8      	lsrs	r0, r7
 8000ac4:	4334      	orrs	r4, r6
 8000ac6:	431c      	orrs	r4, r3
 8000ac8:	4480      	add	r8, r0
 8000aca:	1864      	adds	r4, r4, r1
 8000acc:	428c      	cmp	r4, r1
 8000ace:	41bf      	sbcs	r7, r7
 8000ad0:	427f      	negs	r7, r7
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4447      	add	r7, r8
 8000ad6:	e7a6      	b.n	8000a26 <__aeabi_dadd+0x27e>
 8000ad8:	4642      	mov	r2, r8
 8000ada:	430a      	orrs	r2, r1
 8000adc:	0011      	movs	r1, r2
 8000ade:	1e4a      	subs	r2, r1, #1
 8000ae0:	4191      	sbcs	r1, r2
 8000ae2:	e6ad      	b.n	8000840 <__aeabi_dadd+0x98>
 8000ae4:	4c0c      	ldr	r4, [pc, #48]	; (8000b18 <__aeabi_dadd+0x370>)
 8000ae6:	1c72      	adds	r2, r6, #1
 8000ae8:	4222      	tst	r2, r4
 8000aea:	d000      	beq.n	8000aee <__aeabi_dadd+0x346>
 8000aec:	e0a1      	b.n	8000c32 <__aeabi_dadd+0x48a>
 8000aee:	0002      	movs	r2, r0
 8000af0:	431a      	orrs	r2, r3
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d000      	beq.n	8000af8 <__aeabi_dadd+0x350>
 8000af6:	e0fa      	b.n	8000cee <__aeabi_dadd+0x546>
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d100      	bne.n	8000afe <__aeabi_dadd+0x356>
 8000afc:	e145      	b.n	8000d8a <__aeabi_dadd+0x5e2>
 8000afe:	003a      	movs	r2, r7
 8000b00:	430a      	orrs	r2, r1
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x35e>
 8000b04:	e146      	b.n	8000d94 <__aeabi_dadd+0x5ec>
 8000b06:	0742      	lsls	r2, r0, #29
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	08c0      	lsrs	r0, r0, #3
 8000b0e:	e77b      	b.n	8000a08 <__aeabi_dadd+0x260>
 8000b10:	000007ff 	.word	0x000007ff
 8000b14:	ff7fffff 	.word	0xff7fffff
 8000b18:	000007fe 	.word	0x000007fe
 8000b1c:	4647      	mov	r7, r8
 8000b1e:	1a5c      	subs	r4, r3, r1
 8000b20:	1bc2      	subs	r2, r0, r7
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	41bf      	sbcs	r7, r7
 8000b26:	427f      	negs	r7, r7
 8000b28:	46b9      	mov	r9, r7
 8000b2a:	0017      	movs	r7, r2
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	1abf      	subs	r7, r7, r2
 8000b30:	023a      	lsls	r2, r7, #8
 8000b32:	d500      	bpl.n	8000b36 <__aeabi_dadd+0x38e>
 8000b34:	e08d      	b.n	8000c52 <__aeabi_dadd+0x4aa>
 8000b36:	0023      	movs	r3, r4
 8000b38:	433b      	orrs	r3, r7
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dadd+0x396>
 8000b3c:	e68a      	b.n	8000854 <__aeabi_dadd+0xac>
 8000b3e:	2000      	movs	r0, #0
 8000b40:	2500      	movs	r5, #0
 8000b42:	e761      	b.n	8000a08 <__aeabi_dadd+0x260>
 8000b44:	4cb4      	ldr	r4, [pc, #720]	; (8000e18 <__aeabi_dadd+0x670>)
 8000b46:	45a1      	cmp	r9, r4
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x3a4>
 8000b4a:	e0ad      	b.n	8000ca8 <__aeabi_dadd+0x500>
 8000b4c:	2480      	movs	r4, #128	; 0x80
 8000b4e:	0424      	lsls	r4, r4, #16
 8000b50:	4320      	orrs	r0, r4
 8000b52:	4664      	mov	r4, ip
 8000b54:	2c38      	cmp	r4, #56	; 0x38
 8000b56:	dc3d      	bgt.n	8000bd4 <__aeabi_dadd+0x42c>
 8000b58:	4662      	mov	r2, ip
 8000b5a:	2c1f      	cmp	r4, #31
 8000b5c:	dd00      	ble.n	8000b60 <__aeabi_dadd+0x3b8>
 8000b5e:	e0b7      	b.n	8000cd0 <__aeabi_dadd+0x528>
 8000b60:	2520      	movs	r5, #32
 8000b62:	001e      	movs	r6, r3
 8000b64:	1b2d      	subs	r5, r5, r4
 8000b66:	0004      	movs	r4, r0
 8000b68:	40ab      	lsls	r3, r5
 8000b6a:	40ac      	lsls	r4, r5
 8000b6c:	40d6      	lsrs	r6, r2
 8000b6e:	40d0      	lsrs	r0, r2
 8000b70:	4642      	mov	r2, r8
 8000b72:	1e5d      	subs	r5, r3, #1
 8000b74:	41ab      	sbcs	r3, r5
 8000b76:	4334      	orrs	r4, r6
 8000b78:	1a12      	subs	r2, r2, r0
 8000b7a:	4690      	mov	r8, r2
 8000b7c:	4323      	orrs	r3, r4
 8000b7e:	e02c      	b.n	8000bda <__aeabi_dadd+0x432>
 8000b80:	0742      	lsls	r2, r0, #29
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	08c0      	lsrs	r0, r0, #3
 8000b88:	e73b      	b.n	8000a02 <__aeabi_dadd+0x25a>
 8000b8a:	185c      	adds	r4, r3, r1
 8000b8c:	429c      	cmp	r4, r3
 8000b8e:	419b      	sbcs	r3, r3
 8000b90:	4440      	add	r0, r8
 8000b92:	425b      	negs	r3, r3
 8000b94:	18c7      	adds	r7, r0, r3
 8000b96:	2601      	movs	r6, #1
 8000b98:	023b      	lsls	r3, r7, #8
 8000b9a:	d400      	bmi.n	8000b9e <__aeabi_dadd+0x3f6>
 8000b9c:	e729      	b.n	80009f2 <__aeabi_dadd+0x24a>
 8000b9e:	2602      	movs	r6, #2
 8000ba0:	4a9e      	ldr	r2, [pc, #632]	; (8000e1c <__aeabi_dadd+0x674>)
 8000ba2:	0863      	lsrs	r3, r4, #1
 8000ba4:	4017      	ands	r7, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4014      	ands	r4, r2
 8000baa:	431c      	orrs	r4, r3
 8000bac:	07fb      	lsls	r3, r7, #31
 8000bae:	431c      	orrs	r4, r3
 8000bb0:	087f      	lsrs	r7, r7, #1
 8000bb2:	e673      	b.n	800089c <__aeabi_dadd+0xf4>
 8000bb4:	4644      	mov	r4, r8
 8000bb6:	3a20      	subs	r2, #32
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	4662      	mov	r2, ip
 8000bbc:	2a20      	cmp	r2, #32
 8000bbe:	d005      	beq.n	8000bcc <__aeabi_dadd+0x424>
 8000bc0:	4667      	mov	r7, ip
 8000bc2:	2240      	movs	r2, #64	; 0x40
 8000bc4:	1bd2      	subs	r2, r2, r7
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	4097      	lsls	r7, r2
 8000bca:	4339      	orrs	r1, r7
 8000bcc:	1e4a      	subs	r2, r1, #1
 8000bce:	4191      	sbcs	r1, r2
 8000bd0:	4321      	orrs	r1, r4
 8000bd2:	e635      	b.n	8000840 <__aeabi_dadd+0x98>
 8000bd4:	4303      	orrs	r3, r0
 8000bd6:	1e58      	subs	r0, r3, #1
 8000bd8:	4183      	sbcs	r3, r0
 8000bda:	1acc      	subs	r4, r1, r3
 8000bdc:	42a1      	cmp	r1, r4
 8000bde:	41bf      	sbcs	r7, r7
 8000be0:	4643      	mov	r3, r8
 8000be2:	427f      	negs	r7, r7
 8000be4:	4655      	mov	r5, sl
 8000be6:	464e      	mov	r6, r9
 8000be8:	1bdf      	subs	r7, r3, r7
 8000bea:	e62e      	b.n	800084a <__aeabi_dadd+0xa2>
 8000bec:	0002      	movs	r2, r0
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x44c>
 8000bf2:	e0bd      	b.n	8000d70 <__aeabi_dadd+0x5c8>
 8000bf4:	4662      	mov	r2, ip
 8000bf6:	4664      	mov	r4, ip
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	2c01      	cmp	r4, #1
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x458>
 8000bfe:	e0e5      	b.n	8000dcc <__aeabi_dadd+0x624>
 8000c00:	4c85      	ldr	r4, [pc, #532]	; (8000e18 <__aeabi_dadd+0x670>)
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d058      	beq.n	8000cb8 <__aeabi_dadd+0x510>
 8000c06:	4694      	mov	ip, r2
 8000c08:	e749      	b.n	8000a9e <__aeabi_dadd+0x2f6>
 8000c0a:	4664      	mov	r4, ip
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	1b12      	subs	r2, r2, r4
 8000c10:	4644      	mov	r4, r8
 8000c12:	4094      	lsls	r4, r2
 8000c14:	000f      	movs	r7, r1
 8000c16:	46a1      	mov	r9, r4
 8000c18:	4664      	mov	r4, ip
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	40e7      	lsrs	r7, r4
 8000c1e:	464c      	mov	r4, r9
 8000c20:	1e4a      	subs	r2, r1, #1
 8000c22:	4191      	sbcs	r1, r2
 8000c24:	433c      	orrs	r4, r7
 8000c26:	4642      	mov	r2, r8
 8000c28:	430c      	orrs	r4, r1
 8000c2a:	4661      	mov	r1, ip
 8000c2c:	40ca      	lsrs	r2, r1
 8000c2e:	1880      	adds	r0, r0, r2
 8000c30:	e6f4      	b.n	8000a1c <__aeabi_dadd+0x274>
 8000c32:	4c79      	ldr	r4, [pc, #484]	; (8000e18 <__aeabi_dadd+0x670>)
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x492>
 8000c38:	e6fd      	b.n	8000a36 <__aeabi_dadd+0x28e>
 8000c3a:	1859      	adds	r1, r3, r1
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	419b      	sbcs	r3, r3
 8000c40:	4440      	add	r0, r8
 8000c42:	425f      	negs	r7, r3
 8000c44:	19c7      	adds	r7, r0, r7
 8000c46:	07fc      	lsls	r4, r7, #31
 8000c48:	0849      	lsrs	r1, r1, #1
 8000c4a:	0016      	movs	r6, r2
 8000c4c:	430c      	orrs	r4, r1
 8000c4e:	087f      	lsrs	r7, r7, #1
 8000c50:	e6cf      	b.n	80009f2 <__aeabi_dadd+0x24a>
 8000c52:	1acc      	subs	r4, r1, r3
 8000c54:	42a1      	cmp	r1, r4
 8000c56:	41bf      	sbcs	r7, r7
 8000c58:	4643      	mov	r3, r8
 8000c5a:	427f      	negs	r7, r7
 8000c5c:	1a18      	subs	r0, r3, r0
 8000c5e:	4655      	mov	r5, sl
 8000c60:	1bc7      	subs	r7, r0, r7
 8000c62:	e5f7      	b.n	8000854 <__aeabi_dadd+0xac>
 8000c64:	08c9      	lsrs	r1, r1, #3
 8000c66:	077b      	lsls	r3, r7, #29
 8000c68:	4655      	mov	r5, sl
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	08f8      	lsrs	r0, r7, #3
 8000c6e:	e6c8      	b.n	8000a02 <__aeabi_dadd+0x25a>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d000      	beq.n	8000c76 <__aeabi_dadd+0x4ce>
 8000c74:	e081      	b.n	8000d7a <__aeabi_dadd+0x5d2>
 8000c76:	4643      	mov	r3, r8
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	d115      	bne.n	8000ca8 <__aeabi_dadd+0x500>
 8000c7c:	2080      	movs	r0, #128	; 0x80
 8000c7e:	2500      	movs	r5, #0
 8000c80:	0300      	lsls	r0, r0, #12
 8000c82:	e6e3      	b.n	8000a4c <__aeabi_dadd+0x2a4>
 8000c84:	1a5c      	subs	r4, r3, r1
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	419b      	sbcs	r3, r3
 8000c8a:	1bc7      	subs	r7, r0, r7
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	2601      	movs	r6, #1
 8000c90:	1aff      	subs	r7, r7, r3
 8000c92:	e5da      	b.n	800084a <__aeabi_dadd+0xa2>
 8000c94:	0742      	lsls	r2, r0, #29
 8000c96:	08db      	lsrs	r3, r3, #3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	08c0      	lsrs	r0, r0, #3
 8000c9c:	e6d2      	b.n	8000a44 <__aeabi_dadd+0x29c>
 8000c9e:	0742      	lsls	r2, r0, #29
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	08c0      	lsrs	r0, r0, #3
 8000ca6:	e6ac      	b.n	8000a02 <__aeabi_dadd+0x25a>
 8000ca8:	4643      	mov	r3, r8
 8000caa:	4642      	mov	r2, r8
 8000cac:	08c9      	lsrs	r1, r1, #3
 8000cae:	075b      	lsls	r3, r3, #29
 8000cb0:	4655      	mov	r5, sl
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	08d0      	lsrs	r0, r2, #3
 8000cb6:	e6c5      	b.n	8000a44 <__aeabi_dadd+0x29c>
 8000cb8:	4643      	mov	r3, r8
 8000cba:	4642      	mov	r2, r8
 8000cbc:	075b      	lsls	r3, r3, #29
 8000cbe:	08c9      	lsrs	r1, r1, #3
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	08d0      	lsrs	r0, r2, #3
 8000cc4:	e6be      	b.n	8000a44 <__aeabi_dadd+0x29c>
 8000cc6:	4303      	orrs	r3, r0
 8000cc8:	001c      	movs	r4, r3
 8000cca:	1e63      	subs	r3, r4, #1
 8000ccc:	419c      	sbcs	r4, r3
 8000cce:	e6fc      	b.n	8000aca <__aeabi_dadd+0x322>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	3c20      	subs	r4, #32
 8000cd4:	40e2      	lsrs	r2, r4
 8000cd6:	0014      	movs	r4, r2
 8000cd8:	4662      	mov	r2, ip
 8000cda:	2a20      	cmp	r2, #32
 8000cdc:	d003      	beq.n	8000ce6 <__aeabi_dadd+0x53e>
 8000cde:	2540      	movs	r5, #64	; 0x40
 8000ce0:	1aad      	subs	r5, r5, r2
 8000ce2:	40a8      	lsls	r0, r5
 8000ce4:	4303      	orrs	r3, r0
 8000ce6:	1e58      	subs	r0, r3, #1
 8000ce8:	4183      	sbcs	r3, r0
 8000cea:	4323      	orrs	r3, r4
 8000cec:	e775      	b.n	8000bda <__aeabi_dadd+0x432>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d0e2      	beq.n	8000cb8 <__aeabi_dadd+0x510>
 8000cf2:	003a      	movs	r2, r7
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	d0cd      	beq.n	8000c94 <__aeabi_dadd+0x4ec>
 8000cf8:	0742      	lsls	r2, r0, #29
 8000cfa:	08db      	lsrs	r3, r3, #3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	08c0      	lsrs	r0, r0, #3
 8000d02:	0312      	lsls	r2, r2, #12
 8000d04:	4210      	tst	r0, r2
 8000d06:	d006      	beq.n	8000d16 <__aeabi_dadd+0x56e>
 8000d08:	08fc      	lsrs	r4, r7, #3
 8000d0a:	4214      	tst	r4, r2
 8000d0c:	d103      	bne.n	8000d16 <__aeabi_dadd+0x56e>
 8000d0e:	0020      	movs	r0, r4
 8000d10:	08cb      	lsrs	r3, r1, #3
 8000d12:	077a      	lsls	r2, r7, #29
 8000d14:	4313      	orrs	r3, r2
 8000d16:	0f5a      	lsrs	r2, r3, #29
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	0752      	lsls	r2, r2, #29
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	e690      	b.n	8000a44 <__aeabi_dadd+0x29c>
 8000d22:	4643      	mov	r3, r8
 8000d24:	430b      	orrs	r3, r1
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x582>
 8000d28:	e709      	b.n	8000b3e <__aeabi_dadd+0x396>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	08c9      	lsrs	r1, r1, #3
 8000d30:	075b      	lsls	r3, r3, #29
 8000d32:	4655      	mov	r5, sl
 8000d34:	430b      	orrs	r3, r1
 8000d36:	08d0      	lsrs	r0, r2, #3
 8000d38:	e666      	b.n	8000a08 <__aeabi_dadd+0x260>
 8000d3a:	1acc      	subs	r4, r1, r3
 8000d3c:	42a1      	cmp	r1, r4
 8000d3e:	4189      	sbcs	r1, r1
 8000d40:	1a3f      	subs	r7, r7, r0
 8000d42:	4249      	negs	r1, r1
 8000d44:	4655      	mov	r5, sl
 8000d46:	2601      	movs	r6, #1
 8000d48:	1a7f      	subs	r7, r7, r1
 8000d4a:	e57e      	b.n	800084a <__aeabi_dadd+0xa2>
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	1a5c      	subs	r4, r3, r1
 8000d50:	1a87      	subs	r7, r0, r2
 8000d52:	42a3      	cmp	r3, r4
 8000d54:	4192      	sbcs	r2, r2
 8000d56:	4252      	negs	r2, r2
 8000d58:	1abf      	subs	r7, r7, r2
 8000d5a:	023a      	lsls	r2, r7, #8
 8000d5c:	d53d      	bpl.n	8000dda <__aeabi_dadd+0x632>
 8000d5e:	1acc      	subs	r4, r1, r3
 8000d60:	42a1      	cmp	r1, r4
 8000d62:	4189      	sbcs	r1, r1
 8000d64:	4643      	mov	r3, r8
 8000d66:	4249      	negs	r1, r1
 8000d68:	1a1f      	subs	r7, r3, r0
 8000d6a:	4655      	mov	r5, sl
 8000d6c:	1a7f      	subs	r7, r7, r1
 8000d6e:	e595      	b.n	800089c <__aeabi_dadd+0xf4>
 8000d70:	077b      	lsls	r3, r7, #29
 8000d72:	08c9      	lsrs	r1, r1, #3
 8000d74:	430b      	orrs	r3, r1
 8000d76:	08f8      	lsrs	r0, r7, #3
 8000d78:	e643      	b.n	8000a02 <__aeabi_dadd+0x25a>
 8000d7a:	4644      	mov	r4, r8
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	430c      	orrs	r4, r1
 8000d80:	d130      	bne.n	8000de4 <__aeabi_dadd+0x63c>
 8000d82:	0742      	lsls	r2, r0, #29
 8000d84:	4313      	orrs	r3, r2
 8000d86:	08c0      	lsrs	r0, r0, #3
 8000d88:	e65c      	b.n	8000a44 <__aeabi_dadd+0x29c>
 8000d8a:	077b      	lsls	r3, r7, #29
 8000d8c:	08c9      	lsrs	r1, r1, #3
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	08f8      	lsrs	r0, r7, #3
 8000d92:	e639      	b.n	8000a08 <__aeabi_dadd+0x260>
 8000d94:	185c      	adds	r4, r3, r1
 8000d96:	429c      	cmp	r4, r3
 8000d98:	419b      	sbcs	r3, r3
 8000d9a:	4440      	add	r0, r8
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	18c7      	adds	r7, r0, r3
 8000da0:	023b      	lsls	r3, r7, #8
 8000da2:	d400      	bmi.n	8000da6 <__aeabi_dadd+0x5fe>
 8000da4:	e625      	b.n	80009f2 <__aeabi_dadd+0x24a>
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <__aeabi_dadd+0x674>)
 8000da8:	2601      	movs	r6, #1
 8000daa:	401f      	ands	r7, r3
 8000dac:	e621      	b.n	80009f2 <__aeabi_dadd+0x24a>
 8000dae:	0004      	movs	r4, r0
 8000db0:	3a20      	subs	r2, #32
 8000db2:	40d4      	lsrs	r4, r2
 8000db4:	4662      	mov	r2, ip
 8000db6:	2a20      	cmp	r2, #32
 8000db8:	d004      	beq.n	8000dc4 <__aeabi_dadd+0x61c>
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	1b92      	subs	r2, r2, r6
 8000dc0:	4090      	lsls	r0, r2
 8000dc2:	4303      	orrs	r3, r0
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	4193      	sbcs	r3, r2
 8000dc8:	431c      	orrs	r4, r3
 8000dca:	e67e      	b.n	8000aca <__aeabi_dadd+0x322>
 8000dcc:	185c      	adds	r4, r3, r1
 8000dce:	428c      	cmp	r4, r1
 8000dd0:	4189      	sbcs	r1, r1
 8000dd2:	4440      	add	r0, r8
 8000dd4:	4249      	negs	r1, r1
 8000dd6:	1847      	adds	r7, r0, r1
 8000dd8:	e6dd      	b.n	8000b96 <__aeabi_dadd+0x3ee>
 8000dda:	0023      	movs	r3, r4
 8000ddc:	433b      	orrs	r3, r7
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x63a>
 8000de0:	e6ad      	b.n	8000b3e <__aeabi_dadd+0x396>
 8000de2:	e606      	b.n	80009f2 <__aeabi_dadd+0x24a>
 8000de4:	0744      	lsls	r4, r0, #29
 8000de6:	4323      	orrs	r3, r4
 8000de8:	2480      	movs	r4, #128	; 0x80
 8000dea:	08c0      	lsrs	r0, r0, #3
 8000dec:	0324      	lsls	r4, r4, #12
 8000dee:	4220      	tst	r0, r4
 8000df0:	d008      	beq.n	8000e04 <__aeabi_dadd+0x65c>
 8000df2:	4642      	mov	r2, r8
 8000df4:	08d6      	lsrs	r6, r2, #3
 8000df6:	4226      	tst	r6, r4
 8000df8:	d104      	bne.n	8000e04 <__aeabi_dadd+0x65c>
 8000dfa:	4655      	mov	r5, sl
 8000dfc:	0030      	movs	r0, r6
 8000dfe:	08cb      	lsrs	r3, r1, #3
 8000e00:	0751      	lsls	r1, r2, #29
 8000e02:	430b      	orrs	r3, r1
 8000e04:	0f5a      	lsrs	r2, r3, #29
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	0752      	lsls	r2, r2, #29
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	e619      	b.n	8000a44 <__aeabi_dadd+0x29c>
 8000e10:	2300      	movs	r3, #0
 8000e12:	4a01      	ldr	r2, [pc, #4]	; (8000e18 <__aeabi_dadd+0x670>)
 8000e14:	001f      	movs	r7, r3
 8000e16:	e55e      	b.n	80008d6 <__aeabi_dadd+0x12e>
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	ff7fffff 	.word	0xff7fffff

08000e20 <__eqdf2>:
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e22:	464e      	mov	r6, r9
 8000e24:	4645      	mov	r5, r8
 8000e26:	46de      	mov	lr, fp
 8000e28:	4657      	mov	r7, sl
 8000e2a:	4690      	mov	r8, r2
 8000e2c:	b5e0      	push	{r5, r6, r7, lr}
 8000e2e:	0017      	movs	r7, r2
 8000e30:	031a      	lsls	r2, r3, #12
 8000e32:	0b12      	lsrs	r2, r2, #12
 8000e34:	0005      	movs	r5, r0
 8000e36:	4684      	mov	ip, r0
 8000e38:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <__eqdf2+0x80>)
 8000e3a:	030e      	lsls	r6, r1, #12
 8000e3c:	004c      	lsls	r4, r1, #1
 8000e3e:	4691      	mov	r9, r2
 8000e40:	005a      	lsls	r2, r3, #1
 8000e42:	0fdb      	lsrs	r3, r3, #31
 8000e44:	469b      	mov	fp, r3
 8000e46:	0b36      	lsrs	r6, r6, #12
 8000e48:	0d64      	lsrs	r4, r4, #21
 8000e4a:	0fc9      	lsrs	r1, r1, #31
 8000e4c:	0d52      	lsrs	r2, r2, #21
 8000e4e:	4284      	cmp	r4, r0
 8000e50:	d019      	beq.n	8000e86 <__eqdf2+0x66>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	d010      	beq.n	8000e78 <__eqdf2+0x58>
 8000e56:	2001      	movs	r0, #1
 8000e58:	4294      	cmp	r4, r2
 8000e5a:	d10e      	bne.n	8000e7a <__eqdf2+0x5a>
 8000e5c:	454e      	cmp	r6, r9
 8000e5e:	d10c      	bne.n	8000e7a <__eqdf2+0x5a>
 8000e60:	2001      	movs	r0, #1
 8000e62:	45c4      	cmp	ip, r8
 8000e64:	d109      	bne.n	8000e7a <__eqdf2+0x5a>
 8000e66:	4559      	cmp	r1, fp
 8000e68:	d017      	beq.n	8000e9a <__eqdf2+0x7a>
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	d105      	bne.n	8000e7a <__eqdf2+0x5a>
 8000e6e:	0030      	movs	r0, r6
 8000e70:	4328      	orrs	r0, r5
 8000e72:	1e43      	subs	r3, r0, #1
 8000e74:	4198      	sbcs	r0, r3
 8000e76:	e000      	b.n	8000e7a <__eqdf2+0x5a>
 8000e78:	2001      	movs	r0, #1
 8000e7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e7c:	46bb      	mov	fp, r7
 8000e7e:	46b2      	mov	sl, r6
 8000e80:	46a9      	mov	r9, r5
 8000e82:	46a0      	mov	r8, r4
 8000e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e86:	0033      	movs	r3, r6
 8000e88:	2001      	movs	r0, #1
 8000e8a:	432b      	orrs	r3, r5
 8000e8c:	d1f5      	bne.n	8000e7a <__eqdf2+0x5a>
 8000e8e:	42a2      	cmp	r2, r4
 8000e90:	d1f3      	bne.n	8000e7a <__eqdf2+0x5a>
 8000e92:	464b      	mov	r3, r9
 8000e94:	433b      	orrs	r3, r7
 8000e96:	d1f0      	bne.n	8000e7a <__eqdf2+0x5a>
 8000e98:	e7e2      	b.n	8000e60 <__eqdf2+0x40>
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	e7ed      	b.n	8000e7a <__eqdf2+0x5a>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	000007ff 	.word	0x000007ff

08000ea4 <__gedf2>:
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea6:	4647      	mov	r7, r8
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	0004      	movs	r4, r0
 8000eac:	0018      	movs	r0, r3
 8000eae:	0016      	movs	r6, r2
 8000eb0:	031b      	lsls	r3, r3, #12
 8000eb2:	0b1b      	lsrs	r3, r3, #12
 8000eb4:	4d2d      	ldr	r5, [pc, #180]	; (8000f6c <__gedf2+0xc8>)
 8000eb6:	004a      	lsls	r2, r1, #1
 8000eb8:	4699      	mov	r9, r3
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	0043      	lsls	r3, r0, #1
 8000ebe:	030f      	lsls	r7, r1, #12
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	46b0      	mov	r8, r6
 8000ec4:	0b3f      	lsrs	r7, r7, #12
 8000ec6:	0d52      	lsrs	r2, r2, #21
 8000ec8:	0fc9      	lsrs	r1, r1, #31
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fc0      	lsrs	r0, r0, #31
 8000ece:	42aa      	cmp	r2, r5
 8000ed0:	d021      	beq.n	8000f16 <__gedf2+0x72>
 8000ed2:	42ab      	cmp	r3, r5
 8000ed4:	d013      	beq.n	8000efe <__gedf2+0x5a>
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	d122      	bne.n	8000f20 <__gedf2+0x7c>
 8000eda:	433c      	orrs	r4, r7
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <__gedf2+0x42>
 8000ee0:	464d      	mov	r5, r9
 8000ee2:	432e      	orrs	r6, r5
 8000ee4:	d022      	beq.n	8000f2c <__gedf2+0x88>
 8000ee6:	2c00      	cmp	r4, #0
 8000ee8:	d010      	beq.n	8000f0c <__gedf2+0x68>
 8000eea:	4281      	cmp	r1, r0
 8000eec:	d022      	beq.n	8000f34 <__gedf2+0x90>
 8000eee:	2002      	movs	r0, #2
 8000ef0:	3901      	subs	r1, #1
 8000ef2:	4008      	ands	r0, r1
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	bcc0      	pop	{r6, r7}
 8000ef8:	46b9      	mov	r9, r7
 8000efa:	46b0      	mov	r8, r6
 8000efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efe:	464d      	mov	r5, r9
 8000f00:	432e      	orrs	r6, r5
 8000f02:	d129      	bne.n	8000f58 <__gedf2+0xb4>
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d1f0      	bne.n	8000eea <__gedf2+0x46>
 8000f08:	433c      	orrs	r4, r7
 8000f0a:	d1ee      	bne.n	8000eea <__gedf2+0x46>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d1f2      	bne.n	8000ef6 <__gedf2+0x52>
 8000f10:	2001      	movs	r0, #1
 8000f12:	4240      	negs	r0, r0
 8000f14:	e7ef      	b.n	8000ef6 <__gedf2+0x52>
 8000f16:	003d      	movs	r5, r7
 8000f18:	4325      	orrs	r5, r4
 8000f1a:	d11d      	bne.n	8000f58 <__gedf2+0xb4>
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d0ee      	beq.n	8000efe <__gedf2+0x5a>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e2      	bne.n	8000eea <__gedf2+0x46>
 8000f24:	464c      	mov	r4, r9
 8000f26:	4326      	orrs	r6, r4
 8000f28:	d1df      	bne.n	8000eea <__gedf2+0x46>
 8000f2a:	e7e0      	b.n	8000eee <__gedf2+0x4a>
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d0e1      	beq.n	8000ef6 <__gedf2+0x52>
 8000f32:	e7dc      	b.n	8000eee <__gedf2+0x4a>
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dc0a      	bgt.n	8000f4e <__gedf2+0xaa>
 8000f38:	dbe8      	blt.n	8000f0c <__gedf2+0x68>
 8000f3a:	454f      	cmp	r7, r9
 8000f3c:	d8d7      	bhi.n	8000eee <__gedf2+0x4a>
 8000f3e:	d00e      	beq.n	8000f5e <__gedf2+0xba>
 8000f40:	2000      	movs	r0, #0
 8000f42:	454f      	cmp	r7, r9
 8000f44:	d2d7      	bcs.n	8000ef6 <__gedf2+0x52>
 8000f46:	2900      	cmp	r1, #0
 8000f48:	d0e2      	beq.n	8000f10 <__gedf2+0x6c>
 8000f4a:	0008      	movs	r0, r1
 8000f4c:	e7d3      	b.n	8000ef6 <__gedf2+0x52>
 8000f4e:	4243      	negs	r3, r0
 8000f50:	4158      	adcs	r0, r3
 8000f52:	0040      	lsls	r0, r0, #1
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7ce      	b.n	8000ef6 <__gedf2+0x52>
 8000f58:	2002      	movs	r0, #2
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	e7cb      	b.n	8000ef6 <__gedf2+0x52>
 8000f5e:	45c4      	cmp	ip, r8
 8000f60:	d8c5      	bhi.n	8000eee <__gedf2+0x4a>
 8000f62:	2000      	movs	r0, #0
 8000f64:	45c4      	cmp	ip, r8
 8000f66:	d2c6      	bcs.n	8000ef6 <__gedf2+0x52>
 8000f68:	e7ed      	b.n	8000f46 <__gedf2+0xa2>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	000007ff 	.word	0x000007ff

08000f70 <__ledf2>:
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	4647      	mov	r7, r8
 8000f74:	46ce      	mov	lr, r9
 8000f76:	0004      	movs	r4, r0
 8000f78:	0018      	movs	r0, r3
 8000f7a:	0016      	movs	r6, r2
 8000f7c:	031b      	lsls	r3, r3, #12
 8000f7e:	0b1b      	lsrs	r3, r3, #12
 8000f80:	4d2c      	ldr	r5, [pc, #176]	; (8001034 <__ledf2+0xc4>)
 8000f82:	004a      	lsls	r2, r1, #1
 8000f84:	4699      	mov	r9, r3
 8000f86:	b580      	push	{r7, lr}
 8000f88:	0043      	lsls	r3, r0, #1
 8000f8a:	030f      	lsls	r7, r1, #12
 8000f8c:	46a4      	mov	ip, r4
 8000f8e:	46b0      	mov	r8, r6
 8000f90:	0b3f      	lsrs	r7, r7, #12
 8000f92:	0d52      	lsrs	r2, r2, #21
 8000f94:	0fc9      	lsrs	r1, r1, #31
 8000f96:	0d5b      	lsrs	r3, r3, #21
 8000f98:	0fc0      	lsrs	r0, r0, #31
 8000f9a:	42aa      	cmp	r2, r5
 8000f9c:	d00d      	beq.n	8000fba <__ledf2+0x4a>
 8000f9e:	42ab      	cmp	r3, r5
 8000fa0:	d010      	beq.n	8000fc4 <__ledf2+0x54>
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	d127      	bne.n	8000ff6 <__ledf2+0x86>
 8000fa6:	433c      	orrs	r4, r7
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d111      	bne.n	8000fd0 <__ledf2+0x60>
 8000fac:	464d      	mov	r5, r9
 8000fae:	432e      	orrs	r6, r5
 8000fb0:	d10e      	bne.n	8000fd0 <__ledf2+0x60>
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	2c00      	cmp	r4, #0
 8000fb6:	d015      	beq.n	8000fe4 <__ledf2+0x74>
 8000fb8:	e00e      	b.n	8000fd8 <__ledf2+0x68>
 8000fba:	003d      	movs	r5, r7
 8000fbc:	4325      	orrs	r5, r4
 8000fbe:	d110      	bne.n	8000fe2 <__ledf2+0x72>
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d118      	bne.n	8000ff6 <__ledf2+0x86>
 8000fc4:	464d      	mov	r5, r9
 8000fc6:	432e      	orrs	r6, r5
 8000fc8:	d10b      	bne.n	8000fe2 <__ledf2+0x72>
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d102      	bne.n	8000fd4 <__ledf2+0x64>
 8000fce:	433c      	orrs	r4, r7
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d00b      	beq.n	8000fec <__ledf2+0x7c>
 8000fd4:	4281      	cmp	r1, r0
 8000fd6:	d014      	beq.n	8001002 <__ledf2+0x92>
 8000fd8:	2002      	movs	r0, #2
 8000fda:	3901      	subs	r1, #1
 8000fdc:	4008      	ands	r0, r1
 8000fde:	3801      	subs	r0, #1
 8000fe0:	e000      	b.n	8000fe4 <__ledf2+0x74>
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	bcc0      	pop	{r6, r7}
 8000fe6:	46b9      	mov	r9, r7
 8000fe8:	46b0      	mov	r8, r6
 8000fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fec:	2800      	cmp	r0, #0
 8000fee:	d1f9      	bne.n	8000fe4 <__ledf2+0x74>
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	4240      	negs	r0, r0
 8000ff4:	e7f6      	b.n	8000fe4 <__ledf2+0x74>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1ec      	bne.n	8000fd4 <__ledf2+0x64>
 8000ffa:	464c      	mov	r4, r9
 8000ffc:	4326      	orrs	r6, r4
 8000ffe:	d1e9      	bne.n	8000fd4 <__ledf2+0x64>
 8001000:	e7ea      	b.n	8000fd8 <__ledf2+0x68>
 8001002:	429a      	cmp	r2, r3
 8001004:	dd04      	ble.n	8001010 <__ledf2+0xa0>
 8001006:	4243      	negs	r3, r0
 8001008:	4158      	adcs	r0, r3
 800100a:	0040      	lsls	r0, r0, #1
 800100c:	3801      	subs	r0, #1
 800100e:	e7e9      	b.n	8000fe4 <__ledf2+0x74>
 8001010:	429a      	cmp	r2, r3
 8001012:	dbeb      	blt.n	8000fec <__ledf2+0x7c>
 8001014:	454f      	cmp	r7, r9
 8001016:	d8df      	bhi.n	8000fd8 <__ledf2+0x68>
 8001018:	d006      	beq.n	8001028 <__ledf2+0xb8>
 800101a:	2000      	movs	r0, #0
 800101c:	454f      	cmp	r7, r9
 800101e:	d2e1      	bcs.n	8000fe4 <__ledf2+0x74>
 8001020:	2900      	cmp	r1, #0
 8001022:	d0e5      	beq.n	8000ff0 <__ledf2+0x80>
 8001024:	0008      	movs	r0, r1
 8001026:	e7dd      	b.n	8000fe4 <__ledf2+0x74>
 8001028:	45c4      	cmp	ip, r8
 800102a:	d8d5      	bhi.n	8000fd8 <__ledf2+0x68>
 800102c:	2000      	movs	r0, #0
 800102e:	45c4      	cmp	ip, r8
 8001030:	d2d8      	bcs.n	8000fe4 <__ledf2+0x74>
 8001032:	e7f5      	b.n	8001020 <__ledf2+0xb0>
 8001034:	000007ff 	.word	0x000007ff

08001038 <__aeabi_dmul>:
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	4657      	mov	r7, sl
 800103c:	464e      	mov	r6, r9
 800103e:	4645      	mov	r5, r8
 8001040:	46de      	mov	lr, fp
 8001042:	b5e0      	push	{r5, r6, r7, lr}
 8001044:	4698      	mov	r8, r3
 8001046:	030c      	lsls	r4, r1, #12
 8001048:	004b      	lsls	r3, r1, #1
 800104a:	0006      	movs	r6, r0
 800104c:	4692      	mov	sl, r2
 800104e:	b087      	sub	sp, #28
 8001050:	0b24      	lsrs	r4, r4, #12
 8001052:	0d5b      	lsrs	r3, r3, #21
 8001054:	0fcf      	lsrs	r7, r1, #31
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dmul+0x24>
 800105a:	e15c      	b.n	8001316 <__aeabi_dmul+0x2de>
 800105c:	4ad9      	ldr	r2, [pc, #868]	; (80013c4 <__aeabi_dmul+0x38c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d100      	bne.n	8001064 <__aeabi_dmul+0x2c>
 8001062:	e175      	b.n	8001350 <__aeabi_dmul+0x318>
 8001064:	0f42      	lsrs	r2, r0, #29
 8001066:	00e4      	lsls	r4, r4, #3
 8001068:	4314      	orrs	r4, r2
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	0412      	lsls	r2, r2, #16
 800106e:	4314      	orrs	r4, r2
 8001070:	4ad5      	ldr	r2, [pc, #852]	; (80013c8 <__aeabi_dmul+0x390>)
 8001072:	00c5      	lsls	r5, r0, #3
 8001074:	4694      	mov	ip, r2
 8001076:	4463      	add	r3, ip
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2300      	movs	r3, #0
 800107c:	4699      	mov	r9, r3
 800107e:	469b      	mov	fp, r3
 8001080:	4643      	mov	r3, r8
 8001082:	4642      	mov	r2, r8
 8001084:	031e      	lsls	r6, r3, #12
 8001086:	0fd2      	lsrs	r2, r2, #31
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4650      	mov	r0, sl
 800108c:	4690      	mov	r8, r2
 800108e:	0b36      	lsrs	r6, r6, #12
 8001090:	0d5b      	lsrs	r3, r3, #21
 8001092:	d100      	bne.n	8001096 <__aeabi_dmul+0x5e>
 8001094:	e120      	b.n	80012d8 <__aeabi_dmul+0x2a0>
 8001096:	4acb      	ldr	r2, [pc, #812]	; (80013c4 <__aeabi_dmul+0x38c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d100      	bne.n	800109e <__aeabi_dmul+0x66>
 800109c:	e162      	b.n	8001364 <__aeabi_dmul+0x32c>
 800109e:	49ca      	ldr	r1, [pc, #808]	; (80013c8 <__aeabi_dmul+0x390>)
 80010a0:	0f42      	lsrs	r2, r0, #29
 80010a2:	468c      	mov	ip, r1
 80010a4:	9900      	ldr	r1, [sp, #0]
 80010a6:	4463      	add	r3, ip
 80010a8:	00f6      	lsls	r6, r6, #3
 80010aa:	468c      	mov	ip, r1
 80010ac:	4316      	orrs	r6, r2
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	449c      	add	ip, r3
 80010b2:	0412      	lsls	r2, r2, #16
 80010b4:	4663      	mov	r3, ip
 80010b6:	4316      	orrs	r6, r2
 80010b8:	00c2      	lsls	r2, r0, #3
 80010ba:	2000      	movs	r0, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	9900      	ldr	r1, [sp, #0]
 80010c0:	4643      	mov	r3, r8
 80010c2:	3101      	adds	r1, #1
 80010c4:	468c      	mov	ip, r1
 80010c6:	4649      	mov	r1, r9
 80010c8:	407b      	eors	r3, r7
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	290f      	cmp	r1, #15
 80010ce:	d826      	bhi.n	800111e <__aeabi_dmul+0xe6>
 80010d0:	4bbe      	ldr	r3, [pc, #760]	; (80013cc <__aeabi_dmul+0x394>)
 80010d2:	0089      	lsls	r1, r1, #2
 80010d4:	5859      	ldr	r1, [r3, r1]
 80010d6:	468f      	mov	pc, r1
 80010d8:	4643      	mov	r3, r8
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	0034      	movs	r4, r6
 80010de:	0015      	movs	r5, r2
 80010e0:	4683      	mov	fp, r0
 80010e2:	465b      	mov	r3, fp
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d016      	beq.n	8001116 <__aeabi_dmul+0xde>
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d100      	bne.n	80010ee <__aeabi_dmul+0xb6>
 80010ec:	e203      	b.n	80014f6 <__aeabi_dmul+0x4be>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d000      	beq.n	80010f4 <__aeabi_dmul+0xbc>
 80010f2:	e0cd      	b.n	8001290 <__aeabi_dmul+0x258>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2400      	movs	r4, #0
 80010f8:	2500      	movs	r5, #0
 80010fa:	9b01      	ldr	r3, [sp, #4]
 80010fc:	0512      	lsls	r2, r2, #20
 80010fe:	4322      	orrs	r2, r4
 8001100:	07db      	lsls	r3, r3, #31
 8001102:	431a      	orrs	r2, r3
 8001104:	0028      	movs	r0, r5
 8001106:	0011      	movs	r1, r2
 8001108:	b007      	add	sp, #28
 800110a:	bcf0      	pop	{r4, r5, r6, r7}
 800110c:	46bb      	mov	fp, r7
 800110e:	46b2      	mov	sl, r6
 8001110:	46a9      	mov	r9, r5
 8001112:	46a0      	mov	r8, r4
 8001114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001116:	2400      	movs	r4, #0
 8001118:	2500      	movs	r5, #0
 800111a:	4aaa      	ldr	r2, [pc, #680]	; (80013c4 <__aeabi_dmul+0x38c>)
 800111c:	e7ed      	b.n	80010fa <__aeabi_dmul+0xc2>
 800111e:	0c28      	lsrs	r0, r5, #16
 8001120:	042d      	lsls	r5, r5, #16
 8001122:	0c2d      	lsrs	r5, r5, #16
 8001124:	002b      	movs	r3, r5
 8001126:	0c11      	lsrs	r1, r2, #16
 8001128:	0412      	lsls	r2, r2, #16
 800112a:	0c12      	lsrs	r2, r2, #16
 800112c:	4353      	muls	r3, r2
 800112e:	4698      	mov	r8, r3
 8001130:	0013      	movs	r3, r2
 8001132:	002f      	movs	r7, r5
 8001134:	4343      	muls	r3, r0
 8001136:	4699      	mov	r9, r3
 8001138:	434f      	muls	r7, r1
 800113a:	444f      	add	r7, r9
 800113c:	46bb      	mov	fp, r7
 800113e:	4647      	mov	r7, r8
 8001140:	000b      	movs	r3, r1
 8001142:	0c3f      	lsrs	r7, r7, #16
 8001144:	46ba      	mov	sl, r7
 8001146:	4343      	muls	r3, r0
 8001148:	44da      	add	sl, fp
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	45d1      	cmp	r9, sl
 800114e:	d904      	bls.n	800115a <__aeabi_dmul+0x122>
 8001150:	2780      	movs	r7, #128	; 0x80
 8001152:	027f      	lsls	r7, r7, #9
 8001154:	46b9      	mov	r9, r7
 8001156:	444b      	add	r3, r9
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	4653      	mov	r3, sl
 800115c:	0c1b      	lsrs	r3, r3, #16
 800115e:	469b      	mov	fp, r3
 8001160:	4653      	mov	r3, sl
 8001162:	041f      	lsls	r7, r3, #16
 8001164:	4643      	mov	r3, r8
 8001166:	041b      	lsls	r3, r3, #16
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	4698      	mov	r8, r3
 800116c:	003b      	movs	r3, r7
 800116e:	4443      	add	r3, r8
 8001170:	9304      	str	r3, [sp, #16]
 8001172:	0c33      	lsrs	r3, r6, #16
 8001174:	0436      	lsls	r6, r6, #16
 8001176:	0c36      	lsrs	r6, r6, #16
 8001178:	4698      	mov	r8, r3
 800117a:	0033      	movs	r3, r6
 800117c:	4343      	muls	r3, r0
 800117e:	4699      	mov	r9, r3
 8001180:	4643      	mov	r3, r8
 8001182:	4343      	muls	r3, r0
 8001184:	002f      	movs	r7, r5
 8001186:	469a      	mov	sl, r3
 8001188:	4643      	mov	r3, r8
 800118a:	4377      	muls	r7, r6
 800118c:	435d      	muls	r5, r3
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	444d      	add	r5, r9
 8001192:	1945      	adds	r5, r0, r5
 8001194:	45a9      	cmp	r9, r5
 8001196:	d903      	bls.n	80011a0 <__aeabi_dmul+0x168>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	4699      	mov	r9, r3
 800119e:	44ca      	add	sl, r9
 80011a0:	043f      	lsls	r7, r7, #16
 80011a2:	0c28      	lsrs	r0, r5, #16
 80011a4:	0c3f      	lsrs	r7, r7, #16
 80011a6:	042d      	lsls	r5, r5, #16
 80011a8:	19ed      	adds	r5, r5, r7
 80011aa:	0c27      	lsrs	r7, r4, #16
 80011ac:	0424      	lsls	r4, r4, #16
 80011ae:	0c24      	lsrs	r4, r4, #16
 80011b0:	0003      	movs	r3, r0
 80011b2:	0020      	movs	r0, r4
 80011b4:	4350      	muls	r0, r2
 80011b6:	437a      	muls	r2, r7
 80011b8:	4691      	mov	r9, r2
 80011ba:	003a      	movs	r2, r7
 80011bc:	4453      	add	r3, sl
 80011be:	9305      	str	r3, [sp, #20]
 80011c0:	0c03      	lsrs	r3, r0, #16
 80011c2:	469a      	mov	sl, r3
 80011c4:	434a      	muls	r2, r1
 80011c6:	4361      	muls	r1, r4
 80011c8:	4449      	add	r1, r9
 80011ca:	4451      	add	r1, sl
 80011cc:	44ab      	add	fp, r5
 80011ce:	4589      	cmp	r9, r1
 80011d0:	d903      	bls.n	80011da <__aeabi_dmul+0x1a2>
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	025b      	lsls	r3, r3, #9
 80011d6:	4699      	mov	r9, r3
 80011d8:	444a      	add	r2, r9
 80011da:	0400      	lsls	r0, r0, #16
 80011dc:	0c0b      	lsrs	r3, r1, #16
 80011de:	0c00      	lsrs	r0, r0, #16
 80011e0:	0409      	lsls	r1, r1, #16
 80011e2:	1809      	adds	r1, r1, r0
 80011e4:	0020      	movs	r0, r4
 80011e6:	4699      	mov	r9, r3
 80011e8:	4643      	mov	r3, r8
 80011ea:	4370      	muls	r0, r6
 80011ec:	435c      	muls	r4, r3
 80011ee:	437e      	muls	r6, r7
 80011f0:	435f      	muls	r7, r3
 80011f2:	0c03      	lsrs	r3, r0, #16
 80011f4:	4698      	mov	r8, r3
 80011f6:	19a4      	adds	r4, r4, r6
 80011f8:	4444      	add	r4, r8
 80011fa:	444a      	add	r2, r9
 80011fc:	9703      	str	r7, [sp, #12]
 80011fe:	42a6      	cmp	r6, r4
 8001200:	d904      	bls.n	800120c <__aeabi_dmul+0x1d4>
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	025b      	lsls	r3, r3, #9
 8001206:	4698      	mov	r8, r3
 8001208:	4447      	add	r7, r8
 800120a:	9703      	str	r7, [sp, #12]
 800120c:	0423      	lsls	r3, r4, #16
 800120e:	9e02      	ldr	r6, [sp, #8]
 8001210:	469a      	mov	sl, r3
 8001212:	9b05      	ldr	r3, [sp, #20]
 8001214:	445e      	add	r6, fp
 8001216:	4698      	mov	r8, r3
 8001218:	42ae      	cmp	r6, r5
 800121a:	41ad      	sbcs	r5, r5
 800121c:	1876      	adds	r6, r6, r1
 800121e:	428e      	cmp	r6, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	0400      	lsls	r0, r0, #16
 8001224:	0c00      	lsrs	r0, r0, #16
 8001226:	4450      	add	r0, sl
 8001228:	4440      	add	r0, r8
 800122a:	426d      	negs	r5, r5
 800122c:	1947      	adds	r7, r0, r5
 800122e:	46b8      	mov	r8, r7
 8001230:	4693      	mov	fp, r2
 8001232:	4249      	negs	r1, r1
 8001234:	4689      	mov	r9, r1
 8001236:	44c3      	add	fp, r8
 8001238:	44d9      	add	r9, fp
 800123a:	4298      	cmp	r0, r3
 800123c:	4180      	sbcs	r0, r0
 800123e:	45a8      	cmp	r8, r5
 8001240:	41ad      	sbcs	r5, r5
 8001242:	4593      	cmp	fp, r2
 8001244:	4192      	sbcs	r2, r2
 8001246:	4589      	cmp	r9, r1
 8001248:	4189      	sbcs	r1, r1
 800124a:	426d      	negs	r5, r5
 800124c:	4240      	negs	r0, r0
 800124e:	4328      	orrs	r0, r5
 8001250:	0c24      	lsrs	r4, r4, #16
 8001252:	4252      	negs	r2, r2
 8001254:	4249      	negs	r1, r1
 8001256:	430a      	orrs	r2, r1
 8001258:	9b03      	ldr	r3, [sp, #12]
 800125a:	1900      	adds	r0, r0, r4
 800125c:	1880      	adds	r0, r0, r2
 800125e:	18c7      	adds	r7, r0, r3
 8001260:	464b      	mov	r3, r9
 8001262:	0ddc      	lsrs	r4, r3, #23
 8001264:	9b04      	ldr	r3, [sp, #16]
 8001266:	0275      	lsls	r5, r6, #9
 8001268:	431d      	orrs	r5, r3
 800126a:	1e6a      	subs	r2, r5, #1
 800126c:	4195      	sbcs	r5, r2
 800126e:	464b      	mov	r3, r9
 8001270:	0df6      	lsrs	r6, r6, #23
 8001272:	027f      	lsls	r7, r7, #9
 8001274:	4335      	orrs	r5, r6
 8001276:	025a      	lsls	r2, r3, #9
 8001278:	433c      	orrs	r4, r7
 800127a:	4315      	orrs	r5, r2
 800127c:	01fb      	lsls	r3, r7, #7
 800127e:	d400      	bmi.n	8001282 <__aeabi_dmul+0x24a>
 8001280:	e11c      	b.n	80014bc <__aeabi_dmul+0x484>
 8001282:	2101      	movs	r1, #1
 8001284:	086a      	lsrs	r2, r5, #1
 8001286:	400d      	ands	r5, r1
 8001288:	4315      	orrs	r5, r2
 800128a:	07e2      	lsls	r2, r4, #31
 800128c:	4315      	orrs	r5, r2
 800128e:	0864      	lsrs	r4, r4, #1
 8001290:	494f      	ldr	r1, [pc, #316]	; (80013d0 <__aeabi_dmul+0x398>)
 8001292:	4461      	add	r1, ip
 8001294:	2900      	cmp	r1, #0
 8001296:	dc00      	bgt.n	800129a <__aeabi_dmul+0x262>
 8001298:	e0b0      	b.n	80013fc <__aeabi_dmul+0x3c4>
 800129a:	076b      	lsls	r3, r5, #29
 800129c:	d009      	beq.n	80012b2 <__aeabi_dmul+0x27a>
 800129e:	220f      	movs	r2, #15
 80012a0:	402a      	ands	r2, r5
 80012a2:	2a04      	cmp	r2, #4
 80012a4:	d005      	beq.n	80012b2 <__aeabi_dmul+0x27a>
 80012a6:	1d2a      	adds	r2, r5, #4
 80012a8:	42aa      	cmp	r2, r5
 80012aa:	41ad      	sbcs	r5, r5
 80012ac:	426d      	negs	r5, r5
 80012ae:	1964      	adds	r4, r4, r5
 80012b0:	0015      	movs	r5, r2
 80012b2:	01e3      	lsls	r3, r4, #7
 80012b4:	d504      	bpl.n	80012c0 <__aeabi_dmul+0x288>
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <__aeabi_dmul+0x39c>)
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	4014      	ands	r4, r2
 80012be:	4461      	add	r1, ip
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <__aeabi_dmul+0x3a0>)
 80012c2:	4291      	cmp	r1, r2
 80012c4:	dd00      	ble.n	80012c8 <__aeabi_dmul+0x290>
 80012c6:	e726      	b.n	8001116 <__aeabi_dmul+0xde>
 80012c8:	0762      	lsls	r2, r4, #29
 80012ca:	08ed      	lsrs	r5, r5, #3
 80012cc:	0264      	lsls	r4, r4, #9
 80012ce:	0549      	lsls	r1, r1, #21
 80012d0:	4315      	orrs	r5, r2
 80012d2:	0b24      	lsrs	r4, r4, #12
 80012d4:	0d4a      	lsrs	r2, r1, #21
 80012d6:	e710      	b.n	80010fa <__aeabi_dmul+0xc2>
 80012d8:	4652      	mov	r2, sl
 80012da:	4332      	orrs	r2, r6
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dmul+0x2a8>
 80012de:	e07f      	b.n	80013e0 <__aeabi_dmul+0x3a8>
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dmul+0x2ae>
 80012e4:	e0dc      	b.n	80014a0 <__aeabi_dmul+0x468>
 80012e6:	0030      	movs	r0, r6
 80012e8:	f000 fd52 	bl	8001d90 <__clzsi2>
 80012ec:	0002      	movs	r2, r0
 80012ee:	3a0b      	subs	r2, #11
 80012f0:	231d      	movs	r3, #29
 80012f2:	0001      	movs	r1, r0
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	4652      	mov	r2, sl
 80012f8:	3908      	subs	r1, #8
 80012fa:	40da      	lsrs	r2, r3
 80012fc:	408e      	lsls	r6, r1
 80012fe:	4316      	orrs	r6, r2
 8001300:	4652      	mov	r2, sl
 8001302:	408a      	lsls	r2, r1
 8001304:	9b00      	ldr	r3, [sp, #0]
 8001306:	4935      	ldr	r1, [pc, #212]	; (80013dc <__aeabi_dmul+0x3a4>)
 8001308:	1a18      	subs	r0, r3, r0
 800130a:	0003      	movs	r3, r0
 800130c:	468c      	mov	ip, r1
 800130e:	4463      	add	r3, ip
 8001310:	2000      	movs	r0, #0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	e6d3      	b.n	80010be <__aeabi_dmul+0x86>
 8001316:	0025      	movs	r5, r4
 8001318:	4305      	orrs	r5, r0
 800131a:	d04a      	beq.n	80013b2 <__aeabi_dmul+0x37a>
 800131c:	2c00      	cmp	r4, #0
 800131e:	d100      	bne.n	8001322 <__aeabi_dmul+0x2ea>
 8001320:	e0b0      	b.n	8001484 <__aeabi_dmul+0x44c>
 8001322:	0020      	movs	r0, r4
 8001324:	f000 fd34 	bl	8001d90 <__clzsi2>
 8001328:	0001      	movs	r1, r0
 800132a:	0002      	movs	r2, r0
 800132c:	390b      	subs	r1, #11
 800132e:	231d      	movs	r3, #29
 8001330:	0010      	movs	r0, r2
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	0031      	movs	r1, r6
 8001336:	0035      	movs	r5, r6
 8001338:	3808      	subs	r0, #8
 800133a:	4084      	lsls	r4, r0
 800133c:	40d9      	lsrs	r1, r3
 800133e:	4085      	lsls	r5, r0
 8001340:	430c      	orrs	r4, r1
 8001342:	4826      	ldr	r0, [pc, #152]	; (80013dc <__aeabi_dmul+0x3a4>)
 8001344:	1a83      	subs	r3, r0, r2
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	4699      	mov	r9, r3
 800134c:	469b      	mov	fp, r3
 800134e:	e697      	b.n	8001080 <__aeabi_dmul+0x48>
 8001350:	0005      	movs	r5, r0
 8001352:	4325      	orrs	r5, r4
 8001354:	d126      	bne.n	80013a4 <__aeabi_dmul+0x36c>
 8001356:	2208      	movs	r2, #8
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2302      	movs	r3, #2
 800135c:	2400      	movs	r4, #0
 800135e:	4691      	mov	r9, r2
 8001360:	469b      	mov	fp, r3
 8001362:	e68d      	b.n	8001080 <__aeabi_dmul+0x48>
 8001364:	4652      	mov	r2, sl
 8001366:	9b00      	ldr	r3, [sp, #0]
 8001368:	4332      	orrs	r2, r6
 800136a:	d110      	bne.n	800138e <__aeabi_dmul+0x356>
 800136c:	4915      	ldr	r1, [pc, #84]	; (80013c4 <__aeabi_dmul+0x38c>)
 800136e:	2600      	movs	r6, #0
 8001370:	468c      	mov	ip, r1
 8001372:	4463      	add	r3, ip
 8001374:	4649      	mov	r1, r9
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2302      	movs	r3, #2
 800137a:	4319      	orrs	r1, r3
 800137c:	4689      	mov	r9, r1
 800137e:	2002      	movs	r0, #2
 8001380:	e69d      	b.n	80010be <__aeabi_dmul+0x86>
 8001382:	465b      	mov	r3, fp
 8001384:	9701      	str	r7, [sp, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d000      	beq.n	800138c <__aeabi_dmul+0x354>
 800138a:	e6ad      	b.n	80010e8 <__aeabi_dmul+0xb0>
 800138c:	e6c3      	b.n	8001116 <__aeabi_dmul+0xde>
 800138e:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <__aeabi_dmul+0x38c>)
 8001390:	2003      	movs	r0, #3
 8001392:	4694      	mov	ip, r2
 8001394:	4463      	add	r3, ip
 8001396:	464a      	mov	r2, r9
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2303      	movs	r3, #3
 800139c:	431a      	orrs	r2, r3
 800139e:	4691      	mov	r9, r2
 80013a0:	4652      	mov	r2, sl
 80013a2:	e68c      	b.n	80010be <__aeabi_dmul+0x86>
 80013a4:	220c      	movs	r2, #12
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2303      	movs	r3, #3
 80013aa:	0005      	movs	r5, r0
 80013ac:	4691      	mov	r9, r2
 80013ae:	469b      	mov	fp, r3
 80013b0:	e666      	b.n	8001080 <__aeabi_dmul+0x48>
 80013b2:	2304      	movs	r3, #4
 80013b4:	4699      	mov	r9, r3
 80013b6:	2300      	movs	r3, #0
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	2400      	movs	r4, #0
 80013be:	469b      	mov	fp, r3
 80013c0:	e65e      	b.n	8001080 <__aeabi_dmul+0x48>
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	fffffc01 	.word	0xfffffc01
 80013cc:	08004788 	.word	0x08004788
 80013d0:	000003ff 	.word	0x000003ff
 80013d4:	feffffff 	.word	0xfeffffff
 80013d8:	000007fe 	.word	0x000007fe
 80013dc:	fffffc0d 	.word	0xfffffc0d
 80013e0:	4649      	mov	r1, r9
 80013e2:	2301      	movs	r3, #1
 80013e4:	4319      	orrs	r1, r3
 80013e6:	4689      	mov	r9, r1
 80013e8:	2600      	movs	r6, #0
 80013ea:	2001      	movs	r0, #1
 80013ec:	e667      	b.n	80010be <__aeabi_dmul+0x86>
 80013ee:	2300      	movs	r3, #0
 80013f0:	2480      	movs	r4, #128	; 0x80
 80013f2:	2500      	movs	r5, #0
 80013f4:	4a43      	ldr	r2, [pc, #268]	; (8001504 <__aeabi_dmul+0x4cc>)
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	e67e      	b.n	80010fa <__aeabi_dmul+0xc2>
 80013fc:	2001      	movs	r0, #1
 80013fe:	1a40      	subs	r0, r0, r1
 8001400:	2838      	cmp	r0, #56	; 0x38
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x3ce>
 8001404:	e676      	b.n	80010f4 <__aeabi_dmul+0xbc>
 8001406:	281f      	cmp	r0, #31
 8001408:	dd5b      	ble.n	80014c2 <__aeabi_dmul+0x48a>
 800140a:	221f      	movs	r2, #31
 800140c:	0023      	movs	r3, r4
 800140e:	4252      	negs	r2, r2
 8001410:	1a51      	subs	r1, r2, r1
 8001412:	40cb      	lsrs	r3, r1
 8001414:	0019      	movs	r1, r3
 8001416:	2820      	cmp	r0, #32
 8001418:	d003      	beq.n	8001422 <__aeabi_dmul+0x3ea>
 800141a:	4a3b      	ldr	r2, [pc, #236]	; (8001508 <__aeabi_dmul+0x4d0>)
 800141c:	4462      	add	r2, ip
 800141e:	4094      	lsls	r4, r2
 8001420:	4325      	orrs	r5, r4
 8001422:	1e6a      	subs	r2, r5, #1
 8001424:	4195      	sbcs	r5, r2
 8001426:	002a      	movs	r2, r5
 8001428:	430a      	orrs	r2, r1
 800142a:	2107      	movs	r1, #7
 800142c:	000d      	movs	r5, r1
 800142e:	2400      	movs	r4, #0
 8001430:	4015      	ands	r5, r2
 8001432:	4211      	tst	r1, r2
 8001434:	d05b      	beq.n	80014ee <__aeabi_dmul+0x4b6>
 8001436:	210f      	movs	r1, #15
 8001438:	2400      	movs	r4, #0
 800143a:	4011      	ands	r1, r2
 800143c:	2904      	cmp	r1, #4
 800143e:	d053      	beq.n	80014e8 <__aeabi_dmul+0x4b0>
 8001440:	1d11      	adds	r1, r2, #4
 8001442:	4291      	cmp	r1, r2
 8001444:	4192      	sbcs	r2, r2
 8001446:	4252      	negs	r2, r2
 8001448:	18a4      	adds	r4, r4, r2
 800144a:	000a      	movs	r2, r1
 800144c:	0223      	lsls	r3, r4, #8
 800144e:	d54b      	bpl.n	80014e8 <__aeabi_dmul+0x4b0>
 8001450:	2201      	movs	r2, #1
 8001452:	2400      	movs	r4, #0
 8001454:	2500      	movs	r5, #0
 8001456:	e650      	b.n	80010fa <__aeabi_dmul+0xc2>
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	031b      	lsls	r3, r3, #12
 800145c:	421c      	tst	r4, r3
 800145e:	d009      	beq.n	8001474 <__aeabi_dmul+0x43c>
 8001460:	421e      	tst	r6, r3
 8001462:	d107      	bne.n	8001474 <__aeabi_dmul+0x43c>
 8001464:	4333      	orrs	r3, r6
 8001466:	031c      	lsls	r4, r3, #12
 8001468:	4643      	mov	r3, r8
 800146a:	0015      	movs	r5, r2
 800146c:	0b24      	lsrs	r4, r4, #12
 800146e:	4a25      	ldr	r2, [pc, #148]	; (8001504 <__aeabi_dmul+0x4cc>)
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	e642      	b.n	80010fa <__aeabi_dmul+0xc2>
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	0312      	lsls	r2, r2, #12
 8001478:	4314      	orrs	r4, r2
 800147a:	0324      	lsls	r4, r4, #12
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <__aeabi_dmul+0x4cc>)
 800147e:	0b24      	lsrs	r4, r4, #12
 8001480:	9701      	str	r7, [sp, #4]
 8001482:	e63a      	b.n	80010fa <__aeabi_dmul+0xc2>
 8001484:	f000 fc84 	bl	8001d90 <__clzsi2>
 8001488:	0001      	movs	r1, r0
 800148a:	0002      	movs	r2, r0
 800148c:	3115      	adds	r1, #21
 800148e:	3220      	adds	r2, #32
 8001490:	291c      	cmp	r1, #28
 8001492:	dc00      	bgt.n	8001496 <__aeabi_dmul+0x45e>
 8001494:	e74b      	b.n	800132e <__aeabi_dmul+0x2f6>
 8001496:	0034      	movs	r4, r6
 8001498:	3808      	subs	r0, #8
 800149a:	2500      	movs	r5, #0
 800149c:	4084      	lsls	r4, r0
 800149e:	e750      	b.n	8001342 <__aeabi_dmul+0x30a>
 80014a0:	f000 fc76 	bl	8001d90 <__clzsi2>
 80014a4:	0003      	movs	r3, r0
 80014a6:	001a      	movs	r2, r3
 80014a8:	3215      	adds	r2, #21
 80014aa:	3020      	adds	r0, #32
 80014ac:	2a1c      	cmp	r2, #28
 80014ae:	dc00      	bgt.n	80014b2 <__aeabi_dmul+0x47a>
 80014b0:	e71e      	b.n	80012f0 <__aeabi_dmul+0x2b8>
 80014b2:	4656      	mov	r6, sl
 80014b4:	3b08      	subs	r3, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	409e      	lsls	r6, r3
 80014ba:	e723      	b.n	8001304 <__aeabi_dmul+0x2cc>
 80014bc:	9b00      	ldr	r3, [sp, #0]
 80014be:	469c      	mov	ip, r3
 80014c0:	e6e6      	b.n	8001290 <__aeabi_dmul+0x258>
 80014c2:	4912      	ldr	r1, [pc, #72]	; (800150c <__aeabi_dmul+0x4d4>)
 80014c4:	0022      	movs	r2, r4
 80014c6:	4461      	add	r1, ip
 80014c8:	002e      	movs	r6, r5
 80014ca:	408d      	lsls	r5, r1
 80014cc:	408a      	lsls	r2, r1
 80014ce:	40c6      	lsrs	r6, r0
 80014d0:	1e69      	subs	r1, r5, #1
 80014d2:	418d      	sbcs	r5, r1
 80014d4:	4332      	orrs	r2, r6
 80014d6:	432a      	orrs	r2, r5
 80014d8:	40c4      	lsrs	r4, r0
 80014da:	0753      	lsls	r3, r2, #29
 80014dc:	d0b6      	beq.n	800144c <__aeabi_dmul+0x414>
 80014de:	210f      	movs	r1, #15
 80014e0:	4011      	ands	r1, r2
 80014e2:	2904      	cmp	r1, #4
 80014e4:	d1ac      	bne.n	8001440 <__aeabi_dmul+0x408>
 80014e6:	e7b1      	b.n	800144c <__aeabi_dmul+0x414>
 80014e8:	0765      	lsls	r5, r4, #29
 80014ea:	0264      	lsls	r4, r4, #9
 80014ec:	0b24      	lsrs	r4, r4, #12
 80014ee:	08d2      	lsrs	r2, r2, #3
 80014f0:	4315      	orrs	r5, r2
 80014f2:	2200      	movs	r2, #0
 80014f4:	e601      	b.n	80010fa <__aeabi_dmul+0xc2>
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	0312      	lsls	r2, r2, #12
 80014fa:	4314      	orrs	r4, r2
 80014fc:	0324      	lsls	r4, r4, #12
 80014fe:	4a01      	ldr	r2, [pc, #4]	; (8001504 <__aeabi_dmul+0x4cc>)
 8001500:	0b24      	lsrs	r4, r4, #12
 8001502:	e5fa      	b.n	80010fa <__aeabi_dmul+0xc2>
 8001504:	000007ff 	.word	0x000007ff
 8001508:	0000043e 	.word	0x0000043e
 800150c:	0000041e 	.word	0x0000041e

08001510 <__aeabi_dsub>:
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	4657      	mov	r7, sl
 8001514:	464e      	mov	r6, r9
 8001516:	4645      	mov	r5, r8
 8001518:	46de      	mov	lr, fp
 800151a:	b5e0      	push	{r5, r6, r7, lr}
 800151c:	001e      	movs	r6, r3
 800151e:	0017      	movs	r7, r2
 8001520:	004a      	lsls	r2, r1, #1
 8001522:	030b      	lsls	r3, r1, #12
 8001524:	0d52      	lsrs	r2, r2, #21
 8001526:	0a5b      	lsrs	r3, r3, #9
 8001528:	4690      	mov	r8, r2
 800152a:	0f42      	lsrs	r2, r0, #29
 800152c:	431a      	orrs	r2, r3
 800152e:	0fcd      	lsrs	r5, r1, #31
 8001530:	4ccd      	ldr	r4, [pc, #820]	; (8001868 <__aeabi_dsub+0x358>)
 8001532:	0331      	lsls	r1, r6, #12
 8001534:	00c3      	lsls	r3, r0, #3
 8001536:	4694      	mov	ip, r2
 8001538:	0070      	lsls	r0, r6, #1
 800153a:	0f7a      	lsrs	r2, r7, #29
 800153c:	0a49      	lsrs	r1, r1, #9
 800153e:	00ff      	lsls	r7, r7, #3
 8001540:	469a      	mov	sl, r3
 8001542:	46b9      	mov	r9, r7
 8001544:	0d40      	lsrs	r0, r0, #21
 8001546:	0ff6      	lsrs	r6, r6, #31
 8001548:	4311      	orrs	r1, r2
 800154a:	42a0      	cmp	r0, r4
 800154c:	d100      	bne.n	8001550 <__aeabi_dsub+0x40>
 800154e:	e0b1      	b.n	80016b4 <__aeabi_dsub+0x1a4>
 8001550:	2201      	movs	r2, #1
 8001552:	4056      	eors	r6, r2
 8001554:	46b3      	mov	fp, r6
 8001556:	42b5      	cmp	r5, r6
 8001558:	d100      	bne.n	800155c <__aeabi_dsub+0x4c>
 800155a:	e088      	b.n	800166e <__aeabi_dsub+0x15e>
 800155c:	4642      	mov	r2, r8
 800155e:	1a12      	subs	r2, r2, r0
 8001560:	2a00      	cmp	r2, #0
 8001562:	dc00      	bgt.n	8001566 <__aeabi_dsub+0x56>
 8001564:	e0ae      	b.n	80016c4 <__aeabi_dsub+0x1b4>
 8001566:	2800      	cmp	r0, #0
 8001568:	d100      	bne.n	800156c <__aeabi_dsub+0x5c>
 800156a:	e0c1      	b.n	80016f0 <__aeabi_dsub+0x1e0>
 800156c:	48be      	ldr	r0, [pc, #760]	; (8001868 <__aeabi_dsub+0x358>)
 800156e:	4580      	cmp	r8, r0
 8001570:	d100      	bne.n	8001574 <__aeabi_dsub+0x64>
 8001572:	e151      	b.n	8001818 <__aeabi_dsub+0x308>
 8001574:	2080      	movs	r0, #128	; 0x80
 8001576:	0400      	lsls	r0, r0, #16
 8001578:	4301      	orrs	r1, r0
 800157a:	2a38      	cmp	r2, #56	; 0x38
 800157c:	dd00      	ble.n	8001580 <__aeabi_dsub+0x70>
 800157e:	e17b      	b.n	8001878 <__aeabi_dsub+0x368>
 8001580:	2a1f      	cmp	r2, #31
 8001582:	dd00      	ble.n	8001586 <__aeabi_dsub+0x76>
 8001584:	e1ee      	b.n	8001964 <__aeabi_dsub+0x454>
 8001586:	2020      	movs	r0, #32
 8001588:	003e      	movs	r6, r7
 800158a:	1a80      	subs	r0, r0, r2
 800158c:	000c      	movs	r4, r1
 800158e:	40d6      	lsrs	r6, r2
 8001590:	40d1      	lsrs	r1, r2
 8001592:	4087      	lsls	r7, r0
 8001594:	4662      	mov	r2, ip
 8001596:	4084      	lsls	r4, r0
 8001598:	1a52      	subs	r2, r2, r1
 800159a:	1e78      	subs	r0, r7, #1
 800159c:	4187      	sbcs	r7, r0
 800159e:	4694      	mov	ip, r2
 80015a0:	4334      	orrs	r4, r6
 80015a2:	4327      	orrs	r7, r4
 80015a4:	1bdc      	subs	r4, r3, r7
 80015a6:	42a3      	cmp	r3, r4
 80015a8:	419b      	sbcs	r3, r3
 80015aa:	4662      	mov	r2, ip
 80015ac:	425b      	negs	r3, r3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4699      	mov	r9, r3
 80015b2:	464b      	mov	r3, r9
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	d400      	bmi.n	80015ba <__aeabi_dsub+0xaa>
 80015b8:	e118      	b.n	80017ec <__aeabi_dsub+0x2dc>
 80015ba:	464b      	mov	r3, r9
 80015bc:	0258      	lsls	r0, r3, #9
 80015be:	0a43      	lsrs	r3, r0, #9
 80015c0:	4699      	mov	r9, r3
 80015c2:	464b      	mov	r3, r9
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d100      	bne.n	80015ca <__aeabi_dsub+0xba>
 80015c8:	e137      	b.n	800183a <__aeabi_dsub+0x32a>
 80015ca:	4648      	mov	r0, r9
 80015cc:	f000 fbe0 	bl	8001d90 <__clzsi2>
 80015d0:	0001      	movs	r1, r0
 80015d2:	3908      	subs	r1, #8
 80015d4:	2320      	movs	r3, #32
 80015d6:	0022      	movs	r2, r4
 80015d8:	4648      	mov	r0, r9
 80015da:	1a5b      	subs	r3, r3, r1
 80015dc:	40da      	lsrs	r2, r3
 80015de:	4088      	lsls	r0, r1
 80015e0:	408c      	lsls	r4, r1
 80015e2:	4643      	mov	r3, r8
 80015e4:	4310      	orrs	r0, r2
 80015e6:	4588      	cmp	r8, r1
 80015e8:	dd00      	ble.n	80015ec <__aeabi_dsub+0xdc>
 80015ea:	e136      	b.n	800185a <__aeabi_dsub+0x34a>
 80015ec:	1ac9      	subs	r1, r1, r3
 80015ee:	1c4b      	adds	r3, r1, #1
 80015f0:	2b1f      	cmp	r3, #31
 80015f2:	dd00      	ble.n	80015f6 <__aeabi_dsub+0xe6>
 80015f4:	e0ea      	b.n	80017cc <__aeabi_dsub+0x2bc>
 80015f6:	2220      	movs	r2, #32
 80015f8:	0026      	movs	r6, r4
 80015fa:	1ad2      	subs	r2, r2, r3
 80015fc:	0001      	movs	r1, r0
 80015fe:	4094      	lsls	r4, r2
 8001600:	40de      	lsrs	r6, r3
 8001602:	40d8      	lsrs	r0, r3
 8001604:	2300      	movs	r3, #0
 8001606:	4091      	lsls	r1, r2
 8001608:	1e62      	subs	r2, r4, #1
 800160a:	4194      	sbcs	r4, r2
 800160c:	4681      	mov	r9, r0
 800160e:	4698      	mov	r8, r3
 8001610:	4331      	orrs	r1, r6
 8001612:	430c      	orrs	r4, r1
 8001614:	0763      	lsls	r3, r4, #29
 8001616:	d009      	beq.n	800162c <__aeabi_dsub+0x11c>
 8001618:	230f      	movs	r3, #15
 800161a:	4023      	ands	r3, r4
 800161c:	2b04      	cmp	r3, #4
 800161e:	d005      	beq.n	800162c <__aeabi_dsub+0x11c>
 8001620:	1d23      	adds	r3, r4, #4
 8001622:	42a3      	cmp	r3, r4
 8001624:	41a4      	sbcs	r4, r4
 8001626:	4264      	negs	r4, r4
 8001628:	44a1      	add	r9, r4
 800162a:	001c      	movs	r4, r3
 800162c:	464b      	mov	r3, r9
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	d400      	bmi.n	8001634 <__aeabi_dsub+0x124>
 8001632:	e0de      	b.n	80017f2 <__aeabi_dsub+0x2e2>
 8001634:	4641      	mov	r1, r8
 8001636:	4b8c      	ldr	r3, [pc, #560]	; (8001868 <__aeabi_dsub+0x358>)
 8001638:	3101      	adds	r1, #1
 800163a:	4299      	cmp	r1, r3
 800163c:	d100      	bne.n	8001640 <__aeabi_dsub+0x130>
 800163e:	e0e7      	b.n	8001810 <__aeabi_dsub+0x300>
 8001640:	464b      	mov	r3, r9
 8001642:	488a      	ldr	r0, [pc, #552]	; (800186c <__aeabi_dsub+0x35c>)
 8001644:	08e4      	lsrs	r4, r4, #3
 8001646:	4003      	ands	r3, r0
 8001648:	0018      	movs	r0, r3
 800164a:	0549      	lsls	r1, r1, #21
 800164c:	075b      	lsls	r3, r3, #29
 800164e:	0240      	lsls	r0, r0, #9
 8001650:	4323      	orrs	r3, r4
 8001652:	0d4a      	lsrs	r2, r1, #21
 8001654:	0b04      	lsrs	r4, r0, #12
 8001656:	0512      	lsls	r2, r2, #20
 8001658:	07ed      	lsls	r5, r5, #31
 800165a:	4322      	orrs	r2, r4
 800165c:	432a      	orrs	r2, r5
 800165e:	0018      	movs	r0, r3
 8001660:	0011      	movs	r1, r2
 8001662:	bcf0      	pop	{r4, r5, r6, r7}
 8001664:	46bb      	mov	fp, r7
 8001666:	46b2      	mov	sl, r6
 8001668:	46a9      	mov	r9, r5
 800166a:	46a0      	mov	r8, r4
 800166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800166e:	4642      	mov	r2, r8
 8001670:	1a12      	subs	r2, r2, r0
 8001672:	2a00      	cmp	r2, #0
 8001674:	dd52      	ble.n	800171c <__aeabi_dsub+0x20c>
 8001676:	2800      	cmp	r0, #0
 8001678:	d100      	bne.n	800167c <__aeabi_dsub+0x16c>
 800167a:	e09c      	b.n	80017b6 <__aeabi_dsub+0x2a6>
 800167c:	45a0      	cmp	r8, r4
 800167e:	d100      	bne.n	8001682 <__aeabi_dsub+0x172>
 8001680:	e0ca      	b.n	8001818 <__aeabi_dsub+0x308>
 8001682:	2080      	movs	r0, #128	; 0x80
 8001684:	0400      	lsls	r0, r0, #16
 8001686:	4301      	orrs	r1, r0
 8001688:	2a38      	cmp	r2, #56	; 0x38
 800168a:	dd00      	ble.n	800168e <__aeabi_dsub+0x17e>
 800168c:	e149      	b.n	8001922 <__aeabi_dsub+0x412>
 800168e:	2a1f      	cmp	r2, #31
 8001690:	dc00      	bgt.n	8001694 <__aeabi_dsub+0x184>
 8001692:	e197      	b.n	80019c4 <__aeabi_dsub+0x4b4>
 8001694:	0010      	movs	r0, r2
 8001696:	000e      	movs	r6, r1
 8001698:	3820      	subs	r0, #32
 800169a:	40c6      	lsrs	r6, r0
 800169c:	2a20      	cmp	r2, #32
 800169e:	d004      	beq.n	80016aa <__aeabi_dsub+0x19a>
 80016a0:	2040      	movs	r0, #64	; 0x40
 80016a2:	1a82      	subs	r2, r0, r2
 80016a4:	4091      	lsls	r1, r2
 80016a6:	430f      	orrs	r7, r1
 80016a8:	46b9      	mov	r9, r7
 80016aa:	464c      	mov	r4, r9
 80016ac:	1e62      	subs	r2, r4, #1
 80016ae:	4194      	sbcs	r4, r2
 80016b0:	4334      	orrs	r4, r6
 80016b2:	e13a      	b.n	800192a <__aeabi_dsub+0x41a>
 80016b4:	000a      	movs	r2, r1
 80016b6:	433a      	orrs	r2, r7
 80016b8:	d028      	beq.n	800170c <__aeabi_dsub+0x1fc>
 80016ba:	46b3      	mov	fp, r6
 80016bc:	42b5      	cmp	r5, r6
 80016be:	d02b      	beq.n	8001718 <__aeabi_dsub+0x208>
 80016c0:	4a6b      	ldr	r2, [pc, #428]	; (8001870 <__aeabi_dsub+0x360>)
 80016c2:	4442      	add	r2, r8
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d05d      	beq.n	8001784 <__aeabi_dsub+0x274>
 80016c8:	4642      	mov	r2, r8
 80016ca:	4644      	mov	r4, r8
 80016cc:	1a82      	subs	r2, r0, r2
 80016ce:	2c00      	cmp	r4, #0
 80016d0:	d000      	beq.n	80016d4 <__aeabi_dsub+0x1c4>
 80016d2:	e0f5      	b.n	80018c0 <__aeabi_dsub+0x3b0>
 80016d4:	4665      	mov	r5, ip
 80016d6:	431d      	orrs	r5, r3
 80016d8:	d100      	bne.n	80016dc <__aeabi_dsub+0x1cc>
 80016da:	e19c      	b.n	8001a16 <__aeabi_dsub+0x506>
 80016dc:	1e55      	subs	r5, r2, #1
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dsub+0x1d4>
 80016e2:	e1fb      	b.n	8001adc <__aeabi_dsub+0x5cc>
 80016e4:	4c60      	ldr	r4, [pc, #384]	; (8001868 <__aeabi_dsub+0x358>)
 80016e6:	42a2      	cmp	r2, r4
 80016e8:	d100      	bne.n	80016ec <__aeabi_dsub+0x1dc>
 80016ea:	e1bd      	b.n	8001a68 <__aeabi_dsub+0x558>
 80016ec:	002a      	movs	r2, r5
 80016ee:	e0f0      	b.n	80018d2 <__aeabi_dsub+0x3c2>
 80016f0:	0008      	movs	r0, r1
 80016f2:	4338      	orrs	r0, r7
 80016f4:	d100      	bne.n	80016f8 <__aeabi_dsub+0x1e8>
 80016f6:	e0c3      	b.n	8001880 <__aeabi_dsub+0x370>
 80016f8:	1e50      	subs	r0, r2, #1
 80016fa:	2a01      	cmp	r2, #1
 80016fc:	d100      	bne.n	8001700 <__aeabi_dsub+0x1f0>
 80016fe:	e1a8      	b.n	8001a52 <__aeabi_dsub+0x542>
 8001700:	4c59      	ldr	r4, [pc, #356]	; (8001868 <__aeabi_dsub+0x358>)
 8001702:	42a2      	cmp	r2, r4
 8001704:	d100      	bne.n	8001708 <__aeabi_dsub+0x1f8>
 8001706:	e087      	b.n	8001818 <__aeabi_dsub+0x308>
 8001708:	0002      	movs	r2, r0
 800170a:	e736      	b.n	800157a <__aeabi_dsub+0x6a>
 800170c:	2201      	movs	r2, #1
 800170e:	4056      	eors	r6, r2
 8001710:	46b3      	mov	fp, r6
 8001712:	42b5      	cmp	r5, r6
 8001714:	d000      	beq.n	8001718 <__aeabi_dsub+0x208>
 8001716:	e721      	b.n	800155c <__aeabi_dsub+0x4c>
 8001718:	4a55      	ldr	r2, [pc, #340]	; (8001870 <__aeabi_dsub+0x360>)
 800171a:	4442      	add	r2, r8
 800171c:	2a00      	cmp	r2, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dsub+0x212>
 8001720:	e0b5      	b.n	800188e <__aeabi_dsub+0x37e>
 8001722:	4642      	mov	r2, r8
 8001724:	4644      	mov	r4, r8
 8001726:	1a82      	subs	r2, r0, r2
 8001728:	2c00      	cmp	r4, #0
 800172a:	d100      	bne.n	800172e <__aeabi_dsub+0x21e>
 800172c:	e138      	b.n	80019a0 <__aeabi_dsub+0x490>
 800172e:	4e4e      	ldr	r6, [pc, #312]	; (8001868 <__aeabi_dsub+0x358>)
 8001730:	42b0      	cmp	r0, r6
 8001732:	d100      	bne.n	8001736 <__aeabi_dsub+0x226>
 8001734:	e1de      	b.n	8001af4 <__aeabi_dsub+0x5e4>
 8001736:	2680      	movs	r6, #128	; 0x80
 8001738:	4664      	mov	r4, ip
 800173a:	0436      	lsls	r6, r6, #16
 800173c:	4334      	orrs	r4, r6
 800173e:	46a4      	mov	ip, r4
 8001740:	2a38      	cmp	r2, #56	; 0x38
 8001742:	dd00      	ble.n	8001746 <__aeabi_dsub+0x236>
 8001744:	e196      	b.n	8001a74 <__aeabi_dsub+0x564>
 8001746:	2a1f      	cmp	r2, #31
 8001748:	dd00      	ble.n	800174c <__aeabi_dsub+0x23c>
 800174a:	e224      	b.n	8001b96 <__aeabi_dsub+0x686>
 800174c:	2620      	movs	r6, #32
 800174e:	1ab4      	subs	r4, r6, r2
 8001750:	46a2      	mov	sl, r4
 8001752:	4664      	mov	r4, ip
 8001754:	4656      	mov	r6, sl
 8001756:	40b4      	lsls	r4, r6
 8001758:	46a1      	mov	r9, r4
 800175a:	001c      	movs	r4, r3
 800175c:	464e      	mov	r6, r9
 800175e:	40d4      	lsrs	r4, r2
 8001760:	4326      	orrs	r6, r4
 8001762:	0034      	movs	r4, r6
 8001764:	4656      	mov	r6, sl
 8001766:	40b3      	lsls	r3, r6
 8001768:	1e5e      	subs	r6, r3, #1
 800176a:	41b3      	sbcs	r3, r6
 800176c:	431c      	orrs	r4, r3
 800176e:	4663      	mov	r3, ip
 8001770:	40d3      	lsrs	r3, r2
 8001772:	18c9      	adds	r1, r1, r3
 8001774:	19e4      	adds	r4, r4, r7
 8001776:	42bc      	cmp	r4, r7
 8001778:	41bf      	sbcs	r7, r7
 800177a:	427f      	negs	r7, r7
 800177c:	46b9      	mov	r9, r7
 800177e:	4680      	mov	r8, r0
 8001780:	4489      	add	r9, r1
 8001782:	e0d8      	b.n	8001936 <__aeabi_dsub+0x426>
 8001784:	4640      	mov	r0, r8
 8001786:	4c3b      	ldr	r4, [pc, #236]	; (8001874 <__aeabi_dsub+0x364>)
 8001788:	3001      	adds	r0, #1
 800178a:	4220      	tst	r0, r4
 800178c:	d000      	beq.n	8001790 <__aeabi_dsub+0x280>
 800178e:	e0b4      	b.n	80018fa <__aeabi_dsub+0x3ea>
 8001790:	4640      	mov	r0, r8
 8001792:	2800      	cmp	r0, #0
 8001794:	d000      	beq.n	8001798 <__aeabi_dsub+0x288>
 8001796:	e144      	b.n	8001a22 <__aeabi_dsub+0x512>
 8001798:	4660      	mov	r0, ip
 800179a:	4318      	orrs	r0, r3
 800179c:	d100      	bne.n	80017a0 <__aeabi_dsub+0x290>
 800179e:	e190      	b.n	8001ac2 <__aeabi_dsub+0x5b2>
 80017a0:	0008      	movs	r0, r1
 80017a2:	4338      	orrs	r0, r7
 80017a4:	d000      	beq.n	80017a8 <__aeabi_dsub+0x298>
 80017a6:	e1aa      	b.n	8001afe <__aeabi_dsub+0x5ee>
 80017a8:	4661      	mov	r1, ip
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	0749      	lsls	r1, r1, #29
 80017ae:	430b      	orrs	r3, r1
 80017b0:	4661      	mov	r1, ip
 80017b2:	08cc      	lsrs	r4, r1, #3
 80017b4:	e027      	b.n	8001806 <__aeabi_dsub+0x2f6>
 80017b6:	0008      	movs	r0, r1
 80017b8:	4338      	orrs	r0, r7
 80017ba:	d061      	beq.n	8001880 <__aeabi_dsub+0x370>
 80017bc:	1e50      	subs	r0, r2, #1
 80017be:	2a01      	cmp	r2, #1
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dsub+0x2b4>
 80017c2:	e139      	b.n	8001a38 <__aeabi_dsub+0x528>
 80017c4:	42a2      	cmp	r2, r4
 80017c6:	d027      	beq.n	8001818 <__aeabi_dsub+0x308>
 80017c8:	0002      	movs	r2, r0
 80017ca:	e75d      	b.n	8001688 <__aeabi_dsub+0x178>
 80017cc:	0002      	movs	r2, r0
 80017ce:	391f      	subs	r1, #31
 80017d0:	40ca      	lsrs	r2, r1
 80017d2:	0011      	movs	r1, r2
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	d003      	beq.n	80017e0 <__aeabi_dsub+0x2d0>
 80017d8:	2240      	movs	r2, #64	; 0x40
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4098      	lsls	r0, r3
 80017de:	4304      	orrs	r4, r0
 80017e0:	1e63      	subs	r3, r4, #1
 80017e2:	419c      	sbcs	r4, r3
 80017e4:	2300      	movs	r3, #0
 80017e6:	4699      	mov	r9, r3
 80017e8:	4698      	mov	r8, r3
 80017ea:	430c      	orrs	r4, r1
 80017ec:	0763      	lsls	r3, r4, #29
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dsub+0x2e2>
 80017f0:	e712      	b.n	8001618 <__aeabi_dsub+0x108>
 80017f2:	464b      	mov	r3, r9
 80017f4:	464a      	mov	r2, r9
 80017f6:	08e4      	lsrs	r4, r4, #3
 80017f8:	075b      	lsls	r3, r3, #29
 80017fa:	4323      	orrs	r3, r4
 80017fc:	08d4      	lsrs	r4, r2, #3
 80017fe:	4642      	mov	r2, r8
 8001800:	4919      	ldr	r1, [pc, #100]	; (8001868 <__aeabi_dsub+0x358>)
 8001802:	428a      	cmp	r2, r1
 8001804:	d00e      	beq.n	8001824 <__aeabi_dsub+0x314>
 8001806:	0324      	lsls	r4, r4, #12
 8001808:	0552      	lsls	r2, r2, #21
 800180a:	0b24      	lsrs	r4, r4, #12
 800180c:	0d52      	lsrs	r2, r2, #21
 800180e:	e722      	b.n	8001656 <__aeabi_dsub+0x146>
 8001810:	000a      	movs	r2, r1
 8001812:	2400      	movs	r4, #0
 8001814:	2300      	movs	r3, #0
 8001816:	e71e      	b.n	8001656 <__aeabi_dsub+0x146>
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	4662      	mov	r2, ip
 800181c:	0752      	lsls	r2, r2, #29
 800181e:	4313      	orrs	r3, r2
 8001820:	4662      	mov	r2, ip
 8001822:	08d4      	lsrs	r4, r2, #3
 8001824:	001a      	movs	r2, r3
 8001826:	4322      	orrs	r2, r4
 8001828:	d100      	bne.n	800182c <__aeabi_dsub+0x31c>
 800182a:	e1fc      	b.n	8001c26 <__aeabi_dsub+0x716>
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	0312      	lsls	r2, r2, #12
 8001830:	4314      	orrs	r4, r2
 8001832:	0324      	lsls	r4, r4, #12
 8001834:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <__aeabi_dsub+0x358>)
 8001836:	0b24      	lsrs	r4, r4, #12
 8001838:	e70d      	b.n	8001656 <__aeabi_dsub+0x146>
 800183a:	0020      	movs	r0, r4
 800183c:	f000 faa8 	bl	8001d90 <__clzsi2>
 8001840:	0001      	movs	r1, r0
 8001842:	3118      	adds	r1, #24
 8001844:	291f      	cmp	r1, #31
 8001846:	dc00      	bgt.n	800184a <__aeabi_dsub+0x33a>
 8001848:	e6c4      	b.n	80015d4 <__aeabi_dsub+0xc4>
 800184a:	3808      	subs	r0, #8
 800184c:	4084      	lsls	r4, r0
 800184e:	4643      	mov	r3, r8
 8001850:	0020      	movs	r0, r4
 8001852:	2400      	movs	r4, #0
 8001854:	4588      	cmp	r8, r1
 8001856:	dc00      	bgt.n	800185a <__aeabi_dsub+0x34a>
 8001858:	e6c8      	b.n	80015ec <__aeabi_dsub+0xdc>
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__aeabi_dsub+0x35c>)
 800185c:	1a5b      	subs	r3, r3, r1
 800185e:	4010      	ands	r0, r2
 8001860:	4698      	mov	r8, r3
 8001862:	4681      	mov	r9, r0
 8001864:	e6d6      	b.n	8001614 <__aeabi_dsub+0x104>
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	000007ff 	.word	0x000007ff
 800186c:	ff7fffff 	.word	0xff7fffff
 8001870:	fffff801 	.word	0xfffff801
 8001874:	000007fe 	.word	0x000007fe
 8001878:	430f      	orrs	r7, r1
 800187a:	1e7a      	subs	r2, r7, #1
 800187c:	4197      	sbcs	r7, r2
 800187e:	e691      	b.n	80015a4 <__aeabi_dsub+0x94>
 8001880:	4661      	mov	r1, ip
 8001882:	08db      	lsrs	r3, r3, #3
 8001884:	0749      	lsls	r1, r1, #29
 8001886:	430b      	orrs	r3, r1
 8001888:	4661      	mov	r1, ip
 800188a:	08cc      	lsrs	r4, r1, #3
 800188c:	e7b8      	b.n	8001800 <__aeabi_dsub+0x2f0>
 800188e:	4640      	mov	r0, r8
 8001890:	4cd3      	ldr	r4, [pc, #844]	; (8001be0 <__aeabi_dsub+0x6d0>)
 8001892:	3001      	adds	r0, #1
 8001894:	4220      	tst	r0, r4
 8001896:	d000      	beq.n	800189a <__aeabi_dsub+0x38a>
 8001898:	e0a2      	b.n	80019e0 <__aeabi_dsub+0x4d0>
 800189a:	4640      	mov	r0, r8
 800189c:	2800      	cmp	r0, #0
 800189e:	d000      	beq.n	80018a2 <__aeabi_dsub+0x392>
 80018a0:	e101      	b.n	8001aa6 <__aeabi_dsub+0x596>
 80018a2:	4660      	mov	r0, ip
 80018a4:	4318      	orrs	r0, r3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dsub+0x39a>
 80018a8:	e15e      	b.n	8001b68 <__aeabi_dsub+0x658>
 80018aa:	0008      	movs	r0, r1
 80018ac:	4338      	orrs	r0, r7
 80018ae:	d000      	beq.n	80018b2 <__aeabi_dsub+0x3a2>
 80018b0:	e15f      	b.n	8001b72 <__aeabi_dsub+0x662>
 80018b2:	4661      	mov	r1, ip
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	0749      	lsls	r1, r1, #29
 80018b8:	430b      	orrs	r3, r1
 80018ba:	4661      	mov	r1, ip
 80018bc:	08cc      	lsrs	r4, r1, #3
 80018be:	e7a2      	b.n	8001806 <__aeabi_dsub+0x2f6>
 80018c0:	4dc8      	ldr	r5, [pc, #800]	; (8001be4 <__aeabi_dsub+0x6d4>)
 80018c2:	42a8      	cmp	r0, r5
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x3b8>
 80018c6:	e0cf      	b.n	8001a68 <__aeabi_dsub+0x558>
 80018c8:	2580      	movs	r5, #128	; 0x80
 80018ca:	4664      	mov	r4, ip
 80018cc:	042d      	lsls	r5, r5, #16
 80018ce:	432c      	orrs	r4, r5
 80018d0:	46a4      	mov	ip, r4
 80018d2:	2a38      	cmp	r2, #56	; 0x38
 80018d4:	dc56      	bgt.n	8001984 <__aeabi_dsub+0x474>
 80018d6:	2a1f      	cmp	r2, #31
 80018d8:	dd00      	ble.n	80018dc <__aeabi_dsub+0x3cc>
 80018da:	e0d1      	b.n	8001a80 <__aeabi_dsub+0x570>
 80018dc:	2520      	movs	r5, #32
 80018de:	001e      	movs	r6, r3
 80018e0:	1aad      	subs	r5, r5, r2
 80018e2:	4664      	mov	r4, ip
 80018e4:	40ab      	lsls	r3, r5
 80018e6:	40ac      	lsls	r4, r5
 80018e8:	40d6      	lsrs	r6, r2
 80018ea:	1e5d      	subs	r5, r3, #1
 80018ec:	41ab      	sbcs	r3, r5
 80018ee:	4334      	orrs	r4, r6
 80018f0:	4323      	orrs	r3, r4
 80018f2:	4664      	mov	r4, ip
 80018f4:	40d4      	lsrs	r4, r2
 80018f6:	1b09      	subs	r1, r1, r4
 80018f8:	e049      	b.n	800198e <__aeabi_dsub+0x47e>
 80018fa:	4660      	mov	r0, ip
 80018fc:	1bdc      	subs	r4, r3, r7
 80018fe:	1a46      	subs	r6, r0, r1
 8001900:	42a3      	cmp	r3, r4
 8001902:	4180      	sbcs	r0, r0
 8001904:	4240      	negs	r0, r0
 8001906:	4681      	mov	r9, r0
 8001908:	0030      	movs	r0, r6
 800190a:	464e      	mov	r6, r9
 800190c:	1b80      	subs	r0, r0, r6
 800190e:	4681      	mov	r9, r0
 8001910:	0200      	lsls	r0, r0, #8
 8001912:	d476      	bmi.n	8001a02 <__aeabi_dsub+0x4f2>
 8001914:	464b      	mov	r3, r9
 8001916:	4323      	orrs	r3, r4
 8001918:	d000      	beq.n	800191c <__aeabi_dsub+0x40c>
 800191a:	e652      	b.n	80015c2 <__aeabi_dsub+0xb2>
 800191c:	2400      	movs	r4, #0
 800191e:	2500      	movs	r5, #0
 8001920:	e771      	b.n	8001806 <__aeabi_dsub+0x2f6>
 8001922:	4339      	orrs	r1, r7
 8001924:	000c      	movs	r4, r1
 8001926:	1e62      	subs	r2, r4, #1
 8001928:	4194      	sbcs	r4, r2
 800192a:	18e4      	adds	r4, r4, r3
 800192c:	429c      	cmp	r4, r3
 800192e:	419b      	sbcs	r3, r3
 8001930:	425b      	negs	r3, r3
 8001932:	4463      	add	r3, ip
 8001934:	4699      	mov	r9, r3
 8001936:	464b      	mov	r3, r9
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	d400      	bmi.n	800193e <__aeabi_dsub+0x42e>
 800193c:	e756      	b.n	80017ec <__aeabi_dsub+0x2dc>
 800193e:	2301      	movs	r3, #1
 8001940:	469c      	mov	ip, r3
 8001942:	4ba8      	ldr	r3, [pc, #672]	; (8001be4 <__aeabi_dsub+0x6d4>)
 8001944:	44e0      	add	r8, ip
 8001946:	4598      	cmp	r8, r3
 8001948:	d038      	beq.n	80019bc <__aeabi_dsub+0x4ac>
 800194a:	464b      	mov	r3, r9
 800194c:	48a6      	ldr	r0, [pc, #664]	; (8001be8 <__aeabi_dsub+0x6d8>)
 800194e:	2201      	movs	r2, #1
 8001950:	4003      	ands	r3, r0
 8001952:	0018      	movs	r0, r3
 8001954:	0863      	lsrs	r3, r4, #1
 8001956:	4014      	ands	r4, r2
 8001958:	431c      	orrs	r4, r3
 800195a:	07c3      	lsls	r3, r0, #31
 800195c:	431c      	orrs	r4, r3
 800195e:	0843      	lsrs	r3, r0, #1
 8001960:	4699      	mov	r9, r3
 8001962:	e657      	b.n	8001614 <__aeabi_dsub+0x104>
 8001964:	0010      	movs	r0, r2
 8001966:	000e      	movs	r6, r1
 8001968:	3820      	subs	r0, #32
 800196a:	40c6      	lsrs	r6, r0
 800196c:	2a20      	cmp	r2, #32
 800196e:	d004      	beq.n	800197a <__aeabi_dsub+0x46a>
 8001970:	2040      	movs	r0, #64	; 0x40
 8001972:	1a82      	subs	r2, r0, r2
 8001974:	4091      	lsls	r1, r2
 8001976:	430f      	orrs	r7, r1
 8001978:	46b9      	mov	r9, r7
 800197a:	464f      	mov	r7, r9
 800197c:	1e7a      	subs	r2, r7, #1
 800197e:	4197      	sbcs	r7, r2
 8001980:	4337      	orrs	r7, r6
 8001982:	e60f      	b.n	80015a4 <__aeabi_dsub+0x94>
 8001984:	4662      	mov	r2, ip
 8001986:	431a      	orrs	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	4193      	sbcs	r3, r2
 800198e:	1afc      	subs	r4, r7, r3
 8001990:	42a7      	cmp	r7, r4
 8001992:	41bf      	sbcs	r7, r7
 8001994:	427f      	negs	r7, r7
 8001996:	1bcb      	subs	r3, r1, r7
 8001998:	4699      	mov	r9, r3
 800199a:	465d      	mov	r5, fp
 800199c:	4680      	mov	r8, r0
 800199e:	e608      	b.n	80015b2 <__aeabi_dsub+0xa2>
 80019a0:	4666      	mov	r6, ip
 80019a2:	431e      	orrs	r6, r3
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x498>
 80019a6:	e0be      	b.n	8001b26 <__aeabi_dsub+0x616>
 80019a8:	1e56      	subs	r6, r2, #1
 80019aa:	2a01      	cmp	r2, #1
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x4a0>
 80019ae:	e109      	b.n	8001bc4 <__aeabi_dsub+0x6b4>
 80019b0:	4c8c      	ldr	r4, [pc, #560]	; (8001be4 <__aeabi_dsub+0x6d4>)
 80019b2:	42a2      	cmp	r2, r4
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dsub+0x4a8>
 80019b6:	e119      	b.n	8001bec <__aeabi_dsub+0x6dc>
 80019b8:	0032      	movs	r2, r6
 80019ba:	e6c1      	b.n	8001740 <__aeabi_dsub+0x230>
 80019bc:	4642      	mov	r2, r8
 80019be:	2400      	movs	r4, #0
 80019c0:	2300      	movs	r3, #0
 80019c2:	e648      	b.n	8001656 <__aeabi_dsub+0x146>
 80019c4:	2020      	movs	r0, #32
 80019c6:	000c      	movs	r4, r1
 80019c8:	1a80      	subs	r0, r0, r2
 80019ca:	003e      	movs	r6, r7
 80019cc:	4087      	lsls	r7, r0
 80019ce:	4084      	lsls	r4, r0
 80019d0:	40d6      	lsrs	r6, r2
 80019d2:	1e78      	subs	r0, r7, #1
 80019d4:	4187      	sbcs	r7, r0
 80019d6:	40d1      	lsrs	r1, r2
 80019d8:	4334      	orrs	r4, r6
 80019da:	433c      	orrs	r4, r7
 80019dc:	448c      	add	ip, r1
 80019de:	e7a4      	b.n	800192a <__aeabi_dsub+0x41a>
 80019e0:	4a80      	ldr	r2, [pc, #512]	; (8001be4 <__aeabi_dsub+0x6d4>)
 80019e2:	4290      	cmp	r0, r2
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x4d8>
 80019e6:	e0e9      	b.n	8001bbc <__aeabi_dsub+0x6ac>
 80019e8:	19df      	adds	r7, r3, r7
 80019ea:	429f      	cmp	r7, r3
 80019ec:	419b      	sbcs	r3, r3
 80019ee:	4461      	add	r1, ip
 80019f0:	425b      	negs	r3, r3
 80019f2:	18c9      	adds	r1, r1, r3
 80019f4:	07cc      	lsls	r4, r1, #31
 80019f6:	087f      	lsrs	r7, r7, #1
 80019f8:	084b      	lsrs	r3, r1, #1
 80019fa:	4699      	mov	r9, r3
 80019fc:	4680      	mov	r8, r0
 80019fe:	433c      	orrs	r4, r7
 8001a00:	e6f4      	b.n	80017ec <__aeabi_dsub+0x2dc>
 8001a02:	1afc      	subs	r4, r7, r3
 8001a04:	42a7      	cmp	r7, r4
 8001a06:	41bf      	sbcs	r7, r7
 8001a08:	4663      	mov	r3, ip
 8001a0a:	427f      	negs	r7, r7
 8001a0c:	1ac9      	subs	r1, r1, r3
 8001a0e:	1bcb      	subs	r3, r1, r7
 8001a10:	4699      	mov	r9, r3
 8001a12:	465d      	mov	r5, fp
 8001a14:	e5d5      	b.n	80015c2 <__aeabi_dsub+0xb2>
 8001a16:	08ff      	lsrs	r7, r7, #3
 8001a18:	074b      	lsls	r3, r1, #29
 8001a1a:	465d      	mov	r5, fp
 8001a1c:	433b      	orrs	r3, r7
 8001a1e:	08cc      	lsrs	r4, r1, #3
 8001a20:	e6ee      	b.n	8001800 <__aeabi_dsub+0x2f0>
 8001a22:	4662      	mov	r2, ip
 8001a24:	431a      	orrs	r2, r3
 8001a26:	d000      	beq.n	8001a2a <__aeabi_dsub+0x51a>
 8001a28:	e082      	b.n	8001b30 <__aeabi_dsub+0x620>
 8001a2a:	000b      	movs	r3, r1
 8001a2c:	433b      	orrs	r3, r7
 8001a2e:	d11b      	bne.n	8001a68 <__aeabi_dsub+0x558>
 8001a30:	2480      	movs	r4, #128	; 0x80
 8001a32:	2500      	movs	r5, #0
 8001a34:	0324      	lsls	r4, r4, #12
 8001a36:	e6f9      	b.n	800182c <__aeabi_dsub+0x31c>
 8001a38:	19dc      	adds	r4, r3, r7
 8001a3a:	429c      	cmp	r4, r3
 8001a3c:	419b      	sbcs	r3, r3
 8001a3e:	4461      	add	r1, ip
 8001a40:	4689      	mov	r9, r1
 8001a42:	425b      	negs	r3, r3
 8001a44:	4499      	add	r9, r3
 8001a46:	464b      	mov	r3, r9
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	d444      	bmi.n	8001ad6 <__aeabi_dsub+0x5c6>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	4698      	mov	r8, r3
 8001a50:	e6cc      	b.n	80017ec <__aeabi_dsub+0x2dc>
 8001a52:	1bdc      	subs	r4, r3, r7
 8001a54:	4662      	mov	r2, ip
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	419b      	sbcs	r3, r3
 8001a5a:	1a51      	subs	r1, r2, r1
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	1acb      	subs	r3, r1, r3
 8001a60:	4699      	mov	r9, r3
 8001a62:	2301      	movs	r3, #1
 8001a64:	4698      	mov	r8, r3
 8001a66:	e5a4      	b.n	80015b2 <__aeabi_dsub+0xa2>
 8001a68:	08ff      	lsrs	r7, r7, #3
 8001a6a:	074b      	lsls	r3, r1, #29
 8001a6c:	465d      	mov	r5, fp
 8001a6e:	433b      	orrs	r3, r7
 8001a70:	08cc      	lsrs	r4, r1, #3
 8001a72:	e6d7      	b.n	8001824 <__aeabi_dsub+0x314>
 8001a74:	4662      	mov	r2, ip
 8001a76:	431a      	orrs	r2, r3
 8001a78:	0014      	movs	r4, r2
 8001a7a:	1e63      	subs	r3, r4, #1
 8001a7c:	419c      	sbcs	r4, r3
 8001a7e:	e679      	b.n	8001774 <__aeabi_dsub+0x264>
 8001a80:	0015      	movs	r5, r2
 8001a82:	4664      	mov	r4, ip
 8001a84:	3d20      	subs	r5, #32
 8001a86:	40ec      	lsrs	r4, r5
 8001a88:	46a0      	mov	r8, r4
 8001a8a:	2a20      	cmp	r2, #32
 8001a8c:	d005      	beq.n	8001a9a <__aeabi_dsub+0x58a>
 8001a8e:	2540      	movs	r5, #64	; 0x40
 8001a90:	4664      	mov	r4, ip
 8001a92:	1aaa      	subs	r2, r5, r2
 8001a94:	4094      	lsls	r4, r2
 8001a96:	4323      	orrs	r3, r4
 8001a98:	469a      	mov	sl, r3
 8001a9a:	4654      	mov	r4, sl
 8001a9c:	1e63      	subs	r3, r4, #1
 8001a9e:	419c      	sbcs	r4, r3
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	4323      	orrs	r3, r4
 8001aa4:	e773      	b.n	800198e <__aeabi_dsub+0x47e>
 8001aa6:	4662      	mov	r2, ip
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	d023      	beq.n	8001af4 <__aeabi_dsub+0x5e4>
 8001aac:	000a      	movs	r2, r1
 8001aae:	433a      	orrs	r2, r7
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_dsub+0x5a4>
 8001ab2:	e0a0      	b.n	8001bf6 <__aeabi_dsub+0x6e6>
 8001ab4:	4662      	mov	r2, ip
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	0752      	lsls	r2, r2, #29
 8001aba:	4313      	orrs	r3, r2
 8001abc:	4662      	mov	r2, ip
 8001abe:	08d4      	lsrs	r4, r2, #3
 8001ac0:	e6b0      	b.n	8001824 <__aeabi_dsub+0x314>
 8001ac2:	000b      	movs	r3, r1
 8001ac4:	433b      	orrs	r3, r7
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x5ba>
 8001ac8:	e728      	b.n	800191c <__aeabi_dsub+0x40c>
 8001aca:	08ff      	lsrs	r7, r7, #3
 8001acc:	074b      	lsls	r3, r1, #29
 8001ace:	465d      	mov	r5, fp
 8001ad0:	433b      	orrs	r3, r7
 8001ad2:	08cc      	lsrs	r4, r1, #3
 8001ad4:	e697      	b.n	8001806 <__aeabi_dsub+0x2f6>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	4698      	mov	r8, r3
 8001ada:	e736      	b.n	800194a <__aeabi_dsub+0x43a>
 8001adc:	1afc      	subs	r4, r7, r3
 8001ade:	42a7      	cmp	r7, r4
 8001ae0:	41bf      	sbcs	r7, r7
 8001ae2:	4663      	mov	r3, ip
 8001ae4:	427f      	negs	r7, r7
 8001ae6:	1ac9      	subs	r1, r1, r3
 8001ae8:	1bcb      	subs	r3, r1, r7
 8001aea:	4699      	mov	r9, r3
 8001aec:	2301      	movs	r3, #1
 8001aee:	465d      	mov	r5, fp
 8001af0:	4698      	mov	r8, r3
 8001af2:	e55e      	b.n	80015b2 <__aeabi_dsub+0xa2>
 8001af4:	074b      	lsls	r3, r1, #29
 8001af6:	08ff      	lsrs	r7, r7, #3
 8001af8:	433b      	orrs	r3, r7
 8001afa:	08cc      	lsrs	r4, r1, #3
 8001afc:	e692      	b.n	8001824 <__aeabi_dsub+0x314>
 8001afe:	1bdc      	subs	r4, r3, r7
 8001b00:	4660      	mov	r0, ip
 8001b02:	42a3      	cmp	r3, r4
 8001b04:	41b6      	sbcs	r6, r6
 8001b06:	1a40      	subs	r0, r0, r1
 8001b08:	4276      	negs	r6, r6
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	4681      	mov	r9, r0
 8001b0e:	0200      	lsls	r0, r0, #8
 8001b10:	d560      	bpl.n	8001bd4 <__aeabi_dsub+0x6c4>
 8001b12:	1afc      	subs	r4, r7, r3
 8001b14:	42a7      	cmp	r7, r4
 8001b16:	41bf      	sbcs	r7, r7
 8001b18:	4663      	mov	r3, ip
 8001b1a:	427f      	negs	r7, r7
 8001b1c:	1ac9      	subs	r1, r1, r3
 8001b1e:	1bcb      	subs	r3, r1, r7
 8001b20:	4699      	mov	r9, r3
 8001b22:	465d      	mov	r5, fp
 8001b24:	e576      	b.n	8001614 <__aeabi_dsub+0x104>
 8001b26:	08ff      	lsrs	r7, r7, #3
 8001b28:	074b      	lsls	r3, r1, #29
 8001b2a:	433b      	orrs	r3, r7
 8001b2c:	08cc      	lsrs	r4, r1, #3
 8001b2e:	e667      	b.n	8001800 <__aeabi_dsub+0x2f0>
 8001b30:	000a      	movs	r2, r1
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	433a      	orrs	r2, r7
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x62a>
 8001b38:	e66f      	b.n	800181a <__aeabi_dsub+0x30a>
 8001b3a:	4662      	mov	r2, ip
 8001b3c:	0752      	lsls	r2, r2, #29
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	4662      	mov	r2, ip
 8001b42:	08d4      	lsrs	r4, r2, #3
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	0312      	lsls	r2, r2, #12
 8001b48:	4214      	tst	r4, r2
 8001b4a:	d007      	beq.n	8001b5c <__aeabi_dsub+0x64c>
 8001b4c:	08c8      	lsrs	r0, r1, #3
 8001b4e:	4210      	tst	r0, r2
 8001b50:	d104      	bne.n	8001b5c <__aeabi_dsub+0x64c>
 8001b52:	465d      	mov	r5, fp
 8001b54:	0004      	movs	r4, r0
 8001b56:	08fb      	lsrs	r3, r7, #3
 8001b58:	0749      	lsls	r1, r1, #29
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	0f5a      	lsrs	r2, r3, #29
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	0752      	lsls	r2, r2, #29
 8001b64:	4313      	orrs	r3, r2
 8001b66:	e65d      	b.n	8001824 <__aeabi_dsub+0x314>
 8001b68:	074b      	lsls	r3, r1, #29
 8001b6a:	08ff      	lsrs	r7, r7, #3
 8001b6c:	433b      	orrs	r3, r7
 8001b6e:	08cc      	lsrs	r4, r1, #3
 8001b70:	e649      	b.n	8001806 <__aeabi_dsub+0x2f6>
 8001b72:	19dc      	adds	r4, r3, r7
 8001b74:	429c      	cmp	r4, r3
 8001b76:	419b      	sbcs	r3, r3
 8001b78:	4461      	add	r1, ip
 8001b7a:	4689      	mov	r9, r1
 8001b7c:	425b      	negs	r3, r3
 8001b7e:	4499      	add	r9, r3
 8001b80:	464b      	mov	r3, r9
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	d400      	bmi.n	8001b88 <__aeabi_dsub+0x678>
 8001b86:	e631      	b.n	80017ec <__aeabi_dsub+0x2dc>
 8001b88:	464a      	mov	r2, r9
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <__aeabi_dsub+0x6d8>)
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	2301      	movs	r3, #1
 8001b90:	4691      	mov	r9, r2
 8001b92:	4698      	mov	r8, r3
 8001b94:	e62a      	b.n	80017ec <__aeabi_dsub+0x2dc>
 8001b96:	0016      	movs	r6, r2
 8001b98:	4664      	mov	r4, ip
 8001b9a:	3e20      	subs	r6, #32
 8001b9c:	40f4      	lsrs	r4, r6
 8001b9e:	46a0      	mov	r8, r4
 8001ba0:	2a20      	cmp	r2, #32
 8001ba2:	d005      	beq.n	8001bb0 <__aeabi_dsub+0x6a0>
 8001ba4:	2640      	movs	r6, #64	; 0x40
 8001ba6:	4664      	mov	r4, ip
 8001ba8:	1ab2      	subs	r2, r6, r2
 8001baa:	4094      	lsls	r4, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	469a      	mov	sl, r3
 8001bb0:	4654      	mov	r4, sl
 8001bb2:	1e63      	subs	r3, r4, #1
 8001bb4:	419c      	sbcs	r4, r3
 8001bb6:	4643      	mov	r3, r8
 8001bb8:	431c      	orrs	r4, r3
 8001bba:	e5db      	b.n	8001774 <__aeabi_dsub+0x264>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e548      	b.n	8001656 <__aeabi_dsub+0x146>
 8001bc4:	19dc      	adds	r4, r3, r7
 8001bc6:	42bc      	cmp	r4, r7
 8001bc8:	41bf      	sbcs	r7, r7
 8001bca:	4461      	add	r1, ip
 8001bcc:	4689      	mov	r9, r1
 8001bce:	427f      	negs	r7, r7
 8001bd0:	44b9      	add	r9, r7
 8001bd2:	e738      	b.n	8001a46 <__aeabi_dsub+0x536>
 8001bd4:	464b      	mov	r3, r9
 8001bd6:	4323      	orrs	r3, r4
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x6cc>
 8001bda:	e69f      	b.n	800191c <__aeabi_dsub+0x40c>
 8001bdc:	e606      	b.n	80017ec <__aeabi_dsub+0x2dc>
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	000007fe 	.word	0x000007fe
 8001be4:	000007ff 	.word	0x000007ff
 8001be8:	ff7fffff 	.word	0xff7fffff
 8001bec:	08ff      	lsrs	r7, r7, #3
 8001bee:	074b      	lsls	r3, r1, #29
 8001bf0:	433b      	orrs	r3, r7
 8001bf2:	08cc      	lsrs	r4, r1, #3
 8001bf4:	e616      	b.n	8001824 <__aeabi_dsub+0x314>
 8001bf6:	4662      	mov	r2, ip
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	0752      	lsls	r2, r2, #29
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	4662      	mov	r2, ip
 8001c00:	08d4      	lsrs	r4, r2, #3
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	0312      	lsls	r2, r2, #12
 8001c06:	4214      	tst	r4, r2
 8001c08:	d007      	beq.n	8001c1a <__aeabi_dsub+0x70a>
 8001c0a:	08c8      	lsrs	r0, r1, #3
 8001c0c:	4210      	tst	r0, r2
 8001c0e:	d104      	bne.n	8001c1a <__aeabi_dsub+0x70a>
 8001c10:	465d      	mov	r5, fp
 8001c12:	0004      	movs	r4, r0
 8001c14:	08fb      	lsrs	r3, r7, #3
 8001c16:	0749      	lsls	r1, r1, #29
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	0f5a      	lsrs	r2, r3, #29
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	0752      	lsls	r2, r2, #29
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	e5fe      	b.n	8001824 <__aeabi_dsub+0x314>
 8001c26:	2300      	movs	r3, #0
 8001c28:	4a01      	ldr	r2, [pc, #4]	; (8001c30 <__aeabi_dsub+0x720>)
 8001c2a:	001c      	movs	r4, r3
 8001c2c:	e513      	b.n	8001656 <__aeabi_dsub+0x146>
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	000007ff 	.word	0x000007ff

08001c34 <__aeabi_d2iz>:
 8001c34:	000a      	movs	r2, r1
 8001c36:	b530      	push	{r4, r5, lr}
 8001c38:	4c13      	ldr	r4, [pc, #76]	; (8001c88 <__aeabi_d2iz+0x54>)
 8001c3a:	0053      	lsls	r3, r2, #1
 8001c3c:	0309      	lsls	r1, r1, #12
 8001c3e:	0005      	movs	r5, r0
 8001c40:	0b09      	lsrs	r1, r1, #12
 8001c42:	2000      	movs	r0, #0
 8001c44:	0d5b      	lsrs	r3, r3, #21
 8001c46:	0fd2      	lsrs	r2, r2, #31
 8001c48:	42a3      	cmp	r3, r4
 8001c4a:	dd04      	ble.n	8001c56 <__aeabi_d2iz+0x22>
 8001c4c:	480f      	ldr	r0, [pc, #60]	; (8001c8c <__aeabi_d2iz+0x58>)
 8001c4e:	4283      	cmp	r3, r0
 8001c50:	dd02      	ble.n	8001c58 <__aeabi_d2iz+0x24>
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <__aeabi_d2iz+0x5c>)
 8001c54:	18d0      	adds	r0, r2, r3
 8001c56:	bd30      	pop	{r4, r5, pc}
 8001c58:	2080      	movs	r0, #128	; 0x80
 8001c5a:	0340      	lsls	r0, r0, #13
 8001c5c:	4301      	orrs	r1, r0
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <__aeabi_d2iz+0x60>)
 8001c60:	1ac0      	subs	r0, r0, r3
 8001c62:	281f      	cmp	r0, #31
 8001c64:	dd08      	ble.n	8001c78 <__aeabi_d2iz+0x44>
 8001c66:	480c      	ldr	r0, [pc, #48]	; (8001c98 <__aeabi_d2iz+0x64>)
 8001c68:	1ac3      	subs	r3, r0, r3
 8001c6a:	40d9      	lsrs	r1, r3
 8001c6c:	000b      	movs	r3, r1
 8001c6e:	4258      	negs	r0, r3
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d1f0      	bne.n	8001c56 <__aeabi_d2iz+0x22>
 8001c74:	0018      	movs	r0, r3
 8001c76:	e7ee      	b.n	8001c56 <__aeabi_d2iz+0x22>
 8001c78:	4c08      	ldr	r4, [pc, #32]	; (8001c9c <__aeabi_d2iz+0x68>)
 8001c7a:	40c5      	lsrs	r5, r0
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	4463      	add	r3, ip
 8001c80:	4099      	lsls	r1, r3
 8001c82:	000b      	movs	r3, r1
 8001c84:	432b      	orrs	r3, r5
 8001c86:	e7f2      	b.n	8001c6e <__aeabi_d2iz+0x3a>
 8001c88:	000003fe 	.word	0x000003fe
 8001c8c:	0000041d 	.word	0x0000041d
 8001c90:	7fffffff 	.word	0x7fffffff
 8001c94:	00000433 	.word	0x00000433
 8001c98:	00000413 	.word	0x00000413
 8001c9c:	fffffbed 	.word	0xfffffbed

08001ca0 <__aeabi_i2d>:
 8001ca0:	b570      	push	{r4, r5, r6, lr}
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d016      	beq.n	8001cd4 <__aeabi_i2d+0x34>
 8001ca6:	17c3      	asrs	r3, r0, #31
 8001ca8:	18c5      	adds	r5, r0, r3
 8001caa:	405d      	eors	r5, r3
 8001cac:	0fc4      	lsrs	r4, r0, #31
 8001cae:	0028      	movs	r0, r5
 8001cb0:	f000 f86e 	bl	8001d90 <__clzsi2>
 8001cb4:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <__aeabi_i2d+0x5c>)
 8001cb6:	1a12      	subs	r2, r2, r0
 8001cb8:	280a      	cmp	r0, #10
 8001cba:	dc16      	bgt.n	8001cea <__aeabi_i2d+0x4a>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	002e      	movs	r6, r5
 8001cc0:	3315      	adds	r3, #21
 8001cc2:	409e      	lsls	r6, r3
 8001cc4:	230b      	movs	r3, #11
 8001cc6:	1a18      	subs	r0, r3, r0
 8001cc8:	40c5      	lsrs	r5, r0
 8001cca:	0552      	lsls	r2, r2, #21
 8001ccc:	032d      	lsls	r5, r5, #12
 8001cce:	0b2d      	lsrs	r5, r5, #12
 8001cd0:	0d53      	lsrs	r3, r2, #21
 8001cd2:	e003      	b.n	8001cdc <__aeabi_i2d+0x3c>
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2500      	movs	r5, #0
 8001cda:	2600      	movs	r6, #0
 8001cdc:	051b      	lsls	r3, r3, #20
 8001cde:	432b      	orrs	r3, r5
 8001ce0:	07e4      	lsls	r4, r4, #31
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	0030      	movs	r0, r6
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	380b      	subs	r0, #11
 8001cec:	4085      	lsls	r5, r0
 8001cee:	0552      	lsls	r2, r2, #21
 8001cf0:	032d      	lsls	r5, r5, #12
 8001cf2:	2600      	movs	r6, #0
 8001cf4:	0b2d      	lsrs	r5, r5, #12
 8001cf6:	0d53      	lsrs	r3, r2, #21
 8001cf8:	e7f0      	b.n	8001cdc <__aeabi_i2d+0x3c>
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	0000041e 	.word	0x0000041e

08001d00 <__aeabi_f2d>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	0043      	lsls	r3, r0, #1
 8001d04:	0246      	lsls	r6, r0, #9
 8001d06:	0fc4      	lsrs	r4, r0, #31
 8001d08:	20fe      	movs	r0, #254	; 0xfe
 8001d0a:	0e1b      	lsrs	r3, r3, #24
 8001d0c:	1c59      	adds	r1, r3, #1
 8001d0e:	0a75      	lsrs	r5, r6, #9
 8001d10:	4208      	tst	r0, r1
 8001d12:	d00c      	beq.n	8001d2e <__aeabi_f2d+0x2e>
 8001d14:	22e0      	movs	r2, #224	; 0xe0
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4694      	mov	ip, r2
 8001d1a:	076d      	lsls	r5, r5, #29
 8001d1c:	0b36      	lsrs	r6, r6, #12
 8001d1e:	4463      	add	r3, ip
 8001d20:	051b      	lsls	r3, r3, #20
 8001d22:	4333      	orrs	r3, r6
 8001d24:	07e4      	lsls	r4, r4, #31
 8001d26:	4323      	orrs	r3, r4
 8001d28:	0028      	movs	r0, r5
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d114      	bne.n	8001d5c <__aeabi_f2d+0x5c>
 8001d32:	2d00      	cmp	r5, #0
 8001d34:	d01b      	beq.n	8001d6e <__aeabi_f2d+0x6e>
 8001d36:	0028      	movs	r0, r5
 8001d38:	f000 f82a 	bl	8001d90 <__clzsi2>
 8001d3c:	280a      	cmp	r0, #10
 8001d3e:	dc1c      	bgt.n	8001d7a <__aeabi_f2d+0x7a>
 8001d40:	230b      	movs	r3, #11
 8001d42:	002e      	movs	r6, r5
 8001d44:	1a1b      	subs	r3, r3, r0
 8001d46:	40de      	lsrs	r6, r3
 8001d48:	0003      	movs	r3, r0
 8001d4a:	3315      	adds	r3, #21
 8001d4c:	409d      	lsls	r5, r3
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <__aeabi_f2d+0x88>)
 8001d50:	0336      	lsls	r6, r6, #12
 8001d52:	1a12      	subs	r2, r2, r0
 8001d54:	0552      	lsls	r2, r2, #21
 8001d56:	0b36      	lsrs	r6, r6, #12
 8001d58:	0d53      	lsrs	r3, r2, #21
 8001d5a:	e7e1      	b.n	8001d20 <__aeabi_f2d+0x20>
 8001d5c:	2d00      	cmp	r5, #0
 8001d5e:	d009      	beq.n	8001d74 <__aeabi_f2d+0x74>
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0b36      	lsrs	r6, r6, #12
 8001d64:	0312      	lsls	r2, r2, #12
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <__aeabi_f2d+0x8c>)
 8001d68:	076d      	lsls	r5, r5, #29
 8001d6a:	4316      	orrs	r6, r2
 8001d6c:	e7d8      	b.n	8001d20 <__aeabi_f2d+0x20>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2600      	movs	r6, #0
 8001d72:	e7d5      	b.n	8001d20 <__aeabi_f2d+0x20>
 8001d74:	2600      	movs	r6, #0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <__aeabi_f2d+0x8c>)
 8001d78:	e7d2      	b.n	8001d20 <__aeabi_f2d+0x20>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	3b0b      	subs	r3, #11
 8001d7e:	409d      	lsls	r5, r3
 8001d80:	002e      	movs	r6, r5
 8001d82:	2500      	movs	r5, #0
 8001d84:	e7e3      	b.n	8001d4e <__aeabi_f2d+0x4e>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	00000389 	.word	0x00000389
 8001d8c:	000007ff 	.word	0x000007ff

08001d90 <__clzsi2>:
 8001d90:	211c      	movs	r1, #28
 8001d92:	2301      	movs	r3, #1
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	4298      	cmp	r0, r3
 8001d98:	d301      	bcc.n	8001d9e <__clzsi2+0xe>
 8001d9a:	0c00      	lsrs	r0, r0, #16
 8001d9c:	3910      	subs	r1, #16
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	4298      	cmp	r0, r3
 8001da2:	d301      	bcc.n	8001da8 <__clzsi2+0x18>
 8001da4:	0a00      	lsrs	r0, r0, #8
 8001da6:	3908      	subs	r1, #8
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	4298      	cmp	r0, r3
 8001dac:	d301      	bcc.n	8001db2 <__clzsi2+0x22>
 8001dae:	0900      	lsrs	r0, r0, #4
 8001db0:	3904      	subs	r1, #4
 8001db2:	a202      	add	r2, pc, #8	; (adr r2, 8001dbc <__clzsi2+0x2c>)
 8001db4:	5c10      	ldrb	r0, [r2, r0]
 8001db6:	1840      	adds	r0, r0, r1
 8001db8:	4770      	bx	lr
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	02020304 	.word	0x02020304
 8001dc0:	01010101 	.word	0x01010101
	...

08001dcc <ina229_init>:
}
*/

#define INA229_CS_DELAY 1	//useconds
void ina229_init(void)
{
 8001dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t SPI_buff[4];
	uint16_t ina229_reg;
	//

	SPI_buff[0] = (INA229_REG_CONFIG<<2) | INA229_SPI_WRITE;	//write
 8001dce:	2200      	movs	r2, #0
	ina229_reg = (IN229_CONFIG_ADCRANGE_40p96mV << INA229_CONFIG_BIT_ADCRANGE);
	SPI_buff[1] = ina229_reg >> 8;
	SPI_buff[2] = ina229_reg & 0xff;
 8001dd0:	2110      	movs	r1, #16
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001dd2:	2090      	movs	r0, #144	; 0x90
	SPI_buff[0] = (INA229_REG_CONFIG<<2) | INA229_SPI_WRITE;	//write
 8001dd4:	ac01      	add	r4, sp, #4
 8001dd6:	7022      	strb	r2, [r4, #0]
	SPI_buff[1] = ina229_reg >> 8;
 8001dd8:	7062      	strb	r2, [r4, #1]
	SPI_buff[2] = ina229_reg & 0xff;
 8001dda:	70a1      	strb	r1, [r4, #2]
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001ddc:	05c0      	lsls	r0, r0, #23
 8001dde:	f000 ff8d 	bl	8002cfc <HAL_GPIO_WritePin>
	delay_us(INA229_CS_DELAY);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 f99e 	bl	8002124 <delay_us>
	HAL_SPI_Transmit(&hspi1, SPI_buff, 3, HAL_MAX_DELAY);
 8001de8:	2301      	movs	r3, #1
 8001dea:	4e32      	ldr	r6, [pc, #200]	; (8001eb4 <ina229_init+0xe8>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	0021      	movs	r1, r4
 8001df0:	0030      	movs	r0, r6
 8001df2:	425b      	negs	r3, r3
 8001df4:	f002 f868 	bl	8003ec8 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001df8:	0030      	movs	r0, r6
 8001dfa:	f002 fa3f 	bl	800427c <HAL_SPI_GetState>
 8001dfe:	0005      	movs	r5, r0
 8001e00:	2801      	cmp	r0, #1
 8001e02:	d1f9      	bne.n	8001df8 <ina229_init+0x2c>
	delay_us(INA229_CS_DELAY);
 8001e04:	f000 f98e 	bl	8002124 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001e08:	2090      	movs	r0, #144	; 0x90
 8001e0a:	002a      	movs	r2, r5
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	05c0      	lsls	r0, r0, #23
 8001e10:	f000 ff74 	bl	8002cfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e14:	0028      	movs	r0, r5
 8001e16:	f000 fe6b 	bl	8002af0 <HAL_Delay>
	//

	//
	SPI_buff[0] = (INA229_REG_ADC_CONFIG<<2) | INA229_SPI_WRITE;	//write
 8001e1a:	2304      	movs	r3, #4
								(INA229_ADC_CONFIGMODE_AVG_SAMPLE_1024 << INA229_ADC_CONFIG_BIT_AVG);

	SPI_buff[1] = ina229_reg >> 8;
	SPI_buff[2] = ina229_reg & 0xff;
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001e1c:	2090      	movs	r0, #144	; 0x90
	SPI_buff[0] = (INA229_REG_ADC_CONFIG<<2) | INA229_SPI_WRITE;	//write
 8001e1e:	7023      	strb	r3, [r4, #0]
	SPI_buff[1] = ina229_reg >> 8;
 8001e20:	339d      	adds	r3, #157	; 0x9d
 8001e22:	7063      	strb	r3, [r4, #1]
	SPI_buff[2] = ina229_reg & 0xff;
 8001e24:	3b9a      	subs	r3, #154	; 0x9a
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2110      	movs	r1, #16
	SPI_buff[2] = ina229_reg & 0xff;
 8001e2a:	70a3      	strb	r3, [r4, #2]
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001e2c:	05c0      	lsls	r0, r0, #23
 8001e2e:	f000 ff65 	bl	8002cfc <HAL_GPIO_WritePin>
	delay_us(INA229_CS_DELAY);
 8001e32:	0028      	movs	r0, r5
 8001e34:	f000 f976 	bl	8002124 <delay_us>
	HAL_SPI_Transmit(&hspi1, SPI_buff, 3, HAL_MAX_DELAY);
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	0021      	movs	r1, r4
 8001e3e:	0030      	movs	r0, r6
 8001e40:	425b      	negs	r3, r3
 8001e42:	f002 f841 	bl	8003ec8 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001e46:	0030      	movs	r0, r6
 8001e48:	f002 fa18 	bl	800427c <HAL_SPI_GetState>
 8001e4c:	0005      	movs	r5, r0
 8001e4e:	2801      	cmp	r0, #1
 8001e50:	d1f9      	bne.n	8001e46 <ina229_init+0x7a>
	delay_us(INA229_CS_DELAY);
 8001e52:	f000 f967 	bl	8002124 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001e56:	2090      	movs	r0, #144	; 0x90
 8001e58:	002a      	movs	r2, r5
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	05c0      	lsls	r0, r0, #23
 8001e5e:	f000 ff4d 	bl	8002cfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e62:	0028      	movs	r0, r5
 8001e64:	f000 fe44 	bl	8002af0 <HAL_Delay>
	//

	SPI_buff[0] = (INA229_REG_SHUNT_CAL<<2) | INA229_SPI_WRITE;	//write
 8001e68:	2308      	movs	r3, #8
	SPI_buff[1] = (uint8_t)( ((uint16_t)INA229_SHUNT_CAL_ADCRANGE_40p96mV)>>8);
 8001e6a:	2110      	movs	r1, #16
	SPI_buff[2] = (uint8_t) ( ((uint16_t)INA229_SHUNT_CAL_ADCRANGE_40p96mV) & 0x00FF);
 8001e6c:	2200      	movs	r2, #0
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001e6e:	2090      	movs	r0, #144	; 0x90
	SPI_buff[0] = (INA229_REG_SHUNT_CAL<<2) | INA229_SPI_WRITE;	//write
 8001e70:	7023      	strb	r3, [r4, #0]
	SPI_buff[1] = (uint8_t)( ((uint16_t)INA229_SHUNT_CAL_ADCRANGE_40p96mV)>>8);
 8001e72:	7061      	strb	r1, [r4, #1]
	SPI_buff[2] = (uint8_t) ( ((uint16_t)INA229_SHUNT_CAL_ADCRANGE_40p96mV) & 0x00FF);
 8001e74:	70a2      	strb	r2, [r4, #2]
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001e76:	05c0      	lsls	r0, r0, #23
 8001e78:	f000 ff40 	bl	8002cfc <HAL_GPIO_WritePin>
	delay_us(INA229_CS_DELAY);
 8001e7c:	0028      	movs	r0, r5
 8001e7e:	f000 f951 	bl	8002124 <delay_us>
	HAL_SPI_Transmit(&hspi1, SPI_buff, 3, HAL_MAX_DELAY);
 8001e82:	2301      	movs	r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	0021      	movs	r1, r4
 8001e88:	0030      	movs	r0, r6
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	f002 f81c 	bl	8003ec8 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001e90:	0030      	movs	r0, r6
 8001e92:	f002 f9f3 	bl	800427c <HAL_SPI_GetState>
 8001e96:	0004      	movs	r4, r0
 8001e98:	2801      	cmp	r0, #1
 8001e9a:	d1f9      	bne.n	8001e90 <ina229_init+0xc4>
	delay_us(INA229_CS_DELAY);
 8001e9c:	f000 f942 	bl	8002124 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001ea0:	2090      	movs	r0, #144	; 0x90
 8001ea2:	0022      	movs	r2, r4
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	05c0      	lsls	r0, r0, #23
 8001ea8:	f000 ff28 	bl	8002cfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001eac:	0020      	movs	r0, r4
 8001eae:	f000 fe1f 	bl	8002af0 <HAL_Delay>
	//
}
 8001eb2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001eb4:	20000398 	.word	0x20000398

08001eb8 <INA229_read_current_register>:
}
*/
#define SIGNED20(x) (int32_t) (((x)^0x80000) - 0x80000)

int32_t INA229_read_current_register(void)
{
 8001eb8:	b573      	push	{r0, r1, r4, r5, r6, lr}

	SPI_buff_tx[0] = (INA229_REG_CURRENT<<2) | INA229_SPI_READ;	//read
	SPI_buff_tx[1] = 0;
 8001eba:	2200      	movs	r2, #0
	SPI_buff_tx[0] = (INA229_REG_CURRENT<<2) | INA229_SPI_READ;	//read
 8001ebc:	231d      	movs	r3, #29
	SPI_buff_tx[2] = 0;
	SPI_buff_tx[3] = 0;
	//
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001ebe:	2090      	movs	r0, #144	; 0x90
	SPI_buff_tx[0] = (INA229_REG_CURRENT<<2) | INA229_SPI_READ;	//read
 8001ec0:	4c19      	ldr	r4, [pc, #100]	; (8001f28 <INA229_read_current_register+0x70>)
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001ec2:	2110      	movs	r1, #16
	SPI_buff_tx[0] = (INA229_REG_CURRENT<<2) | INA229_SPI_READ;	//read
 8001ec4:	7023      	strb	r3, [r4, #0]
	SPI_buff_tx[1] = 0;
 8001ec6:	7062      	strb	r2, [r4, #1]
	SPI_buff_tx[2] = 0;
 8001ec8:	70a2      	strb	r2, [r4, #2]
	SPI_buff_tx[3] = 0;
 8001eca:	70e2      	strb	r2, [r4, #3]
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001ecc:	05c0      	lsls	r0, r0, #23
 8001ece:	f000 ff15 	bl	8002cfc <HAL_GPIO_WritePin>
	delay_us(INA229_CS_DELAY);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f000 f926 	bl	8002124 <delay_us>
	HAL_SPI_TransmitReceive(&hspi1, SPI_buff_tx, SPI_buff_rx, 4, HAL_MAX_DELAY);
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4d14      	ldr	r5, [pc, #80]	; (8001f2c <INA229_read_current_register+0x74>)
 8001edc:	4e14      	ldr	r6, [pc, #80]	; (8001f30 <INA229_read_current_register+0x78>)
 8001ede:	425b      	negs	r3, r3
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	002a      	movs	r2, r5
 8001ee4:	0021      	movs	r1, r4
 8001ee6:	0030      	movs	r0, r6
 8001ee8:	3305      	adds	r3, #5
 8001eea:	f002 f8b9 	bl	8004060 <HAL_SPI_TransmitReceive>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001eee:	0030      	movs	r0, r6
 8001ef0:	f002 f9c4 	bl	800427c <HAL_SPI_GetState>
 8001ef4:	0004      	movs	r4, r0
 8001ef6:	2801      	cmp	r0, #1
 8001ef8:	d1f9      	bne.n	8001eee <INA229_read_current_register+0x36>
	delay_us(INA229_CS_DELAY);
 8001efa:	f000 f913 	bl	8002124 <delay_us>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001efe:	2090      	movs	r0, #144	; 0x90
 8001f00:	0022      	movs	r2, r4
 8001f02:	2110      	movs	r1, #16
 8001f04:	05c0      	lsls	r0, r0, #23
 8001f06:	f000 fef9 	bl	8002cfc <HAL_GPIO_WritePin>
//	}
//	else
//	{
//		data = (float)value;
//	}
	int32_t current = SIGNED20(value);
 8001f0a:	2380      	movs	r3, #128	; 0x80
	uint64_t value = ( (SPI_buff_rx[1]<<16) | (SPI_buff_rx[2]<<8) | (SPI_buff_rx[3]) ) >> 4;
 8001f0c:	7868      	ldrb	r0, [r5, #1]
 8001f0e:	78aa      	ldrb	r2, [r5, #2]
 8001f10:	0400      	lsls	r0, r0, #16
 8001f12:	78e9      	ldrb	r1, [r5, #3]
 8001f14:	0212      	lsls	r2, r2, #8
 8001f16:	4310      	orrs	r0, r2
 8001f18:	4308      	orrs	r0, r1
	int32_t current = SIGNED20(value);
 8001f1a:	031b      	lsls	r3, r3, #12
	uint64_t value = ( (SPI_buff_rx[1]<<16) | (SPI_buff_rx[2]<<8) | (SPI_buff_rx[3]) ) >> 4;
 8001f1c:	1100      	asrs	r0, r0, #4
	int32_t current = SIGNED20(value);
 8001f1e:	4058      	eors	r0, r3
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <INA229_read_current_register+0x7c>)
 8001f22:	18c0      	adds	r0, r0, r3

	return current;

}
 8001f24:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000030 	.word	0x20000030
 8001f2c:	2000002c 	.word	0x2000002c
 8001f30:	20000398 	.word	0x20000398
 8001f34:	fff80000 	.word	0xfff80000

08001f38 <SendByteSPI>:
//		SCK_LOW;  // SCLK =0  OR SCK
//		SCK_HIGH;  // SCLK=1
//	}
//}
void SendByteSPI(uint8_t byte)
{
 8001f38:	b513      	push	{r0, r1, r4, lr}
 8001f3a:	466b      	mov	r3, sp
 8001f3c:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4c06      	ldr	r4, [pc, #24]	; (8001f5c <SendByteSPI+0x24>)
{
 8001f42:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8001f44:	2201      	movs	r2, #1
 8001f46:	0020      	movs	r0, r4
 8001f48:	425b      	negs	r3, r3
 8001f4a:	f001 ffbd 	bl	8003ec8 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f4e:	0020      	movs	r0, r4
 8001f50:	f002 f994 	bl	800427c <HAL_SPI_GetState>
 8001f54:	2801      	cmp	r0, #1
 8001f56:	d1fa      	bne.n	8001f4e <SendByteSPI+0x16>


}
 8001f58:	bd13      	pop	{r0, r1, r4, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000398 	.word	0x20000398

08001f60 <ST7920_SendCmd>:
//static
void ST7920_SendCmd (uint8_t cmd)
{

	CS_HIGH;  // PUll the CS high
 8001f60:	2380      	movs	r3, #128	; 0x80
{
 8001f62:	b570      	push	{r4, r5, r6, lr}
 8001f64:	0004      	movs	r4, r0
	CS_HIGH;  // PUll the CS high
 8001f66:	4d0c      	ldr	r5, [pc, #48]	; (8001f98 <ST7920_SendCmd+0x38>)
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	61ab      	str	r3, [r5, #24]

	//delayUs(50);
	delay_us(1);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f000 f8d9 	bl	8002124 <delay_us>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8001f72:	20f8      	movs	r0, #248	; 0xf8
 8001f74:	f7ff ffe0 	bl	8001f38 <SendByteSPI>

	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8001f78:	230f      	movs	r3, #15
 8001f7a:	0020      	movs	r0, r4
 8001f7c:	4398      	bics	r0, r3
 8001f7e:	f7ff ffdb 	bl	8001f38 <SendByteSPI>

	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8001f82:	0120      	lsls	r0, r4, #4
 8001f84:	b2c0      	uxtb	r0, r0
 8001f86:	f7ff ffd7 	bl	8001f38 <SendByteSPI>

	delay_us(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 f8ca 	bl	8002124 <delay_us>

	CS_LOW;  // PUll the CS LOW
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	051b      	lsls	r3, r3, #20
 8001f94:	61ab      	str	r3, [r5, #24]

}
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
 8001f98:	48000400 	.word	0x48000400

08001f9c <ST7920_SendData>:

//static
void ST7920_SendData (uint8_t data)
{

	CS_HIGH;
 8001f9c:	2380      	movs	r3, #128	; 0x80
{
 8001f9e:	b570      	push	{r4, r5, r6, lr}
 8001fa0:	0004      	movs	r4, r0
	CS_HIGH;
 8001fa2:	4d0b      	ldr	r5, [pc, #44]	; (8001fd0 <ST7920_SendData+0x34>)
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	61ab      	str	r3, [r5, #24]

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8001fa8:	20fa      	movs	r0, #250	; 0xfa
 8001faa:	f7ff ffc5 	bl	8001f38 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 8001fae:	230f      	movs	r3, #15
 8001fb0:	0020      	movs	r0, r4
 8001fb2:	4398      	bics	r0, r3
 8001fb4:	f7ff ffc0 	bl	8001f38 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8001fb8:	0120      	lsls	r0, r4, #4
 8001fba:	b2c0      	uxtb	r0, r0
 8001fbc:	f7ff ffbc 	bl	8001f38 <SendByteSPI>
	HAL_Delay(1);
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f000 fd95 	bl	8002af0 <HAL_Delay>
	delayUs(50);
	CS_LOW;  // PUll the CS LOW
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	61ab      	str	r3, [r5, #24]
}
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <ST7920_Init>:


void ST7920_Init (void)
{
 8001fd4:	b510      	push	{r4, lr}
//	RCC->AHBENR|=RCC_AHBENR_GPIOAEN;
//	GPIOA->MODER|=(GPIO_MODER_MODER0_0|GPIO_MODER_MODER1_0|GPIO_MODER_MODER4_0|GPIO_MODER_MODER8_0);
//	GPIOA->MODER&=~(GPIO_MODER_MODER0_1|GPIO_MODER_MODER1_1|GPIO_MODER_MODER4_1|GPIO_MODER_MODER8_1);
//	GPIOA->OSPEEDR|=GPIO_OSPEEDER_OSPEEDR0|GPIO_OSPEEDER_OSPEEDR1|GPIO_OSPEEDER_OSPEEDR4|GPIO_OSPEEDER_OSPEEDR8;

	RST_LOW; 					// RESET=0
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	2490      	movs	r4, #144	; 0x90
 8001fda:	02db      	lsls	r3, r3, #11
 8001fdc:	05e4      	lsls	r4, r4, #23
 8001fde:	61a3      	str	r3, [r4, #24]
	HAL_Delay(ms);
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f000 fd85 	bl	8002af0 <HAL_Delay>
	delay(10);   // wait for 10ms
	RST_HIGH;
 8001fe6:	2304      	movs	r3, #4
	HAL_Delay(ms);
 8001fe8:	2032      	movs	r0, #50	; 0x32
	RST_HIGH;
 8001fea:	61a3      	str	r3, [r4, #24]
	HAL_Delay(ms);
 8001fec:	f000 fd80 	bl	8002af0 <HAL_Delay>

	delay(50);   //wait for >40 ms


	ST7920_SendCmd(0x30);  // 8bit mode
 8001ff0:	2030      	movs	r0, #48	; 0x30
 8001ff2:	f7ff ffb5 	bl	8001f60 <ST7920_SendCmd>
	HAL_Delay(1);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 fd7a 	bl	8002af0 <HAL_Delay>
	delayUs(110);  //  >100us delay

	ST7920_SendCmd(0x30);  // 8bit mode
 8001ffc:	2030      	movs	r0, #48	; 0x30
 8001ffe:	f7ff ffaf 	bl	8001f60 <ST7920_SendCmd>
	HAL_Delay(1);
 8002002:	2001      	movs	r0, #1
 8002004:	f000 fd74 	bl	8002af0 <HAL_Delay>
	delayUs(40);  // >37us delay

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8002008:	2008      	movs	r0, #8
 800200a:	f7ff ffa9 	bl	8001f60 <ST7920_SendCmd>
	HAL_Delay(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f000 fd6e 	bl	8002af0 <HAL_Delay>
	delayUs(110);  // >100us delay

	ST7920_SendCmd(0x01);  // clear screen
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff ffa3 	bl	8001f60 <ST7920_SendCmd>
	HAL_Delay(ms);
 800201a:	200c      	movs	r0, #12
 800201c:	f000 fd68 	bl	8002af0 <HAL_Delay>
	delay(12);  // >10 ms delay


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8002020:	2006      	movs	r0, #6
 8002022:	f7ff ff9d 	bl	8001f60 <ST7920_SendCmd>
	HAL_Delay(ms);
 8002026:	2001      	movs	r0, #1
 8002028:	f000 fd62 	bl	8002af0 <HAL_Delay>
	delay(1);  // 1ms delay

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 800202c:	200c      	movs	r0, #12
 800202e:	f7ff ff97 	bl	8001f60 <ST7920_SendCmd>
	HAL_Delay(ms);
 8002032:	2001      	movs	r0, #1
 8002034:	f000 fd5c 	bl	8002af0 <HAL_Delay>
    delay(1);  // 1ms delay

	ST7920_SendCmd(0x02);  // return to home
 8002038:	2002      	movs	r0, #2
 800203a:	f7ff ff91 	bl	8001f60 <ST7920_SendCmd>
	HAL_Delay(ms);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 fd56 	bl	8002af0 <HAL_Delay>
	delay(1);  // 1ms delay

}
 8002044:	bd10      	pop	{r4, pc}

08002046 <ST7920_SendString>:

/*
 * Due to the design of the ST7920 controller (to accomodate Mandarin and Cyrillic), you must place the text on the column according to the numbers above the diagram below. The addressing is handle by the command.
 */
void ST7920_SendString(int row, int col, char* string)
{
 8002046:	b510      	push	{r4, lr}
 8002048:	0014      	movs	r4, r2
    switch (row)
 800204a:	2802      	cmp	r0, #2
 800204c:	d00e      	beq.n	800206c <ST7920_SendString+0x26>
 800204e:	2803      	cmp	r0, #3
 8002050:	d00e      	beq.n	8002070 <ST7920_SendString+0x2a>
 8002052:	2801      	cmp	r0, #1
 8002054:	d008      	beq.n	8002068 <ST7920_SendString+0x22>
    {
        case 0:
            col |= 0x80;
 8002056:	2080      	movs	r0, #128	; 0x80
            break;
        case 2:
            col |= 0x88;
            break;
        case 3:
            col |= 0x98;
 8002058:	4308      	orrs	r0, r1
            break;
    }



    ST7920_SendCmd(col);
 800205a:	b2c0      	uxtb	r0, r0
 800205c:	f7ff ff80 	bl	8001f60 <ST7920_SendCmd>

    while (*string)
 8002060:	7820      	ldrb	r0, [r4, #0]
 8002062:	2800      	cmp	r0, #0
 8002064:	d106      	bne.n	8002074 <ST7920_SendString+0x2e>
    	{
    		ST7920_SendData(*string++);
    	}
}
 8002066:	bd10      	pop	{r4, pc}
            col |= 0x90;
 8002068:	2090      	movs	r0, #144	; 0x90
 800206a:	e7f5      	b.n	8002058 <ST7920_SendString+0x12>
            col |= 0x88;
 800206c:	2088      	movs	r0, #136	; 0x88
 800206e:	e7f3      	b.n	8002058 <ST7920_SendString+0x12>
            col |= 0x98;
 8002070:	2098      	movs	r0, #152	; 0x98
 8002072:	e7f1      	b.n	8002058 <ST7920_SendString+0x12>
    		ST7920_SendData(*string++);
 8002074:	3401      	adds	r4, #1
 8002076:	f7ff ff91 	bl	8001f9c <ST7920_SendData>
 800207a:	e7f1      	b.n	8002060 <ST7920_SendString+0x1a>

0800207c <ADS1115_write_data16bits>:
 * todas las funciones y variable a traves de la directiva ADS1115_CONTROL_BITS
 */
extern I2C_HandleTypeDef hi2c1;

void ADS1115_write_data16bits(uint8_t ADS1115_I2Caddr, uint8_t ADS1115register, uint16_t data16bits)
{
 800207c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800207e:	0013      	movs	r3, r2
	uint8_t reg[3];
	reg[0] = ADS1115register;
 8002080:	aa03      	add	r2, sp, #12
 8002082:	7011      	strb	r1, [r2, #0]
	reg[1] = (uint8_t)(data16bits>>8);
	reg[2] = (uint8_t)(data16bits);
 8002084:	7093      	strb	r3, [r2, #2]
	reg[1] = (uint8_t)(data16bits>>8);
 8002086:	0a19      	lsrs	r1, r3, #8

	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_I2Caddr, &reg[0], 3, HAL_MAX_DELAY);
 8002088:	2301      	movs	r3, #1
 800208a:	425b      	negs	r3, r3
	reg[1] = (uint8_t)(data16bits>>8);
 800208c:	7051      	strb	r1, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_I2Caddr, &reg[0], 3, HAL_MAX_DELAY);
 800208e:	0001      	movs	r1, r0
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4803      	ldr	r0, [pc, #12]	; (80020a0 <ADS1115_write_data16bits+0x24>)
 8002094:	3304      	adds	r3, #4
 8002096:	f000 ffbd 	bl	8003014 <HAL_I2C_Master_Transmit>
	//I2Ccfx_WriteArray(ADS1115_I2Caddr, ADS1115register, &reg[0], 2);

}
 800209a:	b005      	add	sp, #20
 800209c:	bd00      	pop	{pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	20000050 	.word	0x20000050

080020a4 <ADS1115_init>:
	{
		#ifndef ADS1115_CONFIG_REG_UPDATE_IN_RUNTIME
		uint16_t
		#endif
		//ADS1115_ConfigRegister = (0<<OS_BIT) | (MUX_AIN0_AIN3<<MUX_BIT) | (PGA_2p048V<<PGA_BIT) | (SINGLESHOT_POWERDOWN_CONV<<MODE_BIT) | (DR_128SPS<<DR_BIT);
		ADS1115_ConfigRegister = (0<<OS_BIT) | (MUX_AIN0_AIN3<<MUX_BIT) | (PGA_2p048V<<PGA_BIT) | (SINGLESHOT_POWERDOWN_CONV<<MODE_BIT) | (DR_8SPS<<DR_BIT);
 80020a4:	22a8      	movs	r2, #168	; 0xa8
	{
 80020a6:	b510      	push	{r4, lr}
		ADS1115_ConfigRegister = (0<<OS_BIT) | (MUX_AIN0_AIN3<<MUX_BIT) | (PGA_2p048V<<PGA_BIT) | (SINGLESHOT_POWERDOWN_CONV<<MODE_BIT) | (DR_8SPS<<DR_BIT);
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <ADS1115_init+0x14>)
 80020aa:	0152      	lsls	r2, r2, #5
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 80020ac:	2101      	movs	r1, #1
 80020ae:	2090      	movs	r0, #144	; 0x90
		ADS1115_ConfigRegister = (0<<OS_BIT) | (MUX_AIN0_AIN3<<MUX_BIT) | (PGA_2p048V<<PGA_BIT) | (SINGLESHOT_POWERDOWN_CONV<<MODE_BIT) | (DR_8SPS<<DR_BIT);
 80020b0:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 80020b2:	f7ff ffe3 	bl	800207c <ADS1115_write_data16bits>

	}
 80020b6:	bd10      	pop	{r4, pc}
 80020b8:	20000034 	.word	0x20000034

080020bc <ADS1115_setOS>:
#ifdef ADS1115_CONFIG_REG_UPDATE_IN_RUNTIME
	void ADS1115_setOS(uint8_t OS)
	{
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x7FFF) | ((uint16_t)OS<<OS_BIT);
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <ADS1115_setOS+0x1c>)
	{
 80020be:	b510      	push	{r4, lr}
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x7FFF) | ((uint16_t)OS<<OS_BIT);
 80020c0:	881a      	ldrh	r2, [r3, #0]
 80020c2:	03c0      	lsls	r0, r0, #15
 80020c4:	0452      	lsls	r2, r2, #17
 80020c6:	0c52      	lsrs	r2, r2, #17
 80020c8:	4302      	orrs	r2, r0
 80020ca:	b292      	uxth	r2, r2
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 80020cc:	2101      	movs	r1, #1
 80020ce:	2090      	movs	r0, #144	; 0x90
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x7FFF) | ((uint16_t)OS<<OS_BIT);
 80020d0:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 80020d2:	f7ff ffd3 	bl	800207c <ADS1115_write_data16bits>
	}
 80020d6:	bd10      	pop	{r4, pc}
 80020d8:	20000034 	.word	0x20000034

080020dc <ADS1115_setMuxChannel>:
	/*
	 *
	 */
	void ADS1115_setMuxChannel(uint8_t MUX)
	{
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x8FFF) | ((uint16_t)MUX<<MUX_BIT);
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <ADS1115_setMuxChannel+0x1c>)
	{
 80020de:	b510      	push	{r4, lr}
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x8FFF) | ((uint16_t)MUX<<MUX_BIT);
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	4906      	ldr	r1, [pc, #24]	; (80020fc <ADS1115_setMuxChannel+0x20>)
 80020e4:	0300      	lsls	r0, r0, #12
 80020e6:	400a      	ands	r2, r1
 80020e8:	4302      	orrs	r2, r0
 80020ea:	b292      	uxth	r2, r2
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 80020ec:	2101      	movs	r1, #1
 80020ee:	2090      	movs	r0, #144	; 0x90
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0x8FFF) | ((uint16_t)MUX<<MUX_BIT);
 80020f0:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 80020f2:	f7ff ffc3 	bl	800207c <ADS1115_write_data16bits>
	}
 80020f6:	bd10      	pop	{r4, pc}
 80020f8:	20000034 	.word	0x20000034
 80020fc:	ffff8fff 	.word	0xffff8fff

08002100 <ADS1115_setOperatingMode>:
	/*
	 *
	 */
	void ADS1115_setOperatingMode(uint8_t MODE)
	{
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0xFEFF) | ((uint16_t)MODE<<MODE_BIT);
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <ADS1115_setOperatingMode+0x1c>)
	{
 8002102:	b510      	push	{r4, lr}
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0xFEFF) | ((uint16_t)MODE<<MODE_BIT);
 8002104:	881a      	ldrh	r2, [r3, #0]
 8002106:	4906      	ldr	r1, [pc, #24]	; (8002120 <ADS1115_setOperatingMode+0x20>)
 8002108:	0200      	lsls	r0, r0, #8
 800210a:	400a      	ands	r2, r1
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 800210c:	3103      	adds	r1, #3
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0xFEFF) | ((uint16_t)MODE<<MODE_BIT);
 800210e:	4302      	orrs	r2, r0
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 8002110:	31ff      	adds	r1, #255	; 0xff
 8002112:	2090      	movs	r0, #144	; 0x90
		ADS1115_ConfigRegister = (ADS1115_ConfigRegister & 0xFEFF) | ((uint16_t)MODE<<MODE_BIT);
 8002114:	801a      	strh	r2, [r3, #0]
		ADS1115_write_data16bits(ADS1115_ADR_GND, ADS1115_CONFIG_REG, ADS1115_ConfigRegister);
 8002116:	f7ff ffb1 	bl	800207c <ADS1115_write_data16bits>
	}
 800211a:	bd10      	pop	{r4, pc}
 800211c:	20000034 	.word	0x20000034
 8002120:	fffffeff 	.word	0xfffffeff

08002124 <delay_us>:
//#define CPU_HZ 32000000
#define CPU_HZ 80000000

#if CPU_HZ == 80000000

  for(i=0; i<val; i++)
 8002124:	2300      	movs	r3, #0
 8002126:	4283      	cmp	r3, r0
 8002128:	d100      	bne.n	800212c <delay_us+0x8>
    _NOP();
  }
#else
#error "Invalid value for CPU_HZ!"
#endif
}
 800212a:	4770      	bx	lr
    _NOP();
 800212c:	46c0      	nop			; (mov r8, r8)
    _NOP();
 800212e:	46c0      	nop			; (mov r8, r8)
    _NOP();
 8002130:	46c0      	nop			; (mov r8, r8)
    _NOP();
 8002132:	46c0      	nop			; (mov r8, r8)
    _NOP();
 8002134:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46c0      	nop			; (mov r8, r8)
    _NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();_NOP();
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46c0      	nop			; (mov r8, r8)
  for(i=0; i<val; i++)
 80021c6:	3301      	adds	r3, #1
 80021c8:	e7ad      	b.n	8002126 <delay_us+0x2>
	...

080021cc <indicator_setPortPin>:
//	indicator.pin = pin;
//}

void indicator_setPortPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
	indicator.GPIOx = GPIOx;
 80021cc:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <indicator_setPortPin+0x8>)
 80021ce:	6098      	str	r0, [r3, #8]
	indicator.GPIO_Pin = GPIO_Pin;
 80021d0:	8199      	strh	r1, [r3, #12]
}
 80021d2:	4770      	bx	lr
 80021d4:	20000038 	.word	0x20000038

080021d8 <indicator_setKSysTickTime_ms>:
	indicator.KOff_MAX = KSysTickTimeOff_ms;
}
#else
void indicator_setKSysTickTime_ms(uint16_t KSysTickTime_ms)// div by SYSTICK_MS
{
	indicator.KOn_MAX = KSysTickTime_ms;
 80021d8:	4b01      	ldr	r3, [pc, #4]	; (80021e0 <indicator_setKSysTickTime_ms+0x8>)
 80021da:	8098      	strh	r0, [r3, #4]
}
 80021dc:	4770      	bx	lr
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	20000038 	.word	0x20000038

080021e4 <indicator_On>:
#endif

void indicator_On(void)
{
	indicator.sm0 = 1;
 80021e4:	2201      	movs	r2, #1
 80021e6:	4b01      	ldr	r3, [pc, #4]	; (80021ec <indicator_On+0x8>)
 80021e8:	701a      	strb	r2, [r3, #0]
}
 80021ea:	4770      	bx	lr
 80021ec:	20000038 	.word	0x20000038

080021f0 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	9202      	str	r2, [sp, #8]
 80021f6:	001e      	movs	r6, r3
	// check precision bounds
	if (precision > MAX_PRECISION)
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 80021f8:	2200      	movs	r2, #0
 80021fa:	2300      	movs	r3, #0
{
 80021fc:	0005      	movs	r5, r0
 80021fe:	000c      	movs	r4, r1
	if (f < 0)
 8002200:	f7fe f918 	bl	8000434 <__aeabi_dcmplt>
 8002204:	9f02      	ldr	r7, [sp, #8]
 8002206:	2800      	cmp	r0, #0
 8002208:	d007      	beq.n	800221a <ftoa+0x2a>
	{
		f = -f;
		*ptr++ = '-';
 800220a:	9b02      	ldr	r3, [sp, #8]
 800220c:	9a02      	ldr	r2, [sp, #8]
 800220e:	1c5f      	adds	r7, r3, #1
		f = -f;
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	18e4      	adds	r4, r4, r3
		*ptr++ = '-';
 8002216:	232d      	movs	r3, #45	; 0x2d
 8002218:	7013      	strb	r3, [r2, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 800221a:	2e00      	cmp	r6, #0
 800221c:	da5a      	bge.n	80022d4 <ftoa+0xe4>
	{
		if (f < 1.0) precision = 6;
 800221e:	2200      	movs	r2, #0
 8002220:	0028      	movs	r0, r5
 8002222:	0021      	movs	r1, r4
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <ftoa+0x190>)
 8002226:	f7fe f905 	bl	8000434 <__aeabi_dcmplt>
 800222a:	2800      	cmp	r0, #0
 800222c:	d166      	bne.n	80022fc <ftoa+0x10c>
		else if (f < 10.0) precision = 5;
 800222e:	2200      	movs	r2, #0
 8002230:	0028      	movs	r0, r5
 8002232:	0021      	movs	r1, r4
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <ftoa+0x194>)
 8002236:	f7fe f8fd 	bl	8000434 <__aeabi_dcmplt>
 800223a:	2800      	cmp	r0, #0
 800223c:	d161      	bne.n	8002302 <ftoa+0x112>
		else if (f < 100.0) precision = 4;
 800223e:	2200      	movs	r2, #0
 8002240:	0028      	movs	r0, r5
 8002242:	0021      	movs	r1, r4
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <ftoa+0x198>)
 8002246:	f7fe f8f5 	bl	8000434 <__aeabi_dcmplt>
 800224a:	2800      	cmp	r0, #0
 800224c:	d15b      	bne.n	8002306 <ftoa+0x116>
		else if (f < 1000.0) precision = 3;
 800224e:	2200      	movs	r2, #0
 8002250:	0028      	movs	r0, r5
 8002252:	0021      	movs	r1, r4
 8002254:	4b4d      	ldr	r3, [pc, #308]	; (800238c <ftoa+0x19c>)
 8002256:	f7fe f8ed 	bl	8000434 <__aeabi_dcmplt>
 800225a:	2800      	cmp	r0, #0
 800225c:	d155      	bne.n	800230a <ftoa+0x11a>
		else if (f < 10000.0) precision = 2;
 800225e:	2200      	movs	r2, #0
 8002260:	0028      	movs	r0, r5
 8002262:	0021      	movs	r1, r4
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <ftoa+0x1a0>)
 8002266:	f7fe f8e5 	bl	8000434 <__aeabi_dcmplt>
 800226a:	2800      	cmp	r0, #0
 800226c:	d14f      	bne.n	800230e <ftoa+0x11e>
		else if (f < 100000.0) precision = 1;
 800226e:	2200      	movs	r2, #0
 8002270:	0028      	movs	r0, r5
 8002272:	0021      	movs	r1, r4
 8002274:	4b47      	ldr	r3, [pc, #284]	; (8002394 <ftoa+0x1a4>)
 8002276:	f7fe f8dd 	bl	8000434 <__aeabi_dcmplt>
 800227a:	2800      	cmp	r0, #0
 800227c:	d149      	bne.n	8002312 <ftoa+0x122>
		else precision = 0;
 800227e:	9000      	str	r0, [sp, #0]
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 8002280:	0028      	movs	r0, r5
 8002282:	0021      	movs	r1, r4
 8002284:	f7ff fcd6 	bl	8001c34 <__aeabi_d2iz>
 8002288:	9003      	str	r0, [sp, #12]
	f -= intPart;

	if (!intPart)
 800228a:	2800      	cmp	r0, #0
 800228c:	d143      	bne.n	8002316 <ftoa+0x126>
		*ptr++ = '0';
 800228e:	1c7b      	adds	r3, r7, #1
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	2330      	movs	r3, #48	; 0x30
 8002294:	703b      	strb	r3, [r7, #0]
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 8002296:	9b00      	ldr	r3, [sp, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <ftoa+0xd8>
	f -= intPart;
 800229c:	9803      	ldr	r0, [sp, #12]
 800229e:	f7ff fcff 	bl	8001ca0 <__aeabi_i2d>
 80022a2:	0002      	movs	r2, r0
 80022a4:	000b      	movs	r3, r1
 80022a6:	0028      	movs	r0, r5
 80022a8:	0021      	movs	r1, r4
 80022aa:	f7ff f931 	bl	8001510 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 80022ae:	9a01      	ldr	r2, [sp, #4]
 80022b0:	232e      	movs	r3, #46	; 0x2e
 80022b2:	0014      	movs	r4, r2
 80022b4:	7013      	strb	r3, [r2, #0]

		// convert
		while (precision--)
 80022b6:	9a00      	ldr	r2, [sp, #0]
 80022b8:	18a5      	adds	r5, r4, r2
 80022ba:	42a5      	cmp	r5, r4
 80022bc:	d149      	bne.n	8002352 <ftoa+0x162>
 80022be:	9800      	ldr	r0, [sp, #0]
 80022c0:	9b01      	ldr	r3, [sp, #4]
 80022c2:	3001      	adds	r0, #1
 80022c4:	181b      	adds	r3, r3, r0
 80022c6:	9301      	str	r3, [sp, #4]
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	9a01      	ldr	r2, [sp, #4]

	return buf;
}
 80022cc:	9802      	ldr	r0, [sp, #8]
	*ptr = 0;
 80022ce:	7013      	strb	r3, [r2, #0]
}
 80022d0:	b007      	add	sp, #28
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d4:	9600      	str	r6, [sp, #0]
 80022d6:	2e0a      	cmp	r6, #10
 80022d8:	dd01      	ble.n	80022de <ftoa+0xee>
 80022da:	230a      	movs	r3, #10
 80022dc:	9300      	str	r3, [sp, #0]
	if (precision)
 80022de:	2e00      	cmp	r6, #0
 80022e0:	d0ce      	beq.n	8002280 <ftoa+0x90>
		f += rounders[precision];
 80022e2:	9b00      	ldr	r3, [sp, #0]
 80022e4:	0028      	movs	r0, r5
 80022e6:	00da      	lsls	r2, r3, #3
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <ftoa+0x1a8>)
 80022ea:	0021      	movs	r1, r4
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f7fe fa59 	bl	80007a8 <__aeabi_dadd>
 80022f6:	0005      	movs	r5, r0
 80022f8:	000c      	movs	r4, r1
 80022fa:	e7c1      	b.n	8002280 <ftoa+0x90>
		if (f < 1.0) precision = 6;
 80022fc:	2306      	movs	r3, #6
		else if (f < 100000.0) precision = 1;
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	e7ef      	b.n	80022e2 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 8002302:	2305      	movs	r3, #5
 8002304:	e7fb      	b.n	80022fe <ftoa+0x10e>
		else if (f < 100.0) precision = 4;
 8002306:	2304      	movs	r3, #4
 8002308:	e7f9      	b.n	80022fe <ftoa+0x10e>
		else if (f < 1000.0) precision = 3;
 800230a:	2303      	movs	r3, #3
 800230c:	e7f7      	b.n	80022fe <ftoa+0x10e>
		else if (f < 10000.0) precision = 2;
 800230e:	2302      	movs	r3, #2
 8002310:	e7f5      	b.n	80022fe <ftoa+0x10e>
		else if (f < 100000.0) precision = 1;
 8002312:	2301      	movs	r3, #1
 8002314:	e7f3      	b.n	80022fe <ftoa+0x10e>
	if (!intPart)
 8002316:	9e03      	ldr	r6, [sp, #12]
 8002318:	9705      	str	r7, [sp, #20]
			*p++ = '0' + intPart % 10;
 800231a:	9b05      	ldr	r3, [sp, #20]
 800231c:	0030      	movs	r0, r6
 800231e:	9304      	str	r3, [sp, #16]
 8002320:	210a      	movs	r1, #10
 8002322:	3301      	adds	r3, #1
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	9305      	str	r3, [sp, #20]
 8002328:	f7fe f868 	bl	80003fc <__aeabi_idivmod>
 800232c:	9b04      	ldr	r3, [sp, #16]
 800232e:	3130      	adds	r1, #48	; 0x30
			intPart /= 10;
 8002330:	0030      	movs	r0, r6
			*p++ = '0' + intPart % 10;
 8002332:	7019      	strb	r1, [r3, #0]
			intPart /= 10;
 8002334:	210a      	movs	r1, #10
 8002336:	f7fd ff7b 	bl	8000230 <__divsi3>
 800233a:	1e06      	subs	r6, r0, #0
		while (intPart)
 800233c:	d1ed      	bne.n	800231a <ftoa+0x12a>
 800233e:	9b01      	ldr	r3, [sp, #4]
		while (p > ptr)
 8002340:	42bb      	cmp	r3, r7
 8002342:	d9a8      	bls.n	8002296 <ftoa+0xa6>
			c = *--p;
 8002344:	3b01      	subs	r3, #1
			*p = *ptr;
 8002346:	7839      	ldrb	r1, [r7, #0]
			c = *--p;
 8002348:	781a      	ldrb	r2, [r3, #0]
			*p = *ptr;
 800234a:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 800234c:	703a      	strb	r2, [r7, #0]
 800234e:	3701      	adds	r7, #1
 8002350:	e7f6      	b.n	8002340 <ftoa+0x150>
			f *= 10.0;
 8002352:	2200      	movs	r2, #0
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <ftoa+0x194>)
 8002356:	f7fe fe6f 	bl	8001038 <__aeabi_dmul>
 800235a:	000f      	movs	r7, r1
 800235c:	0006      	movs	r6, r0
			c = f;
 800235e:	f7fe f891 	bl	8000484 <__aeabi_d2uiz>
 8002362:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 8002364:	0003      	movs	r3, r0
 8002366:	3330      	adds	r3, #48	; 0x30
 8002368:	7063      	strb	r3, [r4, #1]
			f -= c;
 800236a:	f7ff fc99 	bl	8001ca0 <__aeabi_i2d>
 800236e:	0002      	movs	r2, r0
 8002370:	000b      	movs	r3, r1
 8002372:	0030      	movs	r0, r6
 8002374:	0039      	movs	r1, r7
 8002376:	f7ff f8cb 	bl	8001510 <__aeabi_dsub>
 800237a:	3401      	adds	r4, #1
 800237c:	e79d      	b.n	80022ba <ftoa+0xca>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	3ff00000 	.word	0x3ff00000
 8002384:	40240000 	.word	0x40240000
 8002388:	40590000 	.word	0x40590000
 800238c:	408f4000 	.word	0x408f4000
 8002390:	40c38800 	.word	0x40c38800
 8002394:	40f86a00 	.word	0x40f86a00
 8002398:	080047f0 	.word	0x080047f0

0800239c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800239c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800239e:	2510      	movs	r5, #16
{
 80023a0:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a2:	2230      	movs	r2, #48	; 0x30
 80023a4:	2100      	movs	r1, #0
 80023a6:	a80c      	add	r0, sp, #48	; 0x30
 80023a8:	f002 f9b8 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ac:	002a      	movs	r2, r5
 80023ae:	2100      	movs	r1, #0
 80023b0:	a801      	add	r0, sp, #4
 80023b2:	f002 f9b3 	bl	800471c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b6:	2218      	movs	r2, #24
 80023b8:	2100      	movs	r1, #0
 80023ba:	a805      	add	r0, sp, #20
 80023bc:	f002 f9ae 	bl	800471c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c0:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80023c2:	2322      	movs	r3, #34	; 0x22
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c4:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80023c6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c8:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80023ca:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023cc:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ce:	f001 f85d 	bl	800348c <HAL_RCC_OscConfig>
 80023d2:	2800      	cmp	r0, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x3e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023da:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023dc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023de:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023e0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80023e2:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023e4:	0021      	movs	r1, r4
 80023e6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80023e8:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023ea:	f001 fad7 	bl	800399c <HAL_RCC_ClockConfig>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0x5a>
 80023f2:	b672      	cpsid	i
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <SystemClock_Config+0x58>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <SystemClock_Config+0x78>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80023f8:	9007      	str	r0, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80023fa:	9008      	str	r0, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80023fc:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fe:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8002400:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002402:	f001 fb65 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 8002406:	2800      	cmp	r0, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0x72>
 800240a:	b672      	cpsid	i
  while (1)
 800240c:	e7fe      	b.n	800240c <SystemClock_Config+0x70>
}
 800240e:	b019      	add	sp, #100	; 0x64
 8002410:	bd30      	pop	{r4, r5, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	00020021 	.word	0x00020021

08002418 <main>:
{
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 800241c:	f000 fb46 	bl	8002aac <HAL_Init>
  SystemClock_Config();
 8002420:	f7ff ffbc 	bl	800239c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	2214      	movs	r2, #20
 8002426:	2100      	movs	r1, #0
 8002428:	a808      	add	r0, sp, #32
 800242a:	f002 f977 	bl	800471c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242e:	2080      	movs	r0, #128	; 0x80
 8002430:	4bce      	ldr	r3, [pc, #824]	; (800276c <main+0x354>)
 8002432:	0300      	lsls	r0, r0, #12
 8002434:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 8002436:	4ece      	ldr	r6, [pc, #824]	; (8002770 <main+0x358>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002438:	4301      	orrs	r1, r0
 800243a:	6159      	str	r1, [r3, #20]
 800243c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, KB_ROW0_Pin|KB_ROW1_Pin|KB_ROW2_Pin|LCD_RS_CS_HIGH_Pin
 800243e:	4dcd      	ldr	r5, [pc, #820]	; (8002774 <main+0x35c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002440:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002442:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002444:	9204      	str	r2, [sp, #16]
 8002446:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002448:	6959      	ldr	r1, [r3, #20]
 800244a:	03c0      	lsls	r0, r0, #15
 800244c:	4301      	orrs	r1, r0
 800244e:	6159      	str	r1, [r3, #20]
 8002450:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002452:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002454:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002458:	9205      	str	r2, [sp, #20]
 800245a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	6959      	ldr	r1, [r3, #20]
 800245e:	0280      	lsls	r0, r0, #10
 8002460:	4301      	orrs	r1, r0
 8002462:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 800246c:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	9206      	str	r2, [sp, #24]
 8002470:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 8002474:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	430a      	orrs	r2, r1
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 800247c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	400b      	ands	r3, r1
 8002480:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 8002482:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 8002486:	f000 fc39 	bl	8002cfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800248a:	2090      	movs	r0, #144	; 0x90
 800248c:	2201      	movs	r2, #1
 800248e:	2110      	movs	r1, #16
 8002490:	05c0      	lsls	r0, r0, #23
 8002492:	f000 fc33 	bl	8002cfc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, KB_ROW0_Pin|KB_ROW1_Pin|KB_ROW2_Pin|LCD_RS_CS_HIGH_Pin
 8002496:	2200      	movs	r2, #0
 8002498:	0029      	movs	r1, r5
 800249a:	48b7      	ldr	r0, [pc, #732]	; (8002778 <main+0x360>)
 800249c:	f000 fc2e 	bl	8002cfc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80024a0:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a2:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80024a4:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a6:	48b5      	ldr	r0, [pc, #724]	; (800277c <main+0x364>)
 80024a8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80024aa:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ae:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b0:	f000 fb74 	bl	8002b9c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	2090      	movs	r0, #144	; 0x90
 80024b6:	a908      	add	r1, sp, #32
 80024b8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = OUT1_Pin|BUZZER_Pin|LCD_RST_Pin|LCD_CTRL_BACKLIGHT_Pin
 80024ba:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f000 fb6b 	bl	8002b9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80024c6:	2310      	movs	r3, #16
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80024c8:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80024ca:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80024cc:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ce:	3b0d      	subs	r3, #13
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80024d0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f000 fb60 	bl	8002b9c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024dc:	48a6      	ldr	r0, [pc, #664]	; (8002778 <main+0x360>)
 80024de:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = KB_ROW0_Pin|KB_ROW1_Pin|KB_ROW2_Pin|LCD_RS_CS_HIGH_Pin
 80024e0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	f000 fb58 	bl	8002b9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW4_Pin|KB_COL0_Pin|KB_COL1_Pin|KB_COL2_Pin
 80024ec:	4ba4      	ldr	r3, [pc, #656]	; (8002780 <main+0x368>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	48a2      	ldr	r0, [pc, #648]	; (8002778 <main+0x360>)
 80024f0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = SW4_Pin|KB_COL0_Pin|KB_COL1_Pin|KB_COL2_Pin
 80024f2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f6:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	f000 fb50 	bl	8002b9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT_Pin;
 80024fc:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80024fe:	48a1      	ldr	r0, [pc, #644]	; (8002784 <main+0x36c>)
  GPIO_InitStruct.Pin = BOOT_Pin;
 8002500:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8002502:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = BOOT_Pin;
 8002504:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002506:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002508:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 800250a:	f000 fb47 	bl	8002b9c <HAL_GPIO_Init>
  hpcd_USB_FS.Instance = USB;
 800250e:	489e      	ldr	r0, [pc, #632]	; (8002788 <main+0x370>)
 8002510:	4b9e      	ldr	r3, [pc, #632]	; (800278c <main+0x374>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002512:	2608      	movs	r6, #8
  hpcd_USB_FS.Instance = USB;
 8002514:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002516:	2302      	movs	r3, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002518:	6046      	str	r6, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800251a:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800251c:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800251e:	6184      	str	r4, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002520:	61c4      	str	r4, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002522:	6204      	str	r4, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002524:	f000 ff34 	bl	8003390 <HAL_PCD_Init>
 8002528:	42a0      	cmp	r0, r4
 800252a:	d001      	beq.n	8002530 <main+0x118>
 800252c:	b672      	cpsid	i
  while (1)
 800252e:	e7fe      	b.n	800252e <main+0x116>
  hi2c1.Instance = I2C1;
 8002530:	4c97      	ldr	r4, [pc, #604]	; (8002790 <main+0x378>)
 8002532:	4b98      	ldr	r3, [pc, #608]	; (8002794 <main+0x37c>)
  hi2c1.Init.OwnAddress1 = 0;
 8002534:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8002536:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002538:	4b97      	ldr	r3, [pc, #604]	; (8002798 <main+0x380>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800253a:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800253c:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800253e:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002540:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002542:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002544:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8002546:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002548:	60e7      	str	r7, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800254a:	f000 fd0d 	bl	8002f68 <HAL_I2C_Init>
 800254e:	1e01      	subs	r1, r0, #0
 8002550:	d001      	beq.n	8002556 <main+0x13e>
 8002552:	b672      	cpsid	i
  while (1)
 8002554:	e7fe      	b.n	8002554 <main+0x13c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002556:	0020      	movs	r0, r4
 8002558:	f000 fed0 	bl	80032fc <HAL_I2CEx_ConfigAnalogFilter>
 800255c:	1e01      	subs	r1, r0, #0
 800255e:	d001      	beq.n	8002564 <main+0x14c>
 8002560:	b672      	cpsid	i
  while (1)
 8002562:	e7fe      	b.n	8002562 <main+0x14a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002564:	0020      	movs	r0, r4
 8002566:	f000 feef 	bl	8003348 <HAL_I2CEx_ConfigDigitalFilter>
 800256a:	2800      	cmp	r0, #0
 800256c:	d001      	beq.n	8002572 <main+0x15a>
 800256e:	b672      	cpsid	i
  while (1)
 8002570:	e7fe      	b.n	8002570 <main+0x158>
  hspi1.Instance = SPI1;
 8002572:	4d8a      	ldr	r5, [pc, #552]	; (800279c <main+0x384>)
 8002574:	4b8a      	ldr	r3, [pc, #552]	; (80027a0 <main+0x388>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002576:	60a8      	str	r0, [r5, #8]
  hspi1.Instance = SPI1;
 8002578:	602b      	str	r3, [r5, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800257a:	2382      	movs	r3, #130	; 0x82
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	606b      	str	r3, [r5, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002580:	23e0      	movs	r3, #224	; 0xe0
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	60eb      	str	r3, [r5, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	61ab      	str	r3, [r5, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800258c:	3bc9      	subs	r3, #201	; 0xc9
 800258e:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; //SPI_POLARITY_LOW for INA229, HIGH for ST7920
 8002590:	6128      	str	r0, [r5, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002592:	61eb      	str	r3, [r5, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002594:	6228      	str	r0, [r5, #32]
  hspi1.Init.CRCPolynomial = 7;
 8002596:	3b31      	subs	r3, #49	; 0x31
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002598:	6268      	str	r0, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259a:	62a8      	str	r0, [r5, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800259c:	6328      	str	r0, [r5, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800259e:	6368      	str	r0, [r5, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025a0:	0028      	movs	r0, r5
  hspi1.Init.CRCPolynomial = 7;
 80025a2:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;//ina229 needs 2EDGE, ST7920 needs 2EDGE too
 80025a4:	616f      	str	r7, [r5, #20]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025a6:	f001 fc17 	bl	8003dd8 <HAL_SPI_Init>
 80025aa:	1e03      	subs	r3, r0, #0
 80025ac:	d001      	beq.n	80025b2 <main+0x19a>
 80025ae:	b672      	cpsid	i
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <main+0x198>
  hspi2.Instance = SPI2;
 80025b2:	487c      	ldr	r0, [pc, #496]	; (80027a4 <main+0x38c>)
 80025b4:	4a7c      	ldr	r2, [pc, #496]	; (80027a8 <main+0x390>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025b6:	6083      	str	r3, [r0, #8]
  hspi2.Instance = SPI2;
 80025b8:	6002      	str	r2, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025ba:	2282      	movs	r2, #130	; 0x82
 80025bc:	0052      	lsls	r2, r2, #1
 80025be:	6042      	str	r2, [r0, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c0:	22e0      	movs	r2, #224	; 0xe0
 80025c2:	00d2      	lsls	r2, r2, #3
 80025c4:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025c6:	2202      	movs	r2, #2
 80025c8:	6102      	str	r2, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025ca:	32ff      	adds	r2, #255	; 0xff
 80025cc:	32ff      	adds	r2, #255	; 0xff
 80025ce:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025d0:	3ad9      	subs	r2, #217	; 0xd9
 80025d2:	3aff      	subs	r2, #255	; 0xff
 80025d4:	61c2      	str	r2, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 80025d6:	3a21      	subs	r2, #33	; 0x21
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d8:	6143      	str	r3, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025da:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025dc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025de:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025e0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.CRCPolynomial = 7;
 80025e2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025e4:	6346      	str	r6, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025e6:	f001 fbf7 	bl	8003dd8 <HAL_SPI_Init>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <main+0x1da>
 80025ee:	b672      	cpsid	i
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <main+0x1d8>
  huart1.Instance = USART1;
 80025f2:	486e      	ldr	r0, [pc, #440]	; (80027ac <main+0x394>)
 80025f4:	4a6e      	ldr	r2, [pc, #440]	; (80027b0 <main+0x398>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 80025f8:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 38400;
 80025fa:	2296      	movs	r2, #150	; 0x96
 80025fc:	0212      	lsls	r2, r2, #8
 80025fe:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002600:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002602:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002604:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002606:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002608:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800260a:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800260c:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800260e:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002610:	f002 f810 	bl	8004634 <HAL_UART_Init>
 8002614:	2800      	cmp	r0, #0
 8002616:	d001      	beq.n	800261c <main+0x204>
 8002618:	b672      	cpsid	i
  while (1)
 800261a:	e7fe      	b.n	800261a <main+0x202>
   HAL_GPIO_WritePin(LCD_CTRL_BACKLIGHT_GPIO_Port, LCD_CTRL_BACKLIGHT_Pin, GPIO_PIN_SET);
 800261c:	2090      	movs	r0, #144	; 0x90
 800261e:	003a      	movs	r2, r7
 8002620:	0031      	movs	r1, r6
 8002622:	05c0      	lsls	r0, r0, #23
 8002624:	f000 fb6a 	bl	8002cfc <HAL_GPIO_WritePin>
   indicator_setPortPin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002628:	2090      	movs	r0, #144	; 0x90
 800262a:	2102      	movs	r1, #2
 800262c:	05c0      	lsls	r0, r0, #23
 800262e:	f7ff fdcd 	bl	80021cc <indicator_setPortPin>
   indicator_setKSysTickTime_ms(1000E-3/SYSTICK);
 8002632:	20fa      	movs	r0, #250	; 0xfa
 8002634:	0080      	lsls	r0, r0, #2
 8002636:	f7ff fdcf 	bl	80021d8 <indicator_setKSysTickTime_ms>
   indicator_On();	//ok!
 800263a:	f7ff fdd3 	bl	80021e4 <indicator_On>
   uint32_t tickstart = HAL_GetTick();
 800263e:	f000 fa51 	bl	8002ae4 <HAL_GetTick>
   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002642:	2302      	movs	r3, #2
   	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002644:	0028      	movs	r0, r5
   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002646:	612b      	str	r3, [r5, #16]
   	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002648:	f001 fbc6 	bl	8003dd8 <HAL_SPI_Init>
 800264c:	1e06      	subs	r6, r0, #0
 800264e:	d001      	beq.n	8002654 <main+0x23c>
 8002650:	b672      	cpsid	i
  while (1)
 8002652:	e7fe      	b.n	8002652 <main+0x23a>
   ST7920_Init();
 8002654:	f7ff fcbe 	bl	8001fd4 <ST7920_Init>
   HAL_Delay(100);
 8002658:	2064      	movs	r0, #100	; 0x64
 800265a:	f000 fa49 	bl	8002af0 <HAL_Delay>
   ST7920_SendString(0, 0, "VOLTAJE (mV)");
 800265e:	0031      	movs	r1, r6
 8002660:	0030      	movs	r0, r6
 8002662:	4a54      	ldr	r2, [pc, #336]	; (80027b4 <main+0x39c>)
 8002664:	f7ff fcef 	bl	8002046 <ST7920_SendString>
   ST7920_SendString(1, 0, "V:");
 8002668:	0031      	movs	r1, r6
 800266a:	0038      	movs	r0, r7
 800266c:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <main+0x3a0>)
 800266e:	f7ff fcea 	bl	8002046 <ST7920_SendString>
   ST7920_SendString(2, 0, "CORRIENTE (mA)");
 8002672:	0031      	movs	r1, r6
 8002674:	2002      	movs	r0, #2
 8002676:	4a51      	ldr	r2, [pc, #324]	; (80027bc <main+0x3a4>)
 8002678:	f7ff fce5 	bl	8002046 <ST7920_SendString>
   ST7920_SendString(3, 0, "I:");
 800267c:	0031      	movs	r1, r6
 800267e:	2003      	movs	r0, #3
 8002680:	4a4f      	ldr	r2, [pc, #316]	; (80027c0 <main+0x3a8>)
 8002682:	f7ff fce0 	bl	8002046 <ST7920_SendString>
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002686:	0028      	movs	r0, r5
   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002688:	612e      	str	r6, [r5, #16]
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800268a:	f001 fba5 	bl	8003dd8 <HAL_SPI_Init>
 800268e:	1e05      	subs	r5, r0, #0
 8002690:	d001      	beq.n	8002696 <main+0x27e>
 8002692:	b672      	cpsid	i
  while (1)
 8002694:	e7fe      	b.n	8002694 <main+0x27c>
   ina229_init();
 8002696:	f7ff fb99 	bl	8001dcc <ina229_init>
   ADS1115_init();
 800269a:	f7ff fd03 	bl	80020a4 <ADS1115_init>
   ADS1115_setMuxChannel(MUX_AIN0_AIN3);//mv1
 800269e:	0038      	movs	r0, r7
 80026a0:	f7ff fd1c 	bl	80020dc <ADS1115_setMuxChannel>
   ADS1115_setOS(1);//wakeup ADS1115
 80026a4:	0038      	movs	r0, r7
 80026a6:	f7ff fd09 	bl	80020bc <ADS1115_setOS>
   ADS1115_setOperatingMode(CONTINUOUS_CONV);
 80026aa:	0028      	movs	r0, r5
 80026ac:	f7ff fd28 	bl	8002100 <ADS1115_setOperatingMode>
	  HAL_I2C_Mem_Read(&hi2c1, ADS1115_ADR_GND, ADS1115_CONVRS_REG, I2C_MEMADD_SIZE_8BIT, &reg[0], 2, HAL_MAX_DELAY);
 80026b0:	2301      	movs	r3, #1
 80026b2:	4d44      	ldr	r5, [pc, #272]	; (80027c4 <main+0x3ac>)
 80026b4:	425b      	negs	r3, r3
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	3303      	adds	r3, #3
 80026ba:	2200      	movs	r2, #0
 80026bc:	2190      	movs	r1, #144	; 0x90
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	9500      	str	r5, [sp, #0]
 80026c2:	003b      	movs	r3, r7
 80026c4:	0020      	movs	r0, r4
 80026c6:	f000 fd37 	bl	8003138 <HAL_I2C_Mem_Read>
	  ib16 = (reg[0]<<8) + reg[1];
 80026ca:	782b      	ldrb	r3, [r5, #0]
 80026cc:	7868      	ldrb	r0, [r5, #1]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	18c0      	adds	r0, r0, r3
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <main+0x3b0>)
 80026d4:	b200      	sxth	r0, r0
 80026d6:	8018      	strh	r0, [r3, #0]
	  mv = (ib16 *-2048.00f/32768);//expresado en mV
 80026d8:	f7fe f818 	bl	800070c <__aeabi_i2f>
 80026dc:	21c5      	movs	r1, #197	; 0xc5
 80026de:	0609      	lsls	r1, r1, #24
 80026e0:	f7fd feee 	bl	80004c0 <__aeabi_fmul>
 80026e4:	21e0      	movs	r1, #224	; 0xe0
 80026e6:	0589      	lsls	r1, r1, #22
 80026e8:	f7fd feea 	bl	80004c0 <__aeabi_fmul>
 80026ec:	f7ff fb08 	bl	8001d00 <__aeabi_f2d>
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <main+0x3b4>)
	  ftoa(mv, buff, 3);
 80026f2:	aa08      	add	r2, sp, #32
	  mv = (ib16 *-2048.00f/32768);//expresado en mV
 80026f4:	6018      	str	r0, [r3, #0]
 80026f6:	6059      	str	r1, [r3, #4]
	  ftoa(mv, buff, 3);
 80026f8:	2303      	movs	r3, #3
 80026fa:	f7ff fd79 	bl	80021f0 <ftoa>
	  ST7920_SendString(1, 1, buff);
 80026fe:	0038      	movs	r0, r7
 8002700:	0039      	movs	r1, r7
 8002702:	aa08      	add	r2, sp, #32
 8002704:	f7ff fc9f 	bl	8002046 <ST7920_SendString>
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	4d24      	ldr	r5, [pc, #144]	; (800279c <main+0x384>)
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800270c:	0028      	movs	r0, r5
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800270e:	612b      	str	r3, [r5, #16]
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002710:	f001 fb62 	bl	8003dd8 <HAL_SPI_Init>
 8002714:	2800      	cmp	r0, #0
 8002716:	d001      	beq.n	800271c <main+0x304>
 8002718:	b672      	cpsid	i
  while (1)
 800271a:	e7fe      	b.n	800271a <main+0x302>
	  current_amp = INA229_read_current_register() * INA229_CURRENT_LSB;//;//Amp
 800271c:	f7ff fbcc 	bl	8001eb8 <INA229_read_current_register>
 8002720:	f7ff fabe 	bl	8001ca0 <__aeabi_i2d>
 8002724:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <main+0x3b8>)
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <main+0x3bc>)
 8002728:	f7fe fc86 	bl	8001038 <__aeabi_dmul>
	  current_amp *= 1000;	//in milliamps
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <main+0x3c0>)
 800272e:	2200      	movs	r2, #0
 8002730:	f7fe fc82 	bl	8001038 <__aeabi_dmul>
	  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002734:	2302      	movs	r3, #2
	  current_amp *= 1000;	//in milliamps
 8002736:	4e29      	ldr	r6, [pc, #164]	; (80027dc <main+0x3c4>)
	  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002738:	612b      	str	r3, [r5, #16]
	  current_amp *= 1000;	//in milliamps
 800273a:	6030      	str	r0, [r6, #0]
 800273c:	6071      	str	r1, [r6, #4]
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800273e:	0028      	movs	r0, r5
 8002740:	f001 fb4a 	bl	8003dd8 <HAL_SPI_Init>
 8002744:	2800      	cmp	r0, #0
 8002746:	d001      	beq.n	800274c <main+0x334>
 8002748:	b672      	cpsid	i
  while (1)
 800274a:	e7fe      	b.n	800274a <main+0x332>
	  ftoa(current_amp, buff, 3);
 800274c:	2303      	movs	r3, #3
 800274e:	6830      	ldr	r0, [r6, #0]
 8002750:	6871      	ldr	r1, [r6, #4]
 8002752:	aa08      	add	r2, sp, #32
 8002754:	f7ff fd4c 	bl	80021f0 <ftoa>
	  ST7920_SendString(3, 1, buff);
 8002758:	0039      	movs	r1, r7
 800275a:	2003      	movs	r0, #3
 800275c:	aa08      	add	r2, sp, #32
 800275e:	f7ff fc72 	bl	8002046 <ST7920_SendString>
	  HAL_Delay(2000);
 8002762:	20fa      	movs	r0, #250	; 0xfa
 8002764:	00c0      	lsls	r0, r0, #3
 8002766:	f000 f9c3 	bl	8002af0 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, ADS1115_ADR_GND, ADS1115_CONVRS_REG, I2C_MEMADD_SIZE_8BIT, &reg[0], 2, HAL_MAX_DELAY);
 800276a:	e7a1      	b.n	80026b0 <main+0x298>
 800276c:	40021000 	.word	0x40021000
 8002770:	0000810f 	.word	0x0000810f
 8002774:	0000280f 	.word	0x0000280f
 8002778:	48000400 	.word	0x48000400
 800277c:	48000800 	.word	0x48000800
 8002780:	00001330 	.word	0x00001330
 8002784:	48001400 	.word	0x48001400
 8002788:	200000a4 	.word	0x200000a4
 800278c:	40005c00 	.word	0x40005c00
 8002790:	20000050 	.word	0x20000050
 8002794:	40005400 	.word	0x40005400
 8002798:	2000090e 	.word	0x2000090e
 800279c:	20000398 	.word	0x20000398
 80027a0:	40013000 	.word	0x40013000
 80027a4:	200003fc 	.word	0x200003fc
 80027a8:	40003800 	.word	0x40003800
 80027ac:	20000460 	.word	0x20000460
 80027b0:	40013800 	.word	0x40013800
 80027b4:	080047c8 	.word	0x080047c8
 80027b8:	080047d5 	.word	0x080047d5
 80027bc:	080047d8 	.word	0x080047d8
 80027c0:	080047e7 	.word	0x080047e7
 80027c4:	200004f8 	.word	0x200004f8
 80027c8:	200004e8 	.word	0x200004e8
 80027cc:	200004f0 	.word	0x200004f0
 80027d0:	eb1c432d 	.word	0xeb1c432d
 80027d4:	3eba36e2 	.word	0x3eba36e2
 80027d8:	408f4000 	.word	0x408f4000
 80027dc:	20000048 	.word	0x20000048

080027e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e0:	2001      	movs	r0, #1
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_MspInit+0x2c>)
{
 80027e4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	6999      	ldr	r1, [r3, #24]
 80027e8:	4301      	orrs	r1, r0
 80027ea:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4002      	ands	r2, r0
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	61da      	str	r2, [r3, #28]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	400b      	ands	r3, r1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	b002      	add	sp, #8
 8002808:	4770      	bx	lr
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40021000 	.word	0x40021000

08002810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002810:	b510      	push	{r4, lr}
 8002812:	0004      	movs	r4, r0
 8002814:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002816:	2214      	movs	r2, #20
 8002818:	2100      	movs	r1, #0
 800281a:	a803      	add	r0, sp, #12
 800281c:	f001 ff7e 	bl	800471c <memset>
  if(hi2c->Instance==I2C1)
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_I2C_MspInit+0x5c>)
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d11e      	bne.n	8002866 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	4c11      	ldr	r4, [pc, #68]	; (8002870 <HAL_I2C_MspInit+0x60>)
 800282c:	02c9      	lsls	r1, r1, #11
 800282e:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	4810      	ldr	r0, [pc, #64]	; (8002874 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	430a      	orrs	r2, r1
 8002834:	6162      	str	r2, [r4, #20]
 8002836:	6963      	ldr	r3, [r4, #20]
 8002838:	400b      	ands	r3, r1
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002842:	3bae      	subs	r3, #174	; 0xae
 8002844:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002846:	3b0f      	subs	r3, #15
 8002848:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800284c:	3b02      	subs	r3, #2
 800284e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	f000 f9a4 	bl	8002b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	69e2      	ldr	r2, [r4, #28]
 8002858:	0389      	lsls	r1, r1, #14
 800285a:	430a      	orrs	r2, r1
 800285c:	61e2      	str	r2, [r4, #28]
 800285e:	69e3      	ldr	r3, [r4, #28]
 8002860:	400b      	ands	r3, r1
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002866:	b008      	add	sp, #32
 8002868:	bd10      	pop	{r4, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	40005400 	.word	0x40005400
 8002870:	40021000 	.word	0x40021000
 8002874:	48000400 	.word	0x48000400

08002878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002878:	b530      	push	{r4, r5, lr}
 800287a:	0004      	movs	r4, r0
 800287c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	2214      	movs	r2, #20
 8002880:	2100      	movs	r1, #0
 8002882:	a805      	add	r0, sp, #20
 8002884:	f001 ff4a 	bl	800471c <memset>
  if(hspi->Instance==SPI1)
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	4a28      	ldr	r2, [pc, #160]	; (800292c <HAL_SPI_MspInit+0xb4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d11f      	bne.n	80028d0 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002890:	2080      	movs	r0, #128	; 0x80
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 8002894:	0140      	lsls	r0, r0, #5
 8002896:	6999      	ldr	r1, [r3, #24]
 8002898:	4301      	orrs	r1, r0
 800289a:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 800289e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028a2:	4002      	ands	r2, r0
 80028a4:	9201      	str	r2, [sp, #4]
 80028a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	430a      	orrs	r2, r1
 80028ae:	615a      	str	r2, [r3, #20]
 80028b0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	400b      	ands	r3, r1
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028ba:	23e0      	movs	r3, #224	; 0xe0
 80028bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	3bde      	subs	r3, #222	; 0xde
 80028c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c2:	3301      	adds	r3, #1
 80028c4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f000 f968 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028cc:	b00b      	add	sp, #44	; 0x2c
 80028ce:	bd30      	pop	{r4, r5, pc}
  else if(hspi->Instance==SPI2)
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_SPI_MspInit+0xbc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d1fa      	bne.n	80028cc <HAL_SPI_MspInit+0x54>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028d6:	2080      	movs	r0, #128	; 0x80
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_SPI_MspInit+0xb8>)
 80028da:	01c0      	lsls	r0, r0, #7
 80028dc:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e0:	4301      	orrs	r1, r0
 80028e2:	61d9      	str	r1, [r3, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e6:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028ea:	4002      	ands	r2, r0
 80028ec:	9203      	str	r2, [sp, #12]
 80028ee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f2:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	480f      	ldr	r0, [pc, #60]	; (8002938 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	400b      	ands	r3, r1
 80028fe:	9304      	str	r3, [sp, #16]
 8002900:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002908:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800290c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002910:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002912:	f000 f943 	bl	8002b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002916:	23c0      	movs	r3, #192	; 0xc0
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	4806      	ldr	r0, [pc, #24]	; (8002938 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002924:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002926:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	a905      	add	r1, sp, #20
 800292a:	e7cd      	b.n	80028c8 <HAL_SPI_MspInit+0x50>
 800292c:	40013000 	.word	0x40013000
 8002930:	40021000 	.word	0x40021000
 8002934:	40003800 	.word	0x40003800
 8002938:	48000400 	.word	0x48000400

0800293c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800293c:	b510      	push	{r4, lr}
 800293e:	0004      	movs	r4, r0
 8002940:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002942:	2214      	movs	r2, #20
 8002944:	2100      	movs	r1, #0
 8002946:	a803      	add	r0, sp, #12
 8002948:	f001 fee8 	bl	800471c <memset>
  if(huart->Instance==USART1)
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_UART_MspInit+0x60>)
 800294e:	6822      	ldr	r2, [r4, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d120      	bne.n	8002996 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002954:	2080      	movs	r0, #128	; 0x80
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_UART_MspInit+0x64>)
 8002958:	01c0      	lsls	r0, r0, #7
 800295a:	6999      	ldr	r1, [r3, #24]
 800295c:	4301      	orrs	r1, r0
 800295e:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002962:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8002966:	4002      	ands	r2, r0
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002970:	430a      	orrs	r2, r1
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002978:	400b      	ands	r3, r1
 800297a:	9302      	str	r3, [sp, #8]
 800297c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002988:	3301      	adds	r3, #1
 800298a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800298e:	3b02      	subs	r3, #2
 8002990:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002992:	f000 f903 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002996:	b008      	add	sp, #32
 8002998:	bd10      	pop	{r4, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	40013800 	.word	0x40013800
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_PCD_MspInit+0x24>)
 80029a6:	6802      	ldr	r2, [r0, #0]
{
 80029a8:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d109      	bne.n	80029c2 <HAL_PCD_MspInit+0x1e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80029ae:	2080      	movs	r0, #128	; 0x80
 80029b0:	4a06      	ldr	r2, [pc, #24]	; (80029cc <HAL_PCD_MspInit+0x28>)
 80029b2:	0400      	lsls	r0, r0, #16
 80029b4:	69d1      	ldr	r1, [r2, #28]
 80029b6:	4301      	orrs	r1, r0
 80029b8:	61d1      	str	r1, [r2, #28]
 80029ba:	69d3      	ldr	r3, [r2, #28]
 80029bc:	4003      	ands	r3, r0
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80029c2:	b002      	add	sp, #8
 80029c4:	4770      	bx	lr
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40005c00 	.word	0x40005c00
 80029cc:	40021000 	.word	0x40021000

080029d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <NMI_Handler>

080029d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <HardFault_Handler>

080029d4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029d4:	4770      	bx	lr

080029d6 <PendSV_Handler>:
 80029d6:	4770      	bx	lr

080029d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029da:	f000 f877 	bl	8002acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029de:	bd10      	pop	{r4, pc}

080029e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e0:	4813      	ldr	r0, [pc, #76]	; (8002a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029e4:	f000 f83d 	bl	8002a62 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80029e8:	4812      	ldr	r0, [pc, #72]	; (8002a34 <LoopForever+0x6>)
    LDR R1, [R0]
 80029ea:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80029ec:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <LoopForever+0xa>)
    CMP R1, R2
 80029f0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80029f2:	d105      	bne.n	8002a00 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80029f4:	4811      	ldr	r0, [pc, #68]	; (8002a3c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80029f6:	4912      	ldr	r1, [pc, #72]	; (8002a40 <LoopForever+0x12>)
    STR R1, [R0]
 80029f8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80029fa:	4812      	ldr	r0, [pc, #72]	; (8002a44 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80029fc:	4912      	ldr	r1, [pc, #72]	; (8002a48 <LoopForever+0x1a>)
    STR R1, [R0]
 80029fe:	6001      	str	r1, [r0, #0]

08002a00 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	4812      	ldr	r0, [pc, #72]	; (8002a4c <LoopForever+0x1e>)
  ldr r1, =_edata
 8002a02:	4913      	ldr	r1, [pc, #76]	; (8002a50 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <LoopForever+0x26>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002a18:	4c10      	ldr	r4, [pc, #64]	; (8002a5c <LoopForever+0x2e>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a26:	f001 fe55 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2a:	f7ff fcf5 	bl	8002418 <main>

08002a2e <LoopForever>:

LoopForever:
    b LoopForever
 8002a2e:	e7fe      	b.n	8002a2e <LoopForever>
  ldr   r0, =_estack
 8002a30:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002a34:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002a38:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002a3c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002a40:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002a44:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002a48:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a54:	0800488c 	.word	0x0800488c
  ldr r2, =_sbss
 8002a58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002a5c:	20000500 	.word	0x20000500

08002a60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC1_IRQHandler>

08002a62 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a62:	4770      	bx	lr

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a68:	20fa      	movs	r0, #250	; 0xfa
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_InitTick+0x3c>)
 8002a6c:	0080      	lsls	r0, r0, #2
 8002a6e:	7819      	ldrb	r1, [r3, #0]
 8002a70:	f7fd fb54 	bl	800011c <__udivsi3>
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_InitTick+0x40>)
 8002a76:	0001      	movs	r1, r0
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f7fd fb4f 	bl	800011c <__udivsi3>
 8002a7e:	f000 f873 	bl	8002b68 <HAL_SYSTICK_Config>
 8002a82:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002a84:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a86:	2c00      	cmp	r4, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8a:	2d03      	cmp	r5, #3
 8002a8c:	d807      	bhi.n	8002a9e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8e:	3802      	subs	r0, #2
 8002a90:	0022      	movs	r2, r4
 8002a92:	0029      	movs	r1, r5
 8002a94:	f000 f83e 	bl	8002b14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a98:	0020      	movs	r0, r4
 8002a9a:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_InitTick+0x44>)
 8002a9c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	20000008 	.word	0x20000008

08002aac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aac:	2310      	movs	r3, #16
 8002aae:	4a06      	ldr	r2, [pc, #24]	; (8002ac8 <HAL_Init+0x1c>)
{
 8002ab0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aba:	f7ff ffd3 	bl	8002a64 <HAL_InitTick>
  HAL_MspInit();
 8002abe:	f7ff fe8f 	bl	80027e0 <HAL_MspInit>
}
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40022000 	.word	0x40022000

08002acc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002acc:	4a03      	ldr	r2, [pc, #12]	; (8002adc <HAL_IncTick+0x10>)
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <HAL_IncTick+0x14>)
 8002ad0:	6811      	ldr	r1, [r2, #0]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	185b      	adds	r3, r3, r1
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	4770      	bx	lr
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	200004fc 	.word	0x200004fc
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ae4:	4b01      	ldr	r3, [pc, #4]	; (8002aec <HAL_GetTick+0x8>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
}
 8002ae8:	4770      	bx	lr
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	200004fc 	.word	0x200004fc

08002af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff fff6 	bl	8002ae4 <HAL_GetTick>
 8002af8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	1c63      	adds	r3, r4, #1
 8002afc:	d002      	beq.n	8002b04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <HAL_Delay+0x20>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	1b40      	subs	r0, r0, r5
 8002b0a:	42a0      	cmp	r0, r4
 8002b0c:	d3fa      	bcc.n	8002b04 <HAL_Delay+0x14>
  {
  }
}
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b14:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b16:	25ff      	movs	r5, #255	; 0xff
 8002b18:	2403      	movs	r4, #3
 8002b1a:	002a      	movs	r2, r5
 8002b1c:	4004      	ands	r4, r0
 8002b1e:	00e4      	lsls	r4, r4, #3
 8002b20:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b22:	0189      	lsls	r1, r1, #6
 8002b24:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b26:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b28:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b2a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	db0a      	blt.n	8002b46 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b30:	24c0      	movs	r4, #192	; 0xc0
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_NVIC_SetPriority+0x4c>)
 8002b34:	0880      	lsrs	r0, r0, #2
 8002b36:	0080      	lsls	r0, r0, #2
 8002b38:	18c0      	adds	r0, r0, r3
 8002b3a:	00a4      	lsls	r4, r4, #2
 8002b3c:	5903      	ldr	r3, [r0, r4]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	4311      	orrs	r1, r2
 8002b42:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002b44:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b46:	200f      	movs	r0, #15
 8002b48:	4003      	ands	r3, r0
 8002b4a:	3b08      	subs	r3, #8
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <HAL_NVIC_SetPriority+0x50>)
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	181b      	adds	r3, r3, r0
 8002b54:	69d8      	ldr	r0, [r3, #28]
 8002b56:	4002      	ands	r2, r0
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	61d9      	str	r1, [r3, #28]
 8002b5c:	e7f2      	b.n	8002b44 <HAL_NVIC_SetPriority+0x30>
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	1e43      	subs	r3, r0, #1
 8002b6c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d20d      	bcs.n	8002b90 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b74:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b76:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b7c:	6a03      	ldr	r3, [r0, #32]
 8002b7e:	0609      	lsls	r1, r1, #24
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b90:	4770      	bx	lr
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	e000e010 	.word	0xe000e010
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8002b9c:	2300      	movs	r3, #0
{
 8002b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba2:	680a      	ldr	r2, [r1, #0]
 8002ba4:	0014      	movs	r4, r2
 8002ba6:	40dc      	lsrs	r4, r3
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8002baa:	b007      	add	sp, #28
 8002bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bae:	2501      	movs	r5, #1
 8002bb0:	0014      	movs	r4, r2
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	402c      	ands	r4, r5
 8002bb6:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8002bb8:	422a      	tst	r2, r5
 8002bba:	d100      	bne.n	8002bbe <HAL_GPIO_Init+0x22>
 8002bbc:	e091      	b.n	8002ce2 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bbe:	684a      	ldr	r2, [r1, #4]
 8002bc0:	005e      	lsls	r6, r3, #1
 8002bc2:	4694      	mov	ip, r2
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4664      	mov	r4, ip
 8002bc8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bca:	2403      	movs	r4, #3
 8002bcc:	40b4      	lsls	r4, r6
 8002bce:	43e4      	mvns	r4, r4
 8002bd0:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bd2:	1e54      	subs	r4, r2, #1
 8002bd4:	2c01      	cmp	r4, #1
 8002bd6:	d82a      	bhi.n	8002c2e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8002bd8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bda:	9c02      	ldr	r4, [sp, #8]
 8002bdc:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bde:	68cc      	ldr	r4, [r1, #12]
 8002be0:	40b4      	lsls	r4, r6
 8002be2:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8002be4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002be6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be8:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bea:	43ac      	bics	r4, r5
 8002bec:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bee:	4664      	mov	r4, ip
 8002bf0:	0924      	lsrs	r4, r4, #4
 8002bf2:	403c      	ands	r4, r7
 8002bf4:	409c      	lsls	r4, r3
 8002bf6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002bf8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002bfa:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bfc:	9c02      	ldr	r4, [sp, #8]
 8002bfe:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c00:	688c      	ldr	r4, [r1, #8]
 8002c02:	40b4      	lsls	r4, r6
 8002c04:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002c06:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c08:	2a02      	cmp	r2, #2
 8002c0a:	d112      	bne.n	8002c32 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8002c0c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c0e:	2507      	movs	r5, #7
 8002c10:	00a4      	lsls	r4, r4, #2
 8002c12:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8002c14:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c16:	9403      	str	r4, [sp, #12]
 8002c18:	240f      	movs	r4, #15
 8002c1a:	401d      	ands	r5, r3
 8002c1c:	00ad      	lsls	r5, r5, #2
 8002c1e:	40ac      	lsls	r4, r5
 8002c20:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c22:	690c      	ldr	r4, [r1, #16]
 8002c24:	40ac      	lsls	r4, r5
 8002c26:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002c28:	9c03      	ldr	r4, [sp, #12]
 8002c2a:	6227      	str	r7, [r4, #32]
 8002c2c:	e001      	b.n	8002c32 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2e:	2a03      	cmp	r2, #3
 8002c30:	d1e3      	bne.n	8002bfa <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8002c32:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c34:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c36:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c38:	4025      	ands	r5, r4
 8002c3a:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8002c3e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c40:	24c0      	movs	r4, #192	; 0xc0
 8002c42:	4662      	mov	r2, ip
 8002c44:	02a4      	lsls	r4, r4, #10
 8002c46:	4222      	tst	r2, r4
 8002c48:	d04b      	beq.n	8002ce2 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	2501      	movs	r5, #1
 8002c4c:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c4e:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c52:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c54:	432c      	orrs	r4, r5
 8002c56:	6194      	str	r4, [r2, #24]
 8002c58:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c5a:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5c:	402a      	ands	r2, r5
 8002c5e:	9205      	str	r2, [sp, #20]
 8002c60:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_GPIO_Init+0x150>)
 8002c64:	00a4      	lsls	r4, r4, #2
 8002c66:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c68:	220f      	movs	r2, #15
 8002c6a:	3502      	adds	r5, #2
 8002c6c:	401d      	ands	r5, r3
 8002c6e:	00ad      	lsls	r5, r5, #2
 8002c70:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c72:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c74:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c76:	2200      	movs	r2, #0
 8002c78:	42b8      	cmp	r0, r7
 8002c7a:	d008      	beq.n	8002c8e <HAL_GPIO_Init+0xf2>
 8002c7c:	4f1c      	ldr	r7, [pc, #112]	; (8002cf0 <HAL_GPIO_Init+0x154>)
 8002c7e:	3201      	adds	r2, #1
 8002c80:	42b8      	cmp	r0, r7
 8002c82:	d004      	beq.n	8002c8e <HAL_GPIO_Init+0xf2>
 8002c84:	4f1b      	ldr	r7, [pc, #108]	; (8002cf4 <HAL_GPIO_Init+0x158>)
 8002c86:	3201      	adds	r2, #1
 8002c88:	42b8      	cmp	r0, r7
 8002c8a:	d000      	beq.n	8002c8e <HAL_GPIO_Init+0xf2>
 8002c8c:	3203      	adds	r2, #3
 8002c8e:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c90:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c92:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c94:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8002c98:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->RTSR;
 8002c9a:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002c9c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8002c9e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002ca0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca2:	02ff      	lsls	r7, r7, #11
 8002ca4:	d401      	bmi.n	8002caa <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8002ca6:	0035      	movs	r5, r6
 8002ca8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002caa:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8002cac:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002cae:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8002cb0:	9d01      	ldr	r5, [sp, #4]
 8002cb2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cb4:	02bf      	lsls	r7, r7, #10
 8002cb6:	d401      	bmi.n	8002cbc <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8002cb8:	0035      	movs	r5, r6
 8002cba:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cbc:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8002cbe:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8002cc0:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002cc2:	9d01      	ldr	r5, [sp, #4]
 8002cc4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cc6:	03bf      	lsls	r7, r7, #14
 8002cc8:	d401      	bmi.n	8002cce <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8002cca:	0035      	movs	r5, r6
 8002ccc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cce:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8002cd0:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8002cd2:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8002cd4:	9e01      	ldr	r6, [sp, #4]
 8002cd6:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd8:	03ff      	lsls	r7, r7, #15
 8002cda:	d401      	bmi.n	8002ce0 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8002cdc:	4025      	ands	r5, r4
 8002cde:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8002ce0:	6016      	str	r6, [r2, #0]
    position++;
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	e75d      	b.n	8002ba2 <HAL_GPIO_Init+0x6>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	48000400 	.word	0x48000400
 8002cf4:	48000800 	.word	0x48000800
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d00:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d02:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d04:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002d06:	e7fc      	b.n	8002d02 <HAL_GPIO_WritePin+0x6>

08002d08 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d08:	6803      	ldr	r3, [r0, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	0792      	lsls	r2, r2, #30
 8002d0e:	d501      	bpl.n	8002d14 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d14:	2201      	movs	r2, #1
 8002d16:	6999      	ldr	r1, [r3, #24]
 8002d18:	4211      	tst	r1, r2
 8002d1a:	d102      	bne.n	8002d22 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	619a      	str	r2, [r3, #24]
  }
}
 8002d22:	4770      	bx	lr

08002d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d24:	b530      	push	{r4, r5, lr}
 8002d26:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d28:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2a:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d2c:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2e:	0589      	lsls	r1, r1, #22
 8002d30:	431a      	orrs	r2, r3
 8002d32:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <I2C_TransferConfig+0x28>)
 8002d36:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d38:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d3a:	0d64      	lsrs	r4, r4, #21
 8002d3c:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d3e:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d40:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d42:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d44:	432a      	orrs	r2, r5
 8002d46:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d48:	bd30      	pop	{r4, r5, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	03ff63ff 	.word	0x03ff63ff

08002d50 <I2C_IsErrorOccurred>:
{
 8002d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d52:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d54:	6802      	ldr	r2, [r0, #0]
{
 8002d56:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d58:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	000f      	movs	r7, r1
{
 8002d5e:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d60:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d64:	4219      	tst	r1, r3
 8002d66:	d00e      	beq.n	8002d86 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d68:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6a:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8002d6c:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	423a      	tst	r2, r7
 8002d76:	d164      	bne.n	8002e42 <I2C_IsErrorOccurred+0xf2>
 8002d78:	9a01      	ldr	r2, [sp, #4]
 8002d7a:	2a00      	cmp	r2, #0
 8002d7c:	d032      	beq.n	8002de4 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8002d7e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8002d80:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002d82:	9b00      	ldr	r3, [sp, #0]
 8002d84:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d86:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8002d88:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d8a:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8002d8c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d8e:	420a      	tst	r2, r1
 8002d90:	d002      	beq.n	8002d98 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8002d92:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d94:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002d96:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	00c9      	lsls	r1, r1, #3
 8002d9c:	420a      	tst	r2, r1
 8002d9e:	d003      	beq.n	8002da8 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8002da0:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002da2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002da4:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8002da6:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0089      	lsls	r1, r1, #2
 8002dac:	420a      	tst	r2, r1
 8002dae:	d04d      	beq.n	8002e4c <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002db0:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002db2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8002db4:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8002db6:	0020      	movs	r0, r4
 8002db8:	f7ff ffa6 	bl	8002d08 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002dbc:	6822      	ldr	r2, [r4, #0]
 8002dbe:	4925      	ldr	r1, [pc, #148]	; (8002e54 <I2C_IsErrorOccurred+0x104>)
 8002dc0:	6853      	ldr	r3, [r2, #4]
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	0023      	movs	r3, r4
 8002dc8:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002dca:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8002dce:	4307      	orrs	r7, r0
 8002dd0:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	0022      	movs	r2, r4
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8002dda:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002dde:	2001      	movs	r0, #1
 8002de0:	7023      	strb	r3, [r4, #0]
 8002de2:	e035      	b.n	8002e50 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8002de4:	1c72      	adds	r2, r6, #1
 8002de6:	d0c4      	beq.n	8002d72 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002de8:	f7ff fe7c 	bl	8002ae4 <HAL_GetTick>
 8002dec:	1b40      	subs	r0, r0, r5
 8002dee:	42b0      	cmp	r0, r6
 8002df0:	d801      	bhi.n	8002df6 <I2C_IsErrorOccurred+0xa6>
 8002df2:	2e00      	cmp	r6, #0
 8002df4:	d1bc      	bne.n	8002d70 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8002df6:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002df8:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002dfa:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dfc:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002dfe:	7811      	ldrb	r1, [r2, #0]
 8002e00:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e02:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8002e04:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	0209      	lsls	r1, r1, #8
 8002e0a:	420a      	tst	r2, r1
 8002e0c:	d00c      	beq.n	8002e28 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e12:	4210      	tst	r0, r2
 8002e14:	d108      	bne.n	8002e28 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8002e16:	4661      	mov	r1, ip
 8002e18:	2920      	cmp	r1, #32
 8002e1a:	d005      	beq.n	8002e28 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002e22:	f7ff fe5f 	bl	8002ae4 <HAL_GetTick>
 8002e26:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	423b      	tst	r3, r7
 8002e2e:	d19f      	bne.n	8002d70 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e30:	f7ff fe58 	bl	8002ae4 <HAL_GetTick>
 8002e34:	1b40      	subs	r0, r0, r5
 8002e36:	2819      	cmp	r0, #25
 8002e38:	d9f6      	bls.n	8002e28 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	e796      	b.n	8002d70 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8002e42:	9a01      	ldr	r2, [sp, #4]
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d19a      	bne.n	8002d7e <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e48:	61df      	str	r7, [r3, #28]
 8002e4a:	e798      	b.n	8002d7e <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d1b2      	bne.n	8002db6 <I2C_IsErrorOccurred+0x66>
}
 8002e50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	fe00e800 	.word	0xfe00e800

08002e58 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	0004      	movs	r4, r0
 8002e5c:	000d      	movs	r5, r1
 8002e5e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e60:	2702      	movs	r7, #2
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	423b      	tst	r3, r7
 8002e68:	d001      	beq.n	8002e6e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002e6a:	2000      	movs	r0, #0
}
 8002e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6e:	0032      	movs	r2, r6
 8002e70:	0029      	movs	r1, r5
 8002e72:	0020      	movs	r0, r4
 8002e74:	f7ff ff6c 	bl	8002d50 <I2C_IsErrorOccurred>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d118      	bne.n	8002eae <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8002e7c:	1c6b      	adds	r3, r5, #1
 8002e7e:	d0f0      	beq.n	8002e62 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7ff fe30 	bl	8002ae4 <HAL_GetTick>
 8002e84:	1b80      	subs	r0, r0, r6
 8002e86:	42a8      	cmp	r0, r5
 8002e88:	d801      	bhi.n	8002e8e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002e8a:	2d00      	cmp	r5, #0
 8002e8c:	d1e9      	bne.n	8002e62 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	001a      	movs	r2, r3
 8002e94:	403a      	ands	r2, r7
 8002e96:	423b      	tst	r3, r7
 8002e98:	d1e3      	bne.n	8002e62 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	2120      	movs	r1, #32
 8002e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8002ea4:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	3341      	adds	r3, #65	; 0x41
 8002ea8:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eaa:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8002eac:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e7dc      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08002eb2 <I2C_WaitOnFlagUntilTimeout>:
{
 8002eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb4:	0004      	movs	r4, r0
 8002eb6:	000d      	movs	r5, r1
 8002eb8:	0017      	movs	r7, r2
 8002eba:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	6993      	ldr	r3, [r2, #24]
 8002ec0:	402b      	ands	r3, r5
 8002ec2:	1b5b      	subs	r3, r3, r5
 8002ec4:	4259      	negs	r1, r3
 8002ec6:	414b      	adcs	r3, r1
 8002ec8:	42bb      	cmp	r3, r7
 8002eca:	d001      	beq.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e01f      	b.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002ed0:	1c73      	adds	r3, r6, #1
 8002ed2:	d0f4      	beq.n	8002ebe <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed4:	f7ff fe06 	bl	8002ae4 <HAL_GetTick>
 8002ed8:	9b06      	ldr	r3, [sp, #24]
 8002eda:	1ac0      	subs	r0, r0, r3
 8002edc:	42b0      	cmp	r0, r6
 8002ede:	d801      	bhi.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002ee0:	2e00      	cmp	r6, #0
 8002ee2:	d1eb      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	402b      	ands	r3, r5
 8002eea:	1b5b      	subs	r3, r3, r5
 8002eec:	425a      	negs	r2, r3
 8002eee:	4153      	adcs	r3, r2
 8002ef0:	42bb      	cmp	r3, r7
 8002ef2:	d1e3      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002ef8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efa:	4313      	orrs	r3, r2
 8002efc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	0023      	movs	r3, r4
 8002f00:	3341      	adds	r3, #65	; 0x41
 8002f02:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	0022      	movs	r2, r4
 8002f06:	2300      	movs	r3, #0
 8002f08:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8002f0a:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002f0e:	7023      	strb	r3, [r4, #0]
}
 8002f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f12 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f14:	0004      	movs	r4, r0
 8002f16:	000e      	movs	r6, r1
 8002f18:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f1a:	2520      	movs	r5, #32
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	422b      	tst	r3, r5
 8002f22:	d001      	beq.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002f24:	2000      	movs	r0, #0
}
 8002f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f28:	003a      	movs	r2, r7
 8002f2a:	0031      	movs	r1, r6
 8002f2c:	0020      	movs	r0, r4
 8002f2e:	f7ff ff0f 	bl	8002d50 <I2C_IsErrorOccurred>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d115      	bne.n	8002f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7ff fdd5 	bl	8002ae4 <HAL_GetTick>
 8002f3a:	1bc0      	subs	r0, r0, r7
 8002f3c:	42b0      	cmp	r0, r6
 8002f3e:	d801      	bhi.n	8002f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002f40:	2e00      	cmp	r6, #0
 8002f42:	d1eb      	bne.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	001a      	movs	r2, r3
 8002f4a:	402a      	ands	r2, r5
 8002f4c:	422b      	tst	r3, r5
 8002f4e:	d1e5      	bne.n	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f52:	432b      	orrs	r3, r5
 8002f54:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002f58:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	3341      	adds	r3, #65	; 0x41
 8002f5c:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8002f60:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002f62:	2001      	movs	r0, #1
 8002f64:	e7df      	b.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08002f68 <HAL_I2C_Init>:
{
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002f6c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002f6e:	2c00      	cmp	r4, #0
 8002f70:	d03f      	beq.n	8002ff2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f72:	0025      	movs	r5, r4
 8002f74:	3541      	adds	r5, #65	; 0x41
 8002f76:	782b      	ldrb	r3, [r5, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002f7e:	0023      	movs	r3, r4
 8002f80:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002f82:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002f84:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002f86:	f7ff fc43 	bl	8002810 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002f90:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f92:	481d      	ldr	r0, [pc, #116]	; (8003008 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f96:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002f98:	438a      	bics	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f9c:	6861      	ldr	r1, [r4, #4]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	; (800300c <HAL_I2C_Init+0xa4>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	4002      	ands	r2, r0
 8002fa8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002faa:	68e2      	ldr	r2, [r4, #12]
 8002fac:	2a01      	cmp	r2, #1
 8002fae:	d121      	bne.n	8002ff4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0209      	lsls	r1, r1, #8
 8002fb4:	4331      	orrs	r1, r6
 8002fb6:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4915      	ldr	r1, [pc, #84]	; (8003010 <HAL_I2C_Init+0xa8>)
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc0:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc4:	4002      	ands	r2, r0
 8002fc6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc8:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fca:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fcc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fce:	69a1      	ldr	r1, [r4, #24]
 8002fd0:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fd6:	6a21      	ldr	r1, [r4, #32]
 8002fd8:	69e2      	ldr	r2, [r4, #28]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002fde:	2201      	movs	r2, #1
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fec:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	3442      	adds	r4, #66	; 0x42
 8002ff0:	7020      	strb	r0, [r4, #0]
}
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ff4:	2184      	movs	r1, #132	; 0x84
 8002ff6:	0209      	lsls	r1, r1, #8
 8002ff8:	4331      	orrs	r1, r6
 8002ffa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ffc:	2a02      	cmp	r2, #2
 8002ffe:	d1db      	bne.n	8002fb8 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	e7d7      	b.n	8002fb8 <HAL_I2C_Init+0x50>
 8003008:	ffff7fff 	.word	0xffff7fff
 800300c:	f0ffffff 	.word	0xf0ffffff
 8003010:	02008000 	.word	0x02008000

08003014 <HAL_I2C_Master_Transmit>:
{
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	b087      	sub	sp, #28
 8003018:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800301a:	0003      	movs	r3, r0
 800301c:	3341      	adds	r3, #65	; 0x41
{
 800301e:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003020:	9303      	str	r3, [sp, #12]
 8003022:	781b      	ldrb	r3, [r3, #0]
{
 8003024:	0004      	movs	r4, r0
 8003026:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003028:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	2b20      	cmp	r3, #32
 800302c:	d114      	bne.n	8003058 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 800302e:	0023      	movs	r3, r4
 8003030:	3340      	adds	r3, #64	; 0x40
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	2a01      	cmp	r2, #1
 8003036:	d00f      	beq.n	8003058 <HAL_I2C_Master_Transmit+0x44>
 8003038:	2601      	movs	r6, #1
 800303a:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800303c:	f7ff fd52 	bl	8002ae4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003040:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003042:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003044:	9000      	str	r0, [sp, #0]
 8003046:	2319      	movs	r3, #25
 8003048:	0032      	movs	r2, r6
 800304a:	0020      	movs	r0, r4
 800304c:	0209      	lsls	r1, r1, #8
 800304e:	f7ff ff30 	bl	8002eb2 <I2C_WaitOnFlagUntilTimeout>
 8003052:	2800      	cmp	r0, #0
 8003054:	d002      	beq.n	800305c <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8003056:	2001      	movs	r0, #1
}
 8003058:	b007      	add	sp, #28
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800305c:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800305e:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003060:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003062:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003064:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003066:	3b11      	subs	r3, #17
 8003068:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800306a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800306e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003070:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003072:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003074:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003076:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_I2C_Master_Transmit+0x11c>)
 800307a:	2aff      	cmp	r2, #255	; 0xff
 800307c:	d920      	bls.n	80030c0 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800307e:	22ff      	movs	r2, #255	; 0xff
 8003080:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003088:	0039      	movs	r1, r7
 800308a:	0020      	movs	r0, r4
 800308c:	f7ff fe4a 	bl	8002d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	002a      	movs	r2, r5
 8003094:	0020      	movs	r0, r4
 8003096:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003098:	2b00      	cmp	r3, #0
 800309a:	d119      	bne.n	80030d0 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	f7ff ff39 	bl	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d1d8      	bne.n	8003056 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a4:	2120      	movs	r1, #32
 80030a6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80030a8:	4d22      	ldr	r5, [pc, #136]	; (8003134 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030aa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	402a      	ands	r2, r5
 80030b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80030b4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	3341      	adds	r3, #65	; 0x41
 80030b8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ba:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80030bc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80030be:	e7cb      	b.n	8003058 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80030c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80030c2:	b292      	uxth	r2, r2
 80030c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	049b      	lsls	r3, r3, #18
 80030ce:	e7db      	b.n	8003088 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d0:	f7ff fec2 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d1be      	bne.n	8003056 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80030de:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030e0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80030e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030ee:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030f2:	b292      	uxth	r2, r2
 80030f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ca      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x7c>
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	d1c8      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0020      	movs	r0, r4
 8003102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003104:	9500      	str	r5, [sp, #0]
 8003106:	f7ff fed4 	bl	8002eb2 <I2C_WaitOnFlagUntilTimeout>
 800310a:	2800      	cmp	r0, #0
 800310c:	d1a3      	bne.n	8003056 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003110:	2bff      	cmp	r3, #255	; 0xff
 8003112:	d906      	bls.n	8003122 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003114:	23ff      	movs	r3, #255	; 0xff
 8003116:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	22ff      	movs	r2, #255	; 0xff
 800311c:	9000      	str	r0, [sp, #0]
 800311e:	045b      	lsls	r3, r3, #17
 8003120:	e7b2      	b.n	8003088 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003122:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003124:	b292      	uxth	r2, r2
 8003126:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	9000      	str	r0, [sp, #0]
 800312c:	e7cd      	b.n	80030ca <HAL_I2C_Master_Transmit+0xb6>
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	80002000 	.word	0x80002000
 8003134:	fe00e800 	.word	0xfe00e800

08003138 <HAL_I2C_Mem_Read>:
{
 8003138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	9304      	str	r3, [sp, #16]
 800313e:	ab0e      	add	r3, sp, #56	; 0x38
 8003140:	9203      	str	r2, [sp, #12]
 8003142:	cb04      	ldmia	r3!, {r2}
 8003144:	0004      	movs	r4, r0
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	9205      	str	r2, [sp, #20]
 800314a:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800314c:	0003      	movs	r3, r0
 800314e:	3341      	adds	r3, #65	; 0x41
 8003150:	9307      	str	r3, [sp, #28]
 8003152:	781b      	ldrb	r3, [r3, #0]
{
 8003154:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003156:	2002      	movs	r0, #2
{
 8003158:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800315a:	2b20      	cmp	r3, #32
 800315c:	d108      	bne.n	8003170 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 800315e:	2a00      	cmp	r2, #0
 8003160:	d002      	beq.n	8003168 <HAL_I2C_Mem_Read+0x30>
 8003162:	9b06      	ldr	r3, [sp, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800316e:	2001      	movs	r0, #1
}
 8003170:	b009      	add	sp, #36	; 0x24
 8003172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003174:	0023      	movs	r3, r4
 8003176:	3340      	adds	r3, #64	; 0x40
 8003178:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800317a:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800317c:	2a01      	cmp	r2, #1
 800317e:	d0f7      	beq.n	8003170 <HAL_I2C_Mem_Read+0x38>
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003184:	f7ff fcae 	bl	8002ae4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	2319      	movs	r3, #25
 800318c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800318e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003190:	2201      	movs	r2, #1
 8003192:	0020      	movs	r0, r4
 8003194:	0209      	lsls	r1, r1, #8
 8003196:	f7ff fe8c 	bl	8002eb2 <I2C_WaitOnFlagUntilTimeout>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d1e7      	bne.n	800316e <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800319e:	2222      	movs	r2, #34	; 0x22
 80031a0:	9907      	ldr	r1, [sp, #28]
 80031a2:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a4:	0022      	movs	r2, r4
 80031a6:	3242      	adds	r2, #66	; 0x42
 80031a8:	9207      	str	r2, [sp, #28]
 80031aa:	2240      	movs	r2, #64	; 0x40
 80031ac:	9907      	ldr	r1, [sp, #28]
 80031ae:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 80031b0:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80031b4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80031b6:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031b8:	494d      	ldr	r1, [pc, #308]	; (80032f0 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 80031ba:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031bc:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 80031be:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031c0:	7c12      	ldrb	r2, [r2, #16]
 80031c2:	0020      	movs	r0, r4
 80031c4:	9100      	str	r1, [sp, #0]
 80031c6:	0039      	movs	r1, r7
 80031c8:	f7ff fdac 	bl	8002d24 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031cc:	002a      	movs	r2, r5
 80031ce:	0031      	movs	r1, r6
 80031d0:	0020      	movs	r0, r4
 80031d2:	f7ff fe41 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d127      	bne.n	800322a <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031da:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031dc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031de:	2a01      	cmp	r2, #1
 80031e0:	d117      	bne.n	8003212 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e2:	466a      	mov	r2, sp
 80031e4:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031e6:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031ea:	0020      	movs	r0, r4
 80031ec:	0033      	movs	r3, r6
 80031ee:	2200      	movs	r2, #0
 80031f0:	9500      	str	r5, [sp, #0]
 80031f2:	f7ff fe5e 	bl	8002eb2 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d117      	bne.n	800322a <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031fc:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_I2C_Mem_Read+0x1bc>)
 80031fe:	2aff      	cmp	r2, #255	; 0xff
 8003200:	d817      	bhi.n	8003232 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8003202:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003204:	b292      	uxth	r2, r2
 8003206:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	049b      	lsls	r3, r3, #18
 8003210:	e014      	b.n	800323c <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003212:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003214:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003216:	0a12      	lsrs	r2, r2, #8
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	0020      	movs	r0, r4
 800321c:	002a      	movs	r2, r5
 800321e:	f7ff fe1b 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8003222:	2800      	cmp	r0, #0
 8003224:	d101      	bne.n	800322a <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	e7db      	b.n	80031e2 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	3440      	adds	r4, #64	; 0x40
 800322e:	7023      	strb	r3, [r4, #0]
 8003230:	e79d      	b.n	800316e <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003232:	22ff      	movs	r2, #255	; 0xff
 8003234:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323c:	0039      	movs	r1, r7
 800323e:	0020      	movs	r0, r4
 8003240:	f7ff fd70 	bl	8002d24 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003244:	0033      	movs	r3, r6
 8003246:	2200      	movs	r2, #0
 8003248:	2104      	movs	r1, #4
 800324a:	0020      	movs	r0, r4
 800324c:	9500      	str	r5, [sp, #0]
 800324e:	f7ff fe30 	bl	8002eb2 <I2C_WaitOnFlagUntilTimeout>
 8003252:	2800      	cmp	r0, #0
 8003254:	d000      	beq.n	8003258 <HAL_I2C_Mem_Read+0x120>
 8003256:	e78a      	b.n	800316e <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003260:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003262:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003264:	3301      	adds	r3, #1
 8003266:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003268:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800326a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800326c:	3b01      	subs	r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003274:	b292      	uxth	r2, r2
 8003276:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <HAL_I2C_Mem_Read+0x174>
 800327c:	2a00      	cmp	r2, #0
 800327e:	d115      	bne.n	80032ac <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003280:	0033      	movs	r3, r6
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	0020      	movs	r0, r4
 8003286:	9500      	str	r5, [sp, #0]
 8003288:	f7ff fe13 	bl	8002eb2 <I2C_WaitOnFlagUntilTimeout>
 800328c:	2800      	cmp	r0, #0
 800328e:	d000      	beq.n	8003292 <HAL_I2C_Mem_Read+0x15a>
 8003290:	e76d      	b.n	800316e <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003294:	2bff      	cmp	r3, #255	; 0xff
 8003296:	d923      	bls.n	80032e0 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003298:	23ff      	movs	r3, #255	; 0xff
 800329a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	9000      	str	r0, [sp, #0]
 80032a2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a4:	0039      	movs	r1, r7
 80032a6:	0020      	movs	r0, r4
 80032a8:	f7ff fd3c 	bl	8002d24 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80032ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1c8      	bne.n	8003244 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b2:	002a      	movs	r2, r5
 80032b4:	0031      	movs	r1, r6
 80032b6:	0020      	movs	r0, r4
 80032b8:	f7ff fe2b 	bl	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d000      	beq.n	80032c2 <HAL_I2C_Mem_Read+0x18a>
 80032c0:	e755      	b.n	800316e <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c2:	2120      	movs	r1, #32
 80032c4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80032c6:	4d0c      	ldr	r5, [pc, #48]	; (80032f8 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	402a      	ands	r2, r5
 80032ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	0023      	movs	r3, r4
 80032d2:	3341      	adds	r3, #65	; 0x41
 80032d4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d6:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 80032d8:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032da:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80032dc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80032de:	e747      	b.n	8003170 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e0:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80032e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e4:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80032e6:	b292      	uxth	r2, r2
 80032e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	9000      	str	r0, [sp, #0]
 80032ee:	e7d9      	b.n	80032a4 <HAL_I2C_Mem_Read+0x16c>
 80032f0:	80002000 	.word	0x80002000
 80032f4:	80002400 	.word	0x80002400
 80032f8:	fe00e800 	.word	0xfe00e800

080032fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fe:	0004      	movs	r4, r0
 8003300:	3441      	adds	r4, #65	; 0x41
 8003302:	7822      	ldrb	r2, [r4, #0]
{
 8003304:	0003      	movs	r3, r0
 8003306:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003308:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800330a:	b2d6      	uxtb	r6, r2
 800330c:	2a20      	cmp	r2, #32
 800330e:	d118      	bne.n	8003342 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003310:	001d      	movs	r5, r3
 8003312:	3540      	adds	r5, #64	; 0x40
 8003314:	782a      	ldrb	r2, [r5, #0]
 8003316:	2a01      	cmp	r2, #1
 8003318:	d013      	beq.n	8003342 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3a23      	subs	r2, #35	; 0x23
 8003322:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003324:	4807      	ldr	r0, [pc, #28]	; (8003344 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003326:	4391      	bics	r1, r2
 8003328:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800332e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003330:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	4339      	orrs	r1, r7
 8003336:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003340:	7028      	strb	r0, [r5, #0]
  }
}
 8003342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003344:	ffffefff 	.word	0xffffefff

08003348 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003348:	0002      	movs	r2, r0
{
 800334a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	3241      	adds	r2, #65	; 0x41
 800334e:	7814      	ldrb	r4, [r2, #0]
{
 8003350:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003352:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003354:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003356:	2c20      	cmp	r4, #32
 8003358:	d117      	bne.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800335a:	001c      	movs	r4, r3
 800335c:	3440      	adds	r4, #64	; 0x40
 800335e:	7826      	ldrb	r6, [r4, #0]
 8003360:	2e01      	cmp	r6, #1
 8003362:	d012      	beq.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003364:	3022      	adds	r0, #34	; 0x22
 8003366:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3823      	subs	r0, #35	; 0x23
 800336c:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800336e:	4f07      	ldr	r7, [pc, #28]	; (800338c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003370:	4386      	bics	r6, r0
 8003372:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003374:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003376:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003378:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800337a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800337c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	4308      	orrs	r0, r1
 8003382:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003384:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003386:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003388:	7020      	strb	r0, [r4, #0]
  }
}
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338c:	fffff0ff 	.word	0xfffff0ff

08003390 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003392:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8003394:	2501      	movs	r5, #1
{
 8003396:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8003398:	2800      	cmp	r0, #0
 800339a:	d032      	beq.n	8003402 <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800339c:	4d30      	ldr	r5, [pc, #192]	; (8003460 <HAL_PCD_Init+0xd0>)
 800339e:	5d43      	ldrb	r3, [r0, r5]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033a6:	23aa      	movs	r3, #170	; 0xaa
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033ac:	f7ff fafa 	bl	80029a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033b0:	2303      	movs	r3, #3
 80033b2:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	f001 f96f 	bl	8004698 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ba:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033bc:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033be:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c0:	6860      	ldr	r0, [r4, #4]
 80033c2:	4283      	cmp	r3, r0
 80033c4:	d320      	bcc.n	8003408 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c6:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033c8:	2628      	movs	r6, #40	; 0x28
 80033ca:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033cc:	4290      	cmp	r0, r2
 80033ce:	d833      	bhi.n	8003438 <HAL_PCD_Init+0xa8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033d0:	0023      	movs	r3, r4
 80033d2:	466a      	mov	r2, sp
 80033d4:	3310      	adds	r3, #16
 80033d6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80033d8:	c243      	stmia	r2!, {r0, r1, r6}
 80033da:	cb03      	ldmia	r3!, {r0, r1}
 80033dc:	c203      	stmia	r2!, {r0, r1}
 80033de:	68a2      	ldr	r2, [r4, #8]
 80033e0:	68e3      	ldr	r3, [r4, #12]
 80033e2:	6861      	ldr	r1, [r4, #4]
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	f001 f961 	bl	80046ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	1d62      	adds	r2, r4, #5
 80033ee:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 80033f0:	2201      	movs	r2, #1
 80033f2:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80033f4:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 80033f6:	69e3      	ldr	r3, [r4, #28]
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033fc:	0020      	movs	r0, r4
 80033fe:	f000 f831 	bl	8003464 <HAL_PCDEx_ActivateLPM>
}
 8003402:	0028      	movs	r0, r5
 8003404:	b007      	add	sp, #28
 8003406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8003408:	2629      	movs	r6, #41	; 0x29
 800340a:	2228      	movs	r2, #40	; 0x28
 800340c:	46b4      	mov	ip, r6
 800340e:	435a      	muls	r2, r3
 8003410:	18a2      	adds	r2, r4, r2
 8003412:	4494      	add	ip, r2
 8003414:	4666      	mov	r6, ip
 8003416:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 8003418:	2628      	movs	r6, #40	; 0x28
 800341a:	46b4      	mov	ip, r6
 800341c:	4494      	add	ip, r2
 800341e:	4666      	mov	r6, ip
 8003420:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003422:	262b      	movs	r6, #43	; 0x2b
 8003424:	46b4      	mov	ip, r6
 8003426:	4494      	add	ip, r2
 8003428:	4666      	mov	r6, ip
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342a:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800342c:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342e:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8003430:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003432:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8003434:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003436:	e7c4      	b.n	80033c2 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8003438:	0033      	movs	r3, r6
 800343a:	4353      	muls	r3, r2
 800343c:	18e3      	adds	r3, r4, r3
 800343e:	001f      	movs	r7, r3
 8003440:	376a      	adds	r7, #106	; 0x6a
 8003442:	37ff      	adds	r7, #255	; 0xff
 8003444:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8003446:	3f01      	subs	r7, #1
 8003448:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800344a:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800344c:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 800344e:	3f6c      	subs	r7, #108	; 0x6c
 8003450:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003452:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003454:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003456:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003458:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345a:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 800345c:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345e:	e7b5      	b.n	80033cc <HAL_PCD_Init+0x3c>
 8003460:	000002a9 	.word	0x000002a9

08003464 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8003464:	6803      	ldr	r3, [r0, #0]
{
 8003466:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8003468:	20ba      	movs	r0, #186	; 0xba
 800346a:	2101      	movs	r1, #1
{
 800346c:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 800346e:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8003470:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 8003472:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8003474:	2000      	movs	r0, #0
 8003476:	00a4      	lsls	r4, r4, #2
 8003478:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800347a:	3354      	adds	r3, #84	; 0x54
 800347c:	881a      	ldrh	r2, [r3, #0]
 800347e:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003480:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003482:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003484:	8819      	ldrh	r1, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 800348a:	bd10      	pop	{r4, pc}

0800348c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348e:	0004      	movs	r4, r0
 8003490:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003492:	2800      	cmp	r0, #0
 8003494:	d04e      	beq.n	8003534 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	6803      	ldr	r3, [r0, #0]
 8003498:	07db      	lsls	r3, r3, #31
 800349a:	d433      	bmi.n	8003504 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	079b      	lsls	r3, r3, #30
 80034a0:	d500      	bpl.n	80034a4 <HAL_RCC_OscConfig+0x18>
 80034a2:	e08a      	b.n	80035ba <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	071b      	lsls	r3, r3, #28
 80034a8:	d500      	bpl.n	80034ac <HAL_RCC_OscConfig+0x20>
 80034aa:	e0ca      	b.n	8003642 <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	075b      	lsls	r3, r3, #29
 80034b0:	d500      	bpl.n	80034b4 <HAL_RCC_OscConfig+0x28>
 80034b2:	e0ed      	b.n	8003690 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	06db      	lsls	r3, r3, #27
 80034b8:	d51a      	bpl.n	80034f0 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034ba:	6962      	ldr	r2, [r4, #20]
 80034bc:	2304      	movs	r3, #4
 80034be:	4dbc      	ldr	r5, [pc, #752]	; (80037b0 <HAL_RCC_OscConfig+0x324>)
 80034c0:	2a01      	cmp	r2, #1
 80034c2:	d000      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3a>
 80034c4:	e158      	b.n	8003778 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034c6:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034c8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80034ca:	430b      	orrs	r3, r1
 80034cc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80034ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80034d0:	431a      	orrs	r2, r3
 80034d2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80034d4:	f7ff fb06 	bl	8002ae4 <HAL_GetTick>
 80034d8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80034dc:	423b      	tst	r3, r7
 80034de:	d100      	bne.n	80034e2 <HAL_RCC_OscConfig+0x56>
 80034e0:	e143      	b.n	800376a <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034e2:	21f8      	movs	r1, #248	; 0xf8
 80034e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80034e6:	69a3      	ldr	r3, [r4, #24]
 80034e8:	438a      	bics	r2, r1
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4313      	orrs	r3, r2
 80034ee:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	069b      	lsls	r3, r3, #26
 80034f4:	d500      	bpl.n	80034f8 <HAL_RCC_OscConfig+0x6c>
 80034f6:	e167      	b.n	80037c8 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d000      	beq.n	8003500 <HAL_RCC_OscConfig+0x74>
 80034fe:	e1a6      	b.n	800384e <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }

  return HAL_OK;
 8003500:	2000      	movs	r0, #0
 8003502:	e02f      	b.n	8003564 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003504:	210c      	movs	r1, #12
 8003506:	4daa      	ldr	r5, [pc, #680]	; (80037b0 <HAL_RCC_OscConfig+0x324>)
 8003508:	686a      	ldr	r2, [r5, #4]
 800350a:	400a      	ands	r2, r1
 800350c:	2a04      	cmp	r2, #4
 800350e:	d00b      	beq.n	8003528 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003510:	686b      	ldr	r3, [r5, #4]
 8003512:	400b      	ands	r3, r1
 8003514:	2b08      	cmp	r3, #8
 8003516:	d10f      	bne.n	8003538 <HAL_RCC_OscConfig+0xac>
 8003518:	22c0      	movs	r2, #192	; 0xc0
 800351a:	686b      	ldr	r3, [r5, #4]
 800351c:	0252      	lsls	r2, r2, #9
 800351e:	4013      	ands	r3, r2
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	0252      	lsls	r2, r2, #9
 8003524:	4293      	cmp	r3, r2
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	039b      	lsls	r3, r3, #14
 800352c:	d5b6      	bpl.n	800349c <HAL_RCC_OscConfig+0x10>
 800352e:	6863      	ldr	r3, [r4, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1b3      	bne.n	800349c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8003534:	2001      	movs	r0, #1
 8003536:	e015      	b.n	8003564 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d114      	bne.n	8003568 <HAL_RCC_OscConfig+0xdc>
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	682a      	ldr	r2, [r5, #0]
 8003542:	025b      	lsls	r3, r3, #9
 8003544:	4313      	orrs	r3, r2
 8003546:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003548:	f7ff facc 	bl	8002ae4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800354e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003550:	02bf      	lsls	r7, r7, #10
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	423b      	tst	r3, r7
 8003556:	d1a1      	bne.n	800349c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003558:	f7ff fac4 	bl	8002ae4 <HAL_GetTick>
 800355c:	1b80      	subs	r0, r0, r6
 800355e:	2864      	cmp	r0, #100	; 0x64
 8003560:	d9f7      	bls.n	8003552 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8003562:	2003      	movs	r0, #3
}
 8003564:	b005      	add	sp, #20
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <HAL_RCC_OscConfig+0x10e>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	4a91      	ldr	r2, [pc, #580]	; (80037b4 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003570:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003572:	4013      	ands	r3, r2
 8003574:	602b      	str	r3, [r5, #0]
 8003576:	682b      	ldr	r3, [r5, #0]
 8003578:	4a8f      	ldr	r2, [pc, #572]	; (80037b8 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357c:	4013      	ands	r3, r2
 800357e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003580:	f7ff fab0 	bl	8002ae4 <HAL_GetTick>
 8003584:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	423b      	tst	r3, r7
 800358a:	d100      	bne.n	800358e <HAL_RCC_OscConfig+0x102>
 800358c:	e786      	b.n	800349c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358e:	f7ff faa9 	bl	8002ae4 <HAL_GetTick>
 8003592:	1b80      	subs	r0, r0, r6
 8003594:	2864      	cmp	r0, #100	; 0x64
 8003596:	d9f6      	bls.n	8003586 <HAL_RCC_OscConfig+0xfa>
 8003598:	e7e3      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359a:	2b05      	cmp	r3, #5
 800359c:	d105      	bne.n	80035aa <HAL_RCC_OscConfig+0x11e>
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	682a      	ldr	r2, [r5, #0]
 80035a2:	02db      	lsls	r3, r3, #11
 80035a4:	4313      	orrs	r3, r2
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	e7c9      	b.n	800353e <HAL_RCC_OscConfig+0xb2>
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	4a81      	ldr	r2, [pc, #516]	; (80037b4 <HAL_RCC_OscConfig+0x328>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	682b      	ldr	r3, [r5, #0]
 80035b4:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x32c>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	e7c5      	b.n	8003546 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035ba:	220c      	movs	r2, #12
 80035bc:	4d7c      	ldr	r5, [pc, #496]	; (80037b0 <HAL_RCC_OscConfig+0x324>)
 80035be:	686b      	ldr	r3, [r5, #4]
 80035c0:	4213      	tst	r3, r2
 80035c2:	d00b      	beq.n	80035dc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035c4:	686b      	ldr	r3, [r5, #4]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d115      	bne.n	80035f8 <HAL_RCC_OscConfig+0x16c>
 80035cc:	22c0      	movs	r2, #192	; 0xc0
 80035ce:	686b      	ldr	r3, [r5, #4]
 80035d0:	0252      	lsls	r2, r2, #9
 80035d2:	4013      	ands	r3, r2
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	0212      	lsls	r2, r2, #8
 80035d8:	4293      	cmp	r3, r2
 80035da:	d10d      	bne.n	80035f8 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	079b      	lsls	r3, r3, #30
 80035e0:	d502      	bpl.n	80035e8 <HAL_RCC_OscConfig+0x15c>
 80035e2:	68e3      	ldr	r3, [r4, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d1a5      	bne.n	8003534 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	21f8      	movs	r1, #248	; 0xf8
 80035ea:	682a      	ldr	r2, [r5, #0]
 80035ec:	6923      	ldr	r3, [r4, #16]
 80035ee:	438a      	bics	r2, r1
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4313      	orrs	r3, r2
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	e755      	b.n	80034a4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f8:	68e2      	ldr	r2, [r4, #12]
 80035fa:	2301      	movs	r3, #1
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	d00f      	beq.n	8003620 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8003600:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003604:	4313      	orrs	r3, r2
 8003606:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003608:	f7ff fa6c 	bl	8002ae4 <HAL_GetTick>
 800360c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	682b      	ldr	r3, [r5, #0]
 8003610:	423b      	tst	r3, r7
 8003612:	d1e9      	bne.n	80035e8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003614:	f7ff fa66 	bl	8002ae4 <HAL_GetTick>
 8003618:	1b80      	subs	r0, r0, r6
 800361a:	2802      	cmp	r0, #2
 800361c:	d9f7      	bls.n	800360e <HAL_RCC_OscConfig+0x182>
 800361e:	e7a0      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8003620:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003624:	439a      	bics	r2, r3
 8003626:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003628:	f7ff fa5c 	bl	8002ae4 <HAL_GetTick>
 800362c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	423b      	tst	r3, r7
 8003632:	d100      	bne.n	8003636 <HAL_RCC_OscConfig+0x1aa>
 8003634:	e736      	b.n	80034a4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003636:	f7ff fa55 	bl	8002ae4 <HAL_GetTick>
 800363a:	1b80      	subs	r0, r0, r6
 800363c:	2802      	cmp	r0, #2
 800363e:	d9f6      	bls.n	800362e <HAL_RCC_OscConfig+0x1a2>
 8003640:	e78f      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003642:	69e2      	ldr	r2, [r4, #28]
 8003644:	2301      	movs	r3, #1
 8003646:	4d5a      	ldr	r5, [pc, #360]	; (80037b0 <HAL_RCC_OscConfig+0x324>)
 8003648:	2a00      	cmp	r2, #0
 800364a:	d010      	beq.n	800366e <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800364c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003650:	4313      	orrs	r3, r2
 8003652:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003654:	f7ff fa46 	bl	8002ae4 <HAL_GetTick>
 8003658:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800365c:	423b      	tst	r3, r7
 800365e:	d000      	beq.n	8003662 <HAL_RCC_OscConfig+0x1d6>
 8003660:	e724      	b.n	80034ac <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003662:	f7ff fa3f 	bl	8002ae4 <HAL_GetTick>
 8003666:	1b80      	subs	r0, r0, r6
 8003668:	2802      	cmp	r0, #2
 800366a:	d9f6      	bls.n	800365a <HAL_RCC_OscConfig+0x1ce>
 800366c:	e779      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 800366e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003672:	439a      	bics	r2, r3
 8003674:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003676:	f7ff fa35 	bl	8002ae4 <HAL_GetTick>
 800367a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800367e:	423b      	tst	r3, r7
 8003680:	d100      	bne.n	8003684 <HAL_RCC_OscConfig+0x1f8>
 8003682:	e713      	b.n	80034ac <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003684:	f7ff fa2e 	bl	8002ae4 <HAL_GetTick>
 8003688:	1b80      	subs	r0, r0, r6
 800368a:	2802      	cmp	r0, #2
 800368c:	d9f6      	bls.n	800367c <HAL_RCC_OscConfig+0x1f0>
 800368e:	e768      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003690:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003694:	4d46      	ldr	r5, [pc, #280]	; (80037b0 <HAL_RCC_OscConfig+0x324>)
 8003696:	0552      	lsls	r2, r2, #21
 8003698:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800369a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369c:	4213      	tst	r3, r2
 800369e:	d108      	bne.n	80036b2 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a0:	69eb      	ldr	r3, [r5, #28]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61eb      	str	r3, [r5, #28]
 80036a6:	69eb      	ldr	r3, [r5, #28]
 80036a8:	4013      	ands	r3, r2
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	2780      	movs	r7, #128	; 0x80
 80036b4:	4e41      	ldr	r6, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x330>)
 80036b6:	007f      	lsls	r7, r7, #1
 80036b8:	6833      	ldr	r3, [r6, #0]
 80036ba:	423b      	tst	r3, r7
 80036bc:	d006      	beq.n	80036cc <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036be:	68a3      	ldr	r3, [r4, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d113      	bne.n	80036ec <HAL_RCC_OscConfig+0x260>
 80036c4:	6a2a      	ldr	r2, [r5, #32]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	622b      	str	r3, [r5, #32]
 80036ca:	e030      	b.n	800372e <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036cc:	6833      	ldr	r3, [r6, #0]
 80036ce:	433b      	orrs	r3, r7
 80036d0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80036d2:	f7ff fa07 	bl	8002ae4 <HAL_GetTick>
 80036d6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	423b      	tst	r3, r7
 80036dc:	d1ef      	bne.n	80036be <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7ff fa01 	bl	8002ae4 <HAL_GetTick>
 80036e2:	9b01      	ldr	r3, [sp, #4]
 80036e4:	1ac0      	subs	r0, r0, r3
 80036e6:	2864      	cmp	r0, #100	; 0x64
 80036e8:	d9f6      	bls.n	80036d8 <HAL_RCC_OscConfig+0x24c>
 80036ea:	e73a      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	2201      	movs	r2, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d114      	bne.n	800371c <HAL_RCC_OscConfig+0x290>
 80036f2:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f6:	4393      	bics	r3, r2
 80036f8:	622b      	str	r3, [r5, #32]
 80036fa:	6a2b      	ldr	r3, [r5, #32]
 80036fc:	3203      	adds	r2, #3
 80036fe:	4393      	bics	r3, r2
 8003700:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003702:	f7ff f9ef 	bl	8002ae4 <HAL_GetTick>
 8003706:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003708:	6a2b      	ldr	r3, [r5, #32]
 800370a:	423b      	tst	r3, r7
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7ff f9e9 	bl	8002ae4 <HAL_GetTick>
 8003712:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_OscConfig+0x334>)
 8003714:	1b80      	subs	r0, r0, r6
 8003716:	4298      	cmp	r0, r3
 8003718:	d9f6      	bls.n	8003708 <HAL_RCC_OscConfig+0x27c>
 800371a:	e722      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371c:	2b05      	cmp	r3, #5
 800371e:	d116      	bne.n	800374e <HAL_RCC_OscConfig+0x2c2>
 8003720:	6a29      	ldr	r1, [r5, #32]
 8003722:	3b01      	subs	r3, #1
 8003724:	430b      	orrs	r3, r1
 8003726:	622b      	str	r3, [r5, #32]
 8003728:	6a2b      	ldr	r3, [r5, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800372e:	f7ff f9d9 	bl	8002ae4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003734:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	6a2b      	ldr	r3, [r5, #32]
 8003738:	423b      	tst	r3, r7
 800373a:	d00f      	beq.n	800375c <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 800373c:	9b00      	ldr	r3, [sp, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d000      	beq.n	8003744 <HAL_RCC_OscConfig+0x2b8>
 8003742:	e6b7      	b.n	80034b4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003744:	69eb      	ldr	r3, [r5, #28]
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_RCC_OscConfig+0x338>)
 8003748:	4013      	ands	r3, r2
 800374a:	61eb      	str	r3, [r5, #28]
 800374c:	e6b2      	b.n	80034b4 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374e:	6a2b      	ldr	r3, [r5, #32]
 8003750:	4393      	bics	r3, r2
 8003752:	2204      	movs	r2, #4
 8003754:	622b      	str	r3, [r5, #32]
 8003756:	6a2b      	ldr	r3, [r5, #32]
 8003758:	4393      	bics	r3, r2
 800375a:	e7b5      	b.n	80036c8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7ff f9c2 	bl	8002ae4 <HAL_GetTick>
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_RCC_OscConfig+0x334>)
 8003762:	1b80      	subs	r0, r0, r6
 8003764:	4298      	cmp	r0, r3
 8003766:	d9e6      	bls.n	8003736 <HAL_RCC_OscConfig+0x2aa>
 8003768:	e6fb      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800376a:	f7ff f9bb 	bl	8002ae4 <HAL_GetTick>
 800376e:	1b80      	subs	r0, r0, r6
 8003770:	2802      	cmp	r0, #2
 8003772:	d800      	bhi.n	8003776 <HAL_RCC_OscConfig+0x2ea>
 8003774:	e6b1      	b.n	80034da <HAL_RCC_OscConfig+0x4e>
 8003776:	e6f4      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003778:	3205      	adds	r2, #5
 800377a:	d103      	bne.n	8003784 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 800377c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800377e:	439a      	bics	r2, r3
 8003780:	636a      	str	r2, [r5, #52]	; 0x34
 8003782:	e6ae      	b.n	80034e2 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003784:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003786:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003788:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800378a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800378c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800378e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003790:	4393      	bics	r3, r2
 8003792:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003794:	f7ff f9a6 	bl	8002ae4 <HAL_GetTick>
 8003798:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800379a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800379c:	423b      	tst	r3, r7
 800379e:	d100      	bne.n	80037a2 <HAL_RCC_OscConfig+0x316>
 80037a0:	e6a6      	b.n	80034f0 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037a2:	f7ff f99f 	bl	8002ae4 <HAL_GetTick>
 80037a6:	1b80      	subs	r0, r0, r6
 80037a8:	2802      	cmp	r0, #2
 80037aa:	d9f6      	bls.n	800379a <HAL_RCC_OscConfig+0x30e>
 80037ac:	e6d9      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	40021000 	.word	0x40021000
 80037b4:	fffeffff 	.word	0xfffeffff
 80037b8:	fffbffff 	.word	0xfffbffff
 80037bc:	40007000 	.word	0x40007000
 80037c0:	00001388 	.word	0x00001388
 80037c4:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80037c8:	210c      	movs	r1, #12
 80037ca:	4d55      	ldr	r5, [pc, #340]	; (8003920 <HAL_RCC_OscConfig+0x494>)
 80037cc:	686a      	ldr	r2, [r5, #4]
 80037ce:	400a      	ands	r2, r1
 80037d0:	428a      	cmp	r2, r1
 80037d2:	d009      	beq.n	80037e8 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80037d4:	686b      	ldr	r3, [r5, #4]
 80037d6:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d10e      	bne.n	80037fa <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80037dc:	22c0      	movs	r2, #192	; 0xc0
 80037de:	686b      	ldr	r3, [r5, #4]
 80037e0:	0252      	lsls	r2, r2, #9
 80037e2:	4013      	ands	r3, r2
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80037e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80037ea:	039b      	lsls	r3, r3, #14
 80037ec:	d400      	bmi.n	80037f0 <HAL_RCC_OscConfig+0x364>
 80037ee:	e683      	b.n	80034f8 <HAL_RCC_OscConfig+0x6c>
 80037f0:	6a23      	ldr	r3, [r4, #32]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d000      	beq.n	80037f8 <HAL_RCC_OscConfig+0x36c>
 80037f6:	e69d      	b.n	8003534 <HAL_RCC_OscConfig+0xa8>
 80037f8:	e67e      	b.n	80034f8 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037fa:	6a23      	ldr	r3, [r4, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003804:	025b      	lsls	r3, r3, #9
 8003806:	4313      	orrs	r3, r2
 8003808:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800380a:	f7ff f96b 	bl	8002ae4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800380e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003810:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003812:	02bf      	lsls	r7, r7, #10
 8003814:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003816:	423b      	tst	r3, r7
 8003818:	d000      	beq.n	800381c <HAL_RCC_OscConfig+0x390>
 800381a:	e66d      	b.n	80034f8 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800381c:	f7ff f962 	bl	8002ae4 <HAL_GetTick>
 8003820:	1b80      	subs	r0, r0, r6
 8003822:	2802      	cmp	r0, #2
 8003824:	d9f6      	bls.n	8003814 <HAL_RCC_OscConfig+0x388>
 8003826:	e69c      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 8003828:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800382a:	4a3e      	ldr	r2, [pc, #248]	; (8003924 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800382c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 800382e:	4013      	ands	r3, r2
 8003830:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8003832:	f7ff f957 	bl	8002ae4 <HAL_GetTick>
 8003836:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003838:	02bf      	lsls	r7, r7, #10
 800383a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800383c:	423b      	tst	r3, r7
 800383e:	d100      	bne.n	8003842 <HAL_RCC_OscConfig+0x3b6>
 8003840:	e65a      	b.n	80034f8 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003842:	f7ff f94f 	bl	8002ae4 <HAL_GetTick>
 8003846:	1b80      	subs	r0, r0, r6
 8003848:	2802      	cmp	r0, #2
 800384a:	d9f6      	bls.n	800383a <HAL_RCC_OscConfig+0x3ae>
 800384c:	e689      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800384e:	210c      	movs	r1, #12
 8003850:	4d33      	ldr	r5, [pc, #204]	; (8003920 <HAL_RCC_OscConfig+0x494>)
 8003852:	686a      	ldr	r2, [r5, #4]
 8003854:	400a      	ands	r2, r1
 8003856:	2a08      	cmp	r2, #8
 8003858:	d047      	beq.n	80038ea <HAL_RCC_OscConfig+0x45e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385a:	4a33      	ldr	r2, [pc, #204]	; (8003928 <HAL_RCC_OscConfig+0x49c>)
 800385c:	2b02      	cmp	r3, #2
 800385e:	d132      	bne.n	80038c6 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8003860:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003862:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003864:	4013      	ands	r3, r2
 8003866:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003868:	f7ff f93c 	bl	8002ae4 <HAL_GetTick>
 800386c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386e:	04bf      	lsls	r7, r7, #18
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	423b      	tst	r3, r7
 8003874:	d121      	bne.n	80038ba <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003876:	220f      	movs	r2, #15
 8003878:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800387a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387c:	4393      	bics	r3, r2
 800387e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003880:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003882:	4313      	orrs	r3, r2
 8003884:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003886:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003888:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800388a:	686a      	ldr	r2, [r5, #4]
 800388c:	430b      	orrs	r3, r1
 800388e:	4927      	ldr	r1, [pc, #156]	; (800392c <HAL_RCC_OscConfig+0x4a0>)
 8003890:	400a      	ands	r2, r1
 8003892:	4313      	orrs	r3, r2
 8003894:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	682a      	ldr	r2, [r5, #0]
 800389a:	045b      	lsls	r3, r3, #17
 800389c:	4313      	orrs	r3, r2
 800389e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038a0:	f7ff f920 	bl	8002ae4 <HAL_GetTick>
 80038a4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a6:	682b      	ldr	r3, [r5, #0]
 80038a8:	4233      	tst	r3, r6
 80038aa:	d000      	beq.n	80038ae <HAL_RCC_OscConfig+0x422>
 80038ac:	e628      	b.n	8003500 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7ff f919 	bl	8002ae4 <HAL_GetTick>
 80038b2:	1b00      	subs	r0, r0, r4
 80038b4:	2802      	cmp	r0, #2
 80038b6:	d9f6      	bls.n	80038a6 <HAL_RCC_OscConfig+0x41a>
 80038b8:	e653      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ba:	f7ff f913 	bl	8002ae4 <HAL_GetTick>
 80038be:	1b80      	subs	r0, r0, r6
 80038c0:	2802      	cmp	r0, #2
 80038c2:	d9d5      	bls.n	8003870 <HAL_RCC_OscConfig+0x3e4>
 80038c4:	e64d      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 80038c6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4013      	ands	r3, r2
 80038cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038ce:	f7ff f909 	bl	8002ae4 <HAL_GetTick>
 80038d2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d4:	04b6      	lsls	r6, r6, #18
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	4233      	tst	r3, r6
 80038da:	d100      	bne.n	80038de <HAL_RCC_OscConfig+0x452>
 80038dc:	e610      	b.n	8003500 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038de:	f7ff f901 	bl	8002ae4 <HAL_GetTick>
 80038e2:	1b00      	subs	r0, r0, r4
 80038e4:	2802      	cmp	r0, #2
 80038e6:	d9f6      	bls.n	80038d6 <HAL_RCC_OscConfig+0x44a>
 80038e8:	e63b      	b.n	8003562 <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d100      	bne.n	80038f0 <HAL_RCC_OscConfig+0x464>
 80038ee:	e621      	b.n	8003534 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f0:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 80038f2:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038f6:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80038f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	4019      	ands	r1, r3
 80038fc:	4281      	cmp	r1, r0
 80038fe:	d000      	beq.n	8003902 <HAL_RCC_OscConfig+0x476>
 8003900:	e618      	b.n	8003534 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003902:	210f      	movs	r1, #15
 8003904:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003908:	428a      	cmp	r2, r1
 800390a:	d000      	beq.n	800390e <HAL_RCC_OscConfig+0x482>
 800390c:	e612      	b.n	8003534 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800390e:	22f0      	movs	r2, #240	; 0xf0
 8003910:	0392      	lsls	r2, r2, #14
 8003912:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003914:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003916:	4293      	cmp	r3, r2
 8003918:	d100      	bne.n	800391c <HAL_RCC_OscConfig+0x490>
 800391a:	e5f1      	b.n	8003500 <HAL_RCC_OscConfig+0x74>
 800391c:	e60a      	b.n	8003534 <HAL_RCC_OscConfig+0xa8>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	40021000 	.word	0x40021000
 8003924:	fffeffff 	.word	0xfffeffff
 8003928:	feffffff 	.word	0xfeffffff
 800392c:	ffc27fff 	.word	0xffc27fff

08003930 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003930:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8003934:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8003936:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003938:	4018      	ands	r0, r3
 800393a:	2808      	cmp	r0, #8
 800393c:	d008      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x20>
 800393e:	380c      	subs	r0, #12
 8003940:	1e43      	subs	r3, r0, #1
 8003942:	4198      	sbcs	r0, r3
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_GetSysClockFreq+0x58>)
 8003946:	4240      	negs	r0, r0
 8003948:	4018      	ands	r0, r3
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCC_GetSysClockFreq+0x5c>)
 800394c:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800394e:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003950:	200f      	movs	r0, #15
 8003952:	0c99      	lsrs	r1, r3, #18
 8003954:	4c0e      	ldr	r4, [pc, #56]	; (8003990 <HAL_RCC_GetSysClockFreq+0x60>)
 8003956:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003958:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800395a:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800395c:	490d      	ldr	r1, [pc, #52]	; (8003994 <HAL_RCC_GetSysClockFreq+0x64>)
 800395e:	4002      	ands	r2, r0
 8003960:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003962:	22c0      	movs	r2, #192	; 0xc0
 8003964:	2080      	movs	r0, #128	; 0x80
 8003966:	0252      	lsls	r2, r2, #9
 8003968:	4013      	ands	r3, r2
 800396a:	0240      	lsls	r0, r0, #9
 800396c:	4283      	cmp	r3, r0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003970:	4809      	ldr	r0, [pc, #36]	; (8003998 <HAL_RCC_GetSysClockFreq+0x68>)
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003974:	4293      	cmp	r3, r2
 8003976:	d1fb      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003978:	4804      	ldr	r0, [pc, #16]	; (800398c <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800397a:	f7fc fbcf 	bl	800011c <__udivsi3>
 800397e:	4360      	muls	r0, r4
 8003980:	e7e5      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x1e>
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	40021000 	.word	0x40021000
 8003988:	fd9da600 	.word	0xfd9da600
 800398c:	02dc6c00 	.word	0x02dc6c00
 8003990:	08004860 	.word	0x08004860
 8003994:	08004870 	.word	0x08004870
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_RCC_ClockConfig>:
{
 800399c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800399e:	0004      	movs	r4, r0
 80039a0:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
}
 80039a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039aa:	2201      	movs	r2, #1
 80039ac:	4d3a      	ldr	r5, [pc, #232]	; (8003a98 <HAL_RCC_ClockConfig+0xfc>)
 80039ae:	682b      	ldr	r3, [r5, #0]
 80039b0:	4013      	ands	r3, r2
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d31c      	bcc.n	80039f0 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b6:	6821      	ldr	r1, [r4, #0]
 80039b8:	078b      	lsls	r3, r1, #30
 80039ba:	d422      	bmi.n	8003a02 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039bc:	07cb      	lsls	r3, r1, #31
 80039be:	d42f      	bmi.n	8003a20 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c0:	2301      	movs	r3, #1
 80039c2:	682a      	ldr	r2, [r5, #0]
 80039c4:	401a      	ands	r2, r3
 80039c6:	42ba      	cmp	r2, r7
 80039c8:	d857      	bhi.n	8003a7a <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	4d33      	ldr	r5, [pc, #204]	; (8003a9c <HAL_RCC_ClockConfig+0x100>)
 80039ce:	075b      	lsls	r3, r3, #29
 80039d0:	d45a      	bmi.n	8003a88 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039d2:	f7ff ffad 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80039d6:	686b      	ldr	r3, [r5, #4]
 80039d8:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <HAL_RCC_ClockConfig+0x104>)
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	0f1b      	lsrs	r3, r3, #28
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	40d8      	lsrs	r0, r3
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <HAL_RCC_ClockConfig+0x108>)
 80039e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80039e6:	2003      	movs	r0, #3
 80039e8:	f7ff f83c 	bl	8002a64 <HAL_InitTick>
  return HAL_OK;
 80039ec:	2000      	movs	r0, #0
 80039ee:	e7db      	b.n	80039a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	4393      	bics	r3, r2
 80039f4:	430b      	orrs	r3, r1
 80039f6:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	4013      	ands	r3, r2
 80039fc:	428b      	cmp	r3, r1
 80039fe:	d1d2      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xa>
 8003a00:	e7d9      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a02:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_RCC_ClockConfig+0x100>)
 8003a04:	074b      	lsls	r3, r1, #29
 8003a06:	d504      	bpl.n	8003a12 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a08:	23e0      	movs	r3, #224	; 0xe0
 8003a0a:	6850      	ldr	r0, [r2, #4]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4303      	orrs	r3, r0
 8003a10:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a12:	20f0      	movs	r0, #240	; 0xf0
 8003a14:	6853      	ldr	r3, [r2, #4]
 8003a16:	4383      	bics	r3, r0
 8003a18:	68a0      	ldr	r0, [r4, #8]
 8003a1a:	4303      	orrs	r3, r0
 8003a1c:	6053      	str	r3, [r2, #4]
 8003a1e:	e7cd      	b.n	80039bc <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a20:	6862      	ldr	r2, [r4, #4]
 8003a22:	4e1e      	ldr	r6, [pc, #120]	; (8003a9c <HAL_RCC_ClockConfig+0x100>)
 8003a24:	2a01      	cmp	r2, #1
 8003a26:	d103      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a28:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a2a:	039b      	lsls	r3, r3, #14
 8003a2c:	d405      	bmi.n	8003a3a <HAL_RCC_ClockConfig+0x9e>
 8003a2e:	e7ba      	b.n	80039a6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a30:	2a02      	cmp	r2, #2
 8003a32:	d11a      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a34:	6833      	ldr	r3, [r6, #0]
 8003a36:	019b      	lsls	r3, r3, #6
 8003a38:	d5b5      	bpl.n	80039a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	2103      	movs	r1, #3
 8003a3c:	6873      	ldr	r3, [r6, #4]
 8003a3e:	438b      	bics	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003a44:	f7ff f84e 	bl	8002ae4 <HAL_GetTick>
 8003a48:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	6872      	ldr	r2, [r6, #4]
 8003a4e:	401a      	ands	r2, r3
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d0b3      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7ff f844 	bl	8002ae4 <HAL_GetTick>
 8003a5c:	9b01      	ldr	r3, [sp, #4]
 8003a5e:	1ac0      	subs	r0, r0, r3
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_RCC_ClockConfig+0x10c>)
 8003a62:	4298      	cmp	r0, r3
 8003a64:	d9f1      	bls.n	8003a4a <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8003a66:	2003      	movs	r0, #3
 8003a68:	e79e      	b.n	80039a8 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003a6a:	2a03      	cmp	r2, #3
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a6e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003a70:	e7db      	b.n	8003a2a <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	6833      	ldr	r3, [r6, #0]
 8003a74:	079b      	lsls	r3, r3, #30
 8003a76:	d4e0      	bmi.n	8003a3a <HAL_RCC_ClockConfig+0x9e>
 8003a78:	e795      	b.n	80039a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	682a      	ldr	r2, [r5, #0]
 8003a7c:	439a      	bics	r2, r3
 8003a7e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a80:	682a      	ldr	r2, [r5, #0]
 8003a82:	421a      	tst	r2, r3
 8003a84:	d0a1      	beq.n	80039ca <HAL_RCC_ClockConfig+0x2e>
 8003a86:	e78e      	b.n	80039a6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	686b      	ldr	r3, [r5, #4]
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <HAL_RCC_ClockConfig+0x110>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	68e2      	ldr	r2, [r4, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	606b      	str	r3, [r5, #4]
 8003a94:	e79d      	b.n	80039d2 <HAL_RCC_ClockConfig+0x36>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	40022000 	.word	0x40022000
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08004848 	.word	0x08004848
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	00001388 	.word	0x00001388
 8003aac:	fffff8ff 	.word	0xfffff8ff

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003ab2:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	055b      	lsls	r3, r3, #21
 8003ab8:	0f5b      	lsrs	r3, r3, #29
 8003aba:	5cd3      	ldrb	r3, [r2, r3]
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003abe:	6810      	ldr	r0, [r2, #0]
 8003ac0:	40d8      	lsrs	r0, r3
}    
 8003ac2:	4770      	bx	lr
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	08004858 	.word	0x08004858
 8003acc:	20000000 	.word	0x20000000

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad2:	6803      	ldr	r3, [r0, #0]
{
 8003ad4:	0005      	movs	r5, r0
 8003ad6:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad8:	03db      	lsls	r3, r3, #15
 8003ada:	d52a      	bpl.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003adc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae0:	4c41      	ldr	r4, [pc, #260]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003ae2:	0552      	lsls	r2, r2, #21
 8003ae4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae8:	4213      	tst	r3, r2
 8003aea:	d108      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	69e3      	ldr	r3, [r4, #28]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61e3      	str	r3, [r4, #28]
 8003af2:	69e3      	ldr	r3, [r4, #28]
 8003af4:	4013      	ands	r3, r2
 8003af6:	9303      	str	r3, [sp, #12]
 8003af8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	2780      	movs	r7, #128	; 0x80
 8003b00:	4e3a      	ldr	r6, [pc, #232]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003b02:	007f      	lsls	r7, r7, #1
 8003b04:	6833      	ldr	r3, [r6, #0]
 8003b06:	423b      	tst	r3, r7
 8003b08:	d03a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0a:	6a22      	ldr	r2, [r4, #32]
 8003b0c:	23c0      	movs	r3, #192	; 0xc0
 8003b0e:	0011      	movs	r1, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4e37      	ldr	r6, [pc, #220]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8003b14:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b16:	421a      	tst	r2, r3
 8003b18:	d144      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b1a:	6a23      	ldr	r3, [r4, #32]
 8003b1c:	401e      	ands	r6, r3
 8003b1e:	686b      	ldr	r3, [r5, #4]
 8003b20:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b22:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b24:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d103      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	69e3      	ldr	r3, [r4, #28]
 8003b2c:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b32:	682a      	ldr	r2, [r5, #0]
 8003b34:	07d3      	lsls	r3, r2, #31
 8003b36:	d506      	bpl.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b38:	2003      	movs	r0, #3
 8003b3a:	492b      	ldr	r1, [pc, #172]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003b3c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003b3e:	4383      	bics	r3, r0
 8003b40:	68a8      	ldr	r0, [r5, #8]
 8003b42:	4303      	orrs	r3, r0
 8003b44:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b46:	0693      	lsls	r3, r2, #26
 8003b48:	d506      	bpl.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4a:	2010      	movs	r0, #16
 8003b4c:	4926      	ldr	r1, [pc, #152]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003b4e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003b50:	4383      	bics	r3, r0
 8003b52:	68e8      	ldr	r0, [r5, #12]
 8003b54:	4303      	orrs	r3, r0
 8003b56:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b58:	0393      	lsls	r3, r2, #14
 8003b5a:	d506      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b5c:	2080      	movs	r0, #128	; 0x80
 8003b5e:	4922      	ldr	r1, [pc, #136]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003b60:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003b62:	4383      	bics	r3, r0
 8003b64:	6968      	ldr	r0, [r5, #20]
 8003b66:	4303      	orrs	r3, r0
 8003b68:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003b6a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b6c:	0553      	lsls	r3, r2, #21
 8003b6e:	d517      	bpl.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003b74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b76:	438b      	bics	r3, r1
 8003b78:	6929      	ldr	r1, [r5, #16]
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	e00f      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b80:	6833      	ldr	r3, [r6, #0]
 8003b82:	433b      	orrs	r3, r7
 8003b84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b86:	f7fe ffad 	bl	8002ae4 <HAL_GetTick>
 8003b8a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	6833      	ldr	r3, [r6, #0]
 8003b8e:	423b      	tst	r3, r7
 8003b90:	d1bb      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fe ffa7 	bl	8002ae4 <HAL_GetTick>
 8003b96:	9b01      	ldr	r3, [sp, #4]
 8003b98:	1ac0      	subs	r0, r0, r3
 8003b9a:	2864      	cmp	r0, #100	; 0x64
 8003b9c:	d9f6      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8003b9e:	2003      	movs	r0, #3
}
 8003ba0:	b005      	add	sp, #20
 8003ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba4:	686a      	ldr	r2, [r5, #4]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	428b      	cmp	r3, r1
 8003baa:	d0b6      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bac:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bae:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb0:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb2:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb4:	025b      	lsls	r3, r3, #9
 8003bb6:	4303      	orrs	r3, r0
 8003bb8:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bba:	6a23      	ldr	r3, [r4, #32]
 8003bbc:	480e      	ldr	r0, [pc, #56]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbe:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc0:	4003      	ands	r3, r0
 8003bc2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003bc4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bc6:	07d3      	lsls	r3, r2, #31
 8003bc8:	d5a7      	bpl.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8003bca:	f7fe ff8b 	bl	8002ae4 <HAL_GetTick>
 8003bce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	6a23      	ldr	r3, [r4, #32]
 8003bd4:	4213      	tst	r3, r2
 8003bd6:	d1a0      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fe ff84 	bl	8002ae4 <HAL_GetTick>
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003bde:	1bc0      	subs	r0, r0, r7
 8003be0:	4298      	cmp	r0, r3
 8003be2:	d9f5      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003be4:	e7db      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	fffffcff 	.word	0xfffffcff
 8003bf4:	efffffff 	.word	0xefffffff
 8003bf8:	fffeffff 	.word	0xfffeffff
 8003bfc:	00001388 	.word	0x00001388

08003c00 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c02:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c04:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003c06:	b085      	sub	sp, #20
 8003c08:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8003c0a:	ab02      	add	r3, sp, #8
 8003c0c:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003c0e:	0004      	movs	r4, r0
 8003c10:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c12:	f7fe ff67 	bl	8002ae4 <HAL_GetTick>
 8003c16:	19ed      	adds	r5, r5, r7
 8003c18:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003c1a:	f7fe ff63 	bl	8002ae4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c1e:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c20:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8003c22:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c24:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c26:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4353      	muls	r3, r2
 8003c2c:	0d1b      	lsrs	r3, r3, #20
 8003c2e:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8003c30:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c32:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8003c34:	ab02      	add	r3, sp, #8
 8003c36:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8003c38:	688b      	ldr	r3, [r1, #8]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	4030      	ands	r0, r6
 8003c3e:	4233      	tst	r3, r6
 8003c40:	d03b      	beq.n	8003cba <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c42:	23c0      	movs	r3, #192	; 0xc0
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	429e      	cmp	r6, r3
 8003c48:	d104      	bne.n	8003c54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8003c4a:	9b01      	ldr	r3, [sp, #4]
 8003c4c:	7b1b      	ldrb	r3, [r3, #12]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 8003c52:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	1c7b      	adds	r3, r7, #1
 8003c56:	d0ef      	beq.n	8003c38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c58:	f7fe ff44 	bl	8002ae4 <HAL_GetTick>
 8003c5c:	9b00      	ldr	r3, [sp, #0]
 8003c5e:	1ac0      	subs	r0, r0, r3
 8003c60:	42a8      	cmp	r0, r5
 8003c62:	d32c      	bcc.n	8003cbe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c64:	21e0      	movs	r1, #224	; 0xe0
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	438a      	bics	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6e:	2282      	movs	r2, #130	; 0x82
 8003c70:	6861      	ldr	r1, [r4, #4]
 8003c72:	0052      	lsls	r2, r2, #1
 8003c74:	4291      	cmp	r1, r2
 8003c76:	d10c      	bne.n	8003c92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	68a2      	ldr	r2, [r4, #8]
 8003c7c:	0209      	lsls	r1, r1, #8
 8003c7e:	428a      	cmp	r2, r1
 8003c80:	d003      	beq.n	8003c8a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	00c9      	lsls	r1, r1, #3
 8003c86:	428a      	cmp	r2, r1
 8003c88:	d103      	bne.n	8003c92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 8003c8a:	2140      	movs	r1, #64	; 0x40
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	438a      	bics	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c92:	2180      	movs	r1, #128	; 0x80
 8003c94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c96:	0189      	lsls	r1, r1, #6
 8003c98:	428a      	cmp	r2, r1
 8003c9a:	d106      	bne.n	8003caa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8003ca0:	4001      	ands	r1, r0
 8003ca2:	6019      	str	r1, [r3, #0]
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003caa:	0023      	movs	r3, r4
 8003cac:	2201      	movs	r2, #1
 8003cae:	335d      	adds	r3, #93	; 0x5d
 8003cb0:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8003cb2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003cb4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003cb6:	345c      	adds	r4, #92	; 0x5c
 8003cb8:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 8003cba:	b005      	add	sp, #20
 8003cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8003cbe:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	4193      	sbcs	r3, r2
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	401d      	ands	r5, r3
      count--;
 8003cc8:	9b03      	ldr	r3, [sp, #12]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	e7b0      	b.n	8003c30 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	ffffdfff 	.word	0xffffdfff

08003cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cda:	000e      	movs	r6, r1
 8003cdc:	b085      	sub	sp, #20
 8003cde:	0015      	movs	r5, r2
 8003ce0:	0004      	movs	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ce2:	f7fe feff 	bl	8002ae4 <HAL_GetTick>
 8003ce6:	19ad      	adds	r5, r5, r6
 8003ce8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003cea:	f7fe fefb 	bl	8002ae4 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cee:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8003cf2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	015b      	lsls	r3, r3, #5
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	436b      	muls	r3, r5
 8003cfc:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cfe:	6822      	ldr	r2, [r4, #0]
 8003d00:	6893      	ldr	r3, [r2, #8]
 8003d02:	0018      	movs	r0, r3
 8003d04:	4038      	ands	r0, r7
 8003d06:	423b      	tst	r3, r7
 8003d08:	d032      	beq.n	8003d70 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	1c73      	adds	r3, r6, #1
 8003d0c:	d0f8      	beq.n	8003d00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0e:	f7fe fee9 	bl	8002ae4 <HAL_GetTick>
 8003d12:	9b01      	ldr	r3, [sp, #4]
 8003d14:	1ac0      	subs	r0, r0, r3
 8003d16:	42a8      	cmp	r0, r5
 8003d18:	d32c      	bcc.n	8003d74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d1a:	21e0      	movs	r1, #224	; 0xe0
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	438a      	bics	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d24:	2282      	movs	r2, #130	; 0x82
 8003d26:	6861      	ldr	r1, [r4, #4]
 8003d28:	0052      	lsls	r2, r2, #1
 8003d2a:	4291      	cmp	r1, r2
 8003d2c:	d10c      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	68a2      	ldr	r2, [r4, #8]
 8003d32:	0209      	lsls	r1, r1, #8
 8003d34:	428a      	cmp	r2, r1
 8003d36:	d003      	beq.n	8003d40 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	00c9      	lsls	r1, r1, #3
 8003d3c:	428a      	cmp	r2, r1
 8003d3e:	d103      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	438a      	bics	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d4c:	0189      	lsls	r1, r1, #6
 8003d4e:	428a      	cmp	r2, r1
 8003d50:	d106      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	480d      	ldr	r0, [pc, #52]	; (8003d8c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8003d56:	4001      	ands	r1, r0
 8003d58:	6019      	str	r1, [r3, #0]
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003d60:	0023      	movs	r3, r4
 8003d62:	2201      	movs	r2, #1
 8003d64:	335d      	adds	r3, #93	; 0x5d
 8003d66:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8003d68:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003d6a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003d6c:	345c      	adds	r4, #92	; 0x5c
 8003d6e:	7023      	strb	r3, [r4, #0]
}
 8003d70:	b005      	add	sp, #20
 8003d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8003d74:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	4193      	sbcs	r3, r2
 8003d7a:	425b      	negs	r3, r3
 8003d7c:	401d      	ands	r5, r3
      count--;
 8003d7e:	9b03      	ldr	r3, [sp, #12]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	e7bb      	b.n	8003cfe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	ffffdfff 	.word	0xffffdfff

08003d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d92:	0013      	movs	r3, r2
{
 8003d94:	000d      	movs	r5, r1
 8003d96:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d98:	000a      	movs	r2, r1
 8003d9a:	21c0      	movs	r1, #192	; 0xc0
 8003d9c:	0149      	lsls	r1, r1, #5
{
 8003d9e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003da0:	f7ff ff2e 	bl	8003c00 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d005      	beq.n	8003db4 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da8:	2320      	movs	r3, #32
 8003daa:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dac:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dae:	4313      	orrs	r3, r2
 8003db0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003db2:	e00f      	b.n	8003dd4 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003db4:	0032      	movs	r2, r6
 8003db6:	0029      	movs	r1, r5
 8003db8:	0020      	movs	r0, r4
 8003dba:	f7ff ff8d 	bl	8003cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d1f2      	bne.n	8003da8 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dc2:	21c0      	movs	r1, #192	; 0xc0
 8003dc4:	0033      	movs	r3, r6
 8003dc6:	002a      	movs	r2, r5
 8003dc8:	0020      	movs	r0, r4
 8003dca:	00c9      	lsls	r1, r1, #3
 8003dcc:	f7ff ff18 	bl	8003c00 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d1e9      	bne.n	8003da8 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003dd8 <HAL_SPI_Init>:
{
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ddc:	2001      	movs	r0, #1
  if (hspi == NULL)
 8003dde:	2c00      	cmp	r4, #0
 8003de0:	d067      	beq.n	8003eb2 <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d165      	bne.n	8003eb4 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de8:	2282      	movs	r2, #130	; 0x82
 8003dea:	6861      	ldr	r1, [r4, #4]
 8003dec:	0052      	lsls	r2, r2, #1
 8003dee:	4291      	cmp	r1, r2
 8003df0:	d000      	beq.n	8003df4 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df2:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df4:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003df6:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dfa:	355d      	adds	r5, #93	; 0x5d
 8003dfc:	782b      	ldrb	r3, [r5, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8003e04:	0023      	movs	r3, r4
 8003e06:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003e08:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003e0a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8003e0c:	f7fe fd34 	bl	8002878 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e10:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003e12:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e14:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003e16:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e18:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003e1a:	6813      	ldr	r3, [r2, #0]
 8003e1c:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e1e:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 8003e20:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e22:	00c9      	lsls	r1, r1, #3
 8003e24:	2300      	movs	r3, #0
 8003e26:	428d      	cmp	r5, r1
 8003e28:	d848      	bhi.n	8003ebc <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e2a:	2080      	movs	r0, #128	; 0x80
 8003e2c:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e2e:	428d      	cmp	r5, r1
 8003e30:	d000      	beq.n	8003e34 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e32:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e34:	2382      	movs	r3, #130	; 0x82
 8003e36:	6866      	ldr	r6, [r4, #4]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4033      	ands	r3, r6
 8003e3c:	2684      	movs	r6, #132	; 0x84
 8003e3e:	68a7      	ldr	r7, [r4, #8]
 8003e40:	0236      	lsls	r6, r6, #8
 8003e42:	403e      	ands	r6, r7
 8003e44:	4333      	orrs	r3, r6
 8003e46:	2602      	movs	r6, #2
 8003e48:	6927      	ldr	r7, [r4, #16]
 8003e4a:	69a1      	ldr	r1, [r4, #24]
 8003e4c:	403e      	ands	r6, r7
 8003e4e:	4333      	orrs	r3, r6
 8003e50:	2601      	movs	r6, #1
 8003e52:	6967      	ldr	r7, [r4, #20]
 8003e54:	46b4      	mov	ip, r6
 8003e56:	4037      	ands	r7, r6
 8003e58:	433b      	orrs	r3, r7
 8003e5a:	2780      	movs	r7, #128	; 0x80
 8003e5c:	00bf      	lsls	r7, r7, #2
 8003e5e:	400f      	ands	r7, r1
 8003e60:	433b      	orrs	r3, r7
 8003e62:	2738      	movs	r7, #56	; 0x38
 8003e64:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e66:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e68:	4037      	ands	r7, r6
 8003e6a:	433b      	orrs	r3, r7
 8003e6c:	2780      	movs	r7, #128	; 0x80
 8003e6e:	6a26      	ldr	r6, [r4, #32]
 8003e70:	4037      	ands	r7, r6
 8003e72:	433b      	orrs	r3, r7
 8003e74:	2780      	movs	r7, #128	; 0x80
 8003e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e78:	01bf      	lsls	r7, r7, #6
 8003e7a:	4037      	ands	r7, r6
 8003e7c:	433b      	orrs	r3, r7
 8003e7e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e80:	2310      	movs	r3, #16
 8003e82:	2708      	movs	r7, #8
 8003e84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e86:	4033      	ands	r3, r6
 8003e88:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003e8a:	4037      	ands	r7, r6
 8003e8c:	433b      	orrs	r3, r7
 8003e8e:	27f0      	movs	r7, #240	; 0xf0
 8003e90:	013f      	lsls	r7, r7, #4
 8003e92:	403d      	ands	r5, r7
 8003e94:	431d      	orrs	r5, r3
 8003e96:	2304      	movs	r3, #4
 8003e98:	4019      	ands	r1, r3
 8003e9a:	4329      	orrs	r1, r5
 8003e9c:	4308      	orrs	r0, r1
 8003e9e:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ea0:	69d3      	ldr	r3, [r2, #28]
 8003ea2:	4908      	ldr	r1, [pc, #32]	; (8003ec4 <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ea4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003eaa:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eac:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003eae:	345d      	adds	r4, #93	; 0x5d
 8003eb0:	7023      	strb	r3, [r4, #0]
}
 8003eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb8:	6163      	str	r3, [r4, #20]
 8003eba:	e79b      	b.n	8003df4 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ebc:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ebe:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ec0:	0109      	lsls	r1, r1, #4
 8003ec2:	e7b4      	b.n	8003e2e <HAL_SPI_Init+0x56>
 8003ec4:	fffff7ff 	.word	0xfffff7ff

08003ec8 <HAL_SPI_Transmit>:
{
 8003ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eca:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8003ecc:	0003      	movs	r3, r0
{
 8003ece:	b085      	sub	sp, #20
 8003ed0:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hspi);
 8003ed2:	335c      	adds	r3, #92	; 0x5c
{
 8003ed4:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8003ed6:	781a      	ldrb	r2, [r3, #0]
{
 8003ed8:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003eda:	2702      	movs	r7, #2
 8003edc:	2a01      	cmp	r2, #1
 8003ede:	d100      	bne.n	8003ee2 <HAL_SPI_Transmit+0x1a>
 8003ee0:	e085      	b.n	8003fee <HAL_SPI_Transmit+0x126>
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003ee6:	f7fe fdfd 	bl	8002ae4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003eea:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8003eec:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8003eee:	335d      	adds	r3, #93	; 0x5d
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	b2d7      	uxtb	r7, r2
 8003ef4:	2a01      	cmp	r2, #1
 8003ef6:	d000      	beq.n	8003efa <HAL_SPI_Transmit+0x32>
 8003ef8:	e0af      	b.n	800405a <HAL_SPI_Transmit+0x192>
  if ((pData == NULL) || (Size == 0U))
 8003efa:	9a00      	ldr	r2, [sp, #0]
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d073      	beq.n	8003fe8 <HAL_SPI_Transmit+0x120>
 8003f00:	2e00      	cmp	r6, #0
 8003f02:	d071      	beq.n	8003fe8 <HAL_SPI_Transmit+0x120>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f04:	2203      	movs	r2, #3
 8003f06:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f08:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f0a:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f0c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f0e:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f10:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f12:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferSize  = Size;
 8003f14:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f16:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8003f18:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8003f1a:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f1c:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8003f22:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003f24:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f26:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8003f28:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f2a:	4291      	cmp	r1, r2
 8003f2c:	d108      	bne.n	8003f40 <HAL_SPI_Transmit+0x78>
    __HAL_SPI_DISABLE(hspi);
 8003f2e:	2140      	movs	r1, #64	; 0x40
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	438a      	bics	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	01d2      	lsls	r2, r2, #7
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	4211      	tst	r1, r2
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f4e:	21e0      	movs	r1, #224	; 0xe0
 8003f50:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f54:	00c9      	lsls	r1, r1, #3
 8003f56:	4288      	cmp	r0, r1
 8003f58:	d94f      	bls.n	8003ffa <HAL_SPI_Transmit+0x132>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_SPI_Transmit+0x9a>
 8003f5e:	2e01      	cmp	r6, #1
 8003f60:	d109      	bne.n	8003f76 <HAL_SPI_Transmit+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f62:	9a00      	ldr	r2, [sp, #0]
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f68:	9b00      	ldr	r3, [sp, #0]
 8003f6a:	1c99      	adds	r1, r3, #2
      hspi->TxXferCount--;
 8003f6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6e:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f76:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8003f78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f7e:	0029      	movs	r1, r5
 8003f80:	0020      	movs	r0, r4
 8003f82:	9a01      	ldr	r2, [sp, #4]
 8003f84:	f7ff ff04 	bl	8003d90 <SPI_EndRxTxTransaction>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d163      	bne.n	8004054 <HAL_SPI_Transmit+0x18c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f92:	9303      	str	r3, [sp, #12]
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	9203      	str	r2, [sp, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003fa2:	2a00      	cmp	r2, #0
 8003fa4:	d120      	bne.n	8003fe8 <HAL_SPI_Transmit+0x120>
    hspi->State = HAL_SPI_STATE_READY;
 8003fa6:	0023      	movs	r3, r4
 8003fa8:	2101      	movs	r1, #1
 8003faa:	335d      	adds	r3, #93	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fac:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8003fae:	7019      	strb	r1, [r3, #0]
 8003fb0:	e01a      	b.n	8003fe8 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	6893      	ldr	r3, [r2, #8]
 8003fb6:	4233      	tst	r3, r6
 8003fb8:	d009      	beq.n	8003fce <HAL_SPI_Transmit+0x106>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fbc:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fbe:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003fc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003fcc:	e7d4      	b.n	8003f78 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fce:	f7fe fd89 	bl	8002ae4 <HAL_GetTick>
 8003fd2:	9b01      	ldr	r3, [sp, #4]
 8003fd4:	1ac0      	subs	r0, r0, r3
 8003fd6:	42a8      	cmp	r0, r5
 8003fd8:	d30c      	bcc.n	8003ff4 <HAL_SPI_Transmit+0x12c>
 8003fda:	1c6b      	adds	r3, r5, #1
 8003fdc:	d0cc      	beq.n	8003f78 <HAL_SPI_Transmit+0xb0>
          hspi->State = HAL_SPI_STATE_READY;
 8003fde:	0023      	movs	r3, r4
 8003fe0:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8003fe2:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	335d      	adds	r3, #93	; 0x5d
 8003fe6:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	345c      	adds	r4, #92	; 0x5c
 8003fec:	7023      	strb	r3, [r4, #0]
}
 8003fee:	0038      	movs	r0, r7
 8003ff0:	b005      	add	sp, #20
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ff4:	2d00      	cmp	r5, #0
 8003ff6:	d1bf      	bne.n	8003f78 <HAL_SPI_Transmit+0xb0>
 8003ff8:	e7f1      	b.n	8003fde <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_SPI_Transmit+0x13a>
 8003ffe:	2e01      	cmp	r6, #1
 8004000:	d109      	bne.n	8004016 <HAL_SPI_Transmit+0x14e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004002:	9a00      	ldr	r2, [sp, #0]
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004008:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800400a:	3301      	adds	r3, #1
 800400c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800400e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004010:	3b01      	subs	r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004016:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8004018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0af      	beq.n	8003f7e <HAL_SPI_Transmit+0xb6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	4232      	tst	r2, r6
 8004024:	d00a      	beq.n	800403c <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004026:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800402c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800402e:	3301      	adds	r3, #1
 8004030:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004032:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004034:	3b01      	subs	r3, #1
 8004036:	b29b      	uxth	r3, r3
 8004038:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800403a:	e7ed      	b.n	8004018 <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403c:	f7fe fd52 	bl	8002ae4 <HAL_GetTick>
 8004040:	9b01      	ldr	r3, [sp, #4]
 8004042:	1ac0      	subs	r0, r0, r3
 8004044:	42a8      	cmp	r0, r5
 8004046:	d302      	bcc.n	800404e <HAL_SPI_Transmit+0x186>
 8004048:	1c6b      	adds	r3, r5, #1
 800404a:	d0e5      	beq.n	8004018 <HAL_SPI_Transmit+0x150>
 800404c:	e7c7      	b.n	8003fde <HAL_SPI_Transmit+0x116>
 800404e:	2d00      	cmp	r5, #0
 8004050:	d1e2      	bne.n	8004018 <HAL_SPI_Transmit+0x150>
 8004052:	e7c4      	b.n	8003fde <HAL_SPI_Transmit+0x116>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004054:	2320      	movs	r3, #32
 8004056:	6623      	str	r3, [r4, #96]	; 0x60
 8004058:	e798      	b.n	8003f8c <HAL_SPI_Transmit+0xc4>
    errorcode = HAL_BUSY;
 800405a:	2702      	movs	r7, #2
 800405c:	e7c4      	b.n	8003fe8 <HAL_SPI_Transmit+0x120>
	...

08004060 <HAL_SPI_TransmitReceive>:
{
 8004060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004062:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8004064:	0003      	movs	r3, r0
 8004066:	335c      	adds	r3, #92	; 0x5c
{
 8004068:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800406a:	781a      	ldrb	r2, [r3, #0]
{
 800406c:	0004      	movs	r4, r0
 800406e:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8004070:	2002      	movs	r0, #2
 8004072:	2a01      	cmp	r2, #1
 8004074:	d01b      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x4e>
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800407a:	f7fe fd33 	bl	8002ae4 <HAL_GetTick>
  tmp_state           = hspi->State;
 800407e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004080:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8004082:	335d      	adds	r3, #93	; 0x5d
 8004084:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004086:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004088:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800408a:	2b01      	cmp	r3, #1
 800408c:	d009      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x42>
 800408e:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8004090:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4299      	cmp	r1, r3
 8004096:	d107      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004098:	68a3      	ldr	r3, [r4, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x48>
 800409e:	2a04      	cmp	r2, #4
 80040a0:	d102      	bne.n	80040a8 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040a2:	2d00      	cmp	r5, #0
 80040a4:	d104      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 80040a6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 80040a8:	2300      	movs	r3, #0
 80040aa:	345c      	adds	r4, #92	; 0x5c
 80040ac:	7023      	strb	r3, [r4, #0]
}
 80040ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040b0:	2f00      	cmp	r7, #0
 80040b2:	d0f8      	beq.n	80040a6 <HAL_SPI_TransmitReceive+0x46>
 80040b4:	2e00      	cmp	r6, #0
 80040b6:	d0f6      	beq.n	80040a6 <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040b8:	0023      	movs	r3, r4
 80040ba:	335d      	adds	r3, #93	; 0x5d
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	2a04      	cmp	r2, #4
 80040c0:	d001      	beq.n	80040c6 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040c2:	2205      	movs	r2, #5
 80040c4:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 80040c6:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c8:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 80040ca:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040cc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040ce:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040d0:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040d2:	1da2      	adds	r2, r4, #6
 80040d4:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d6:	22e0      	movs	r2, #224	; 0xe0
 80040d8:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80040da:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040dc:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040de:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e0:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 80040e2:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040e4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040e6:	00d2      	lsls	r2, r2, #3
 80040e8:	4290      	cmp	r0, r2
 80040ea:	d935      	bls.n	8004158 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	4f62      	ldr	r7, [pc, #392]	; (8004278 <HAL_SPI_TransmitReceive+0x218>)
 80040f0:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f2:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	681f      	ldr	r7, [r3, #0]
 80040f8:	4217      	tst	r7, r2
 80040fa:	d102      	bne.n	8004102 <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80040fc:	681f      	ldr	r7, [r3, #0]
 80040fe:	433a      	orrs	r2, r7
 8004100:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004102:	22e0      	movs	r2, #224	; 0xe0
 8004104:	00d2      	lsls	r2, r2, #3
 8004106:	4290      	cmp	r0, r2
 8004108:	d961      	bls.n	80041ce <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410a:	2900      	cmp	r1, #0
 800410c:	d001      	beq.n	8004112 <HAL_SPI_TransmitReceive+0xb2>
 800410e:	2e01      	cmp	r6, #1
 8004110:	d107      	bne.n	8004122 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004112:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004114:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004116:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004118:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800411a:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800411c:	3b01      	subs	r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004122:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004124:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004126:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004128:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x102>
 800412e:	0023      	movs	r3, r4
 8004130:	3308      	adds	r3, #8
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	2b00      	cmp	r3, #0
 8004136:	d114      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004138:	0020      	movs	r0, r4
 800413a:	9a01      	ldr	r2, [sp, #4]
 800413c:	9908      	ldr	r1, [sp, #32]
 800413e:	f7ff fe27 	bl	8003d90 <SPI_EndRxTxTransaction>
 8004142:	2800      	cmp	r0, #0
 8004144:	d000      	beq.n	8004148 <HAL_SPI_TransmitReceive+0xe8>
 8004146:	e093      	b.n	8004270 <HAL_SPI_TransmitReceive+0x210>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004148:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ab      	bne.n	80040a6 <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 800414e:	0023      	movs	r3, r4
 8004150:	2201      	movs	r2, #1
 8004152:	335d      	adds	r3, #93	; 0x5d
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e7a7      	b.n	80040a8 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	685f      	ldr	r7, [r3, #4]
 800415c:	0152      	lsls	r2, r2, #5
 800415e:	433a      	orrs	r2, r7
 8004160:	e7c7      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	6883      	ldr	r3, [r0, #8]
 8004166:	423b      	tst	r3, r7
 8004168:	d00e      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x128>
 800416a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x128>
 8004170:	2d01      	cmp	r5, #1
 8004172:	d109      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 0U;
 8004174:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004176:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004178:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800417a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800417c:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800417e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004180:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004182:	3b01      	subs	r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004188:	6883      	ldr	r3, [r0, #8]
 800418a:	0019      	movs	r1, r3
 800418c:	4031      	ands	r1, r6
 800418e:	4233      	tst	r3, r6
 8004190:	d00e      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x150>
 8004192:	0022      	movs	r2, r4
 8004194:	3208      	adds	r2, #8
 8004196:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 800419c:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800419e:	68c0      	ldr	r0, [r0, #12]
 80041a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041a2:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a4:	3302      	adds	r3, #2
 80041a6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80041a8:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041b0:	f7fe fc98 	bl	8002ae4 <HAL_GetTick>
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	1ac0      	subs	r0, r0, r3
 80041b8:	9b08      	ldr	r3, [sp, #32]
 80041ba:	4298      	cmp	r0, r3
 80041bc:	d3b4      	bcc.n	8004128 <HAL_SPI_TransmitReceive+0xc8>
 80041be:	3301      	adds	r3, #1
 80041c0:	d0b2      	beq.n	8004128 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 80041c2:	0023      	movs	r3, r4
 80041c4:	2201      	movs	r2, #1
 80041c6:	335d      	adds	r3, #93	; 0x5d
        errorcode = HAL_TIMEOUT;
 80041c8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80041ca:	701a      	strb	r2, [r3, #0]
        goto error;
 80041cc:	e76c      	b.n	80040a8 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ce:	2900      	cmp	r1, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x176>
 80041d2:	2e01      	cmp	r6, #1
 80041d4:	d108      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d6:	782a      	ldrb	r2, [r5, #0]
 80041d8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041dc:	3301      	adds	r3, #1
 80041de:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80041e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80041e8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ea:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ec:	002e      	movs	r6, r5
 80041ee:	e032      	b.n	8004256 <HAL_SPI_TransmitReceive+0x1f6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	423a      	tst	r2, r7
 80041f6:	d00f      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x1b8>
 80041f8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x1b8>
 80041fe:	2d01      	cmp	r5, #1
 8004200:	d10a      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x1b8>
        txallowed = 0U;
 8004202:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004204:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800420a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800420c:	3301      	adds	r3, #1
 800420e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004210:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004212:	3b01      	subs	r3, #1
 8004214:	b29b      	uxth	r3, r3
 8004216:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	0011      	movs	r1, r2
 800421e:	4031      	ands	r1, r6
 8004220:	4232      	tst	r2, r6
 8004222:	d00f      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x1e4>
 8004224:	0022      	movs	r2, r4
 8004226:	3208      	adds	r2, #8
 8004228:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 800422a:	2800      	cmp	r0, #0
 800422c:	d00a      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x1e4>
        txallowed = 1U;
 800422e:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004230:	7b1b      	ldrb	r3, [r3, #12]
 8004232:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004234:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8004236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004238:	3301      	adds	r3, #1
 800423a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800423c:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 800423e:	3b01      	subs	r3, #1
 8004240:	b29b      	uxth	r3, r3
 8004242:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004244:	f7fe fc4e 	bl	8002ae4 <HAL_GetTick>
 8004248:	9b01      	ldr	r3, [sp, #4]
 800424a:	1ac0      	subs	r0, r0, r3
 800424c:	9b08      	ldr	r3, [sp, #32]
 800424e:	4298      	cmp	r0, r3
 8004250:	d30a      	bcc.n	8004268 <HAL_SPI_TransmitReceive+0x208>
 8004252:	3301      	adds	r3, #1
 8004254:	d1b5      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x162>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004256:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1c9      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x190>
 800425c:	0023      	movs	r3, r4
 800425e:	3308      	adds	r3, #8
 8004260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1c4      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x190>
 8004266:	e767      	b.n	8004138 <HAL_SPI_TransmitReceive+0xd8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004268:	9b08      	ldr	r3, [sp, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f3      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x1f6>
 800426e:	e7a8      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004270:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8004272:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004274:	6623      	str	r3, [r4, #96]	; 0x60
 8004276:	e767      	b.n	8004148 <HAL_SPI_TransmitReceive+0xe8>
 8004278:	ffffefff 	.word	0xffffefff

0800427c <HAL_SPI_GetState>:
  return hspi->State;
 800427c:	305d      	adds	r0, #93	; 0x5d
 800427e:	7800      	ldrb	r0, [r0, #0]
 8004280:	b2c0      	uxtb	r0, r0
}
 8004282:	4770      	bx	lr

08004284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004284:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004286:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	2201      	movs	r2, #1
 800428c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004290:	6801      	ldr	r1, [r0, #0]
 8004292:	4d12      	ldr	r5, [pc, #72]	; (80042dc <UART_EndRxTransfer+0x58>)
 8004294:	680b      	ldr	r3, [r1, #0]
 8004296:	402b      	ands	r3, r5
 8004298:	600b      	str	r3, [r1, #0]
 800429a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	6801      	ldr	r1, [r0, #0]
 80042a8:	688b      	ldr	r3, [r1, #8]
 80042aa:	4393      	bics	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
 80042ae:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10a      	bne.n	80042ce <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042bc:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	2410      	movs	r4, #16
 80042c2:	6802      	ldr	r2, [r0, #0]
 80042c4:	6813      	ldr	r3, [r2, #0]
 80042c6:	43a3      	bics	r3, r4
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ce:	2220      	movs	r2, #32
 80042d0:	1d03      	adds	r3, r0, #4
 80042d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d4:	2300      	movs	r3, #0
 80042d6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042d8:	6683      	str	r3, [r0, #104]	; 0x68
}
 80042da:	bd30      	pop	{r4, r5, pc}
 80042dc:	fffffedf 	.word	0xfffffedf

080042e0 <UART_SetConfig>:
{
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042e4:	6925      	ldr	r5, [r4, #16]
 80042e6:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ea:	432a      	orrs	r2, r5
 80042ec:	6965      	ldr	r5, [r4, #20]
 80042ee:	69c3      	ldr	r3, [r0, #28]
 80042f0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f2:	6808      	ldr	r0, [r1, #0]
 80042f4:	4d3e      	ldr	r5, [pc, #248]	; (80043f0 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f8:	4028      	ands	r0, r5
 80042fa:	4302      	orrs	r2, r0
 80042fc:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042fe:	684a      	ldr	r2, [r1, #4]
 8004300:	483c      	ldr	r0, [pc, #240]	; (80043f4 <UART_SetConfig+0x114>)
  tmpreg |= huart->Init.OneBitSampling;
 8004302:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004304:	4002      	ands	r2, r0
 8004306:	68e0      	ldr	r0, [r4, #12]
 8004308:	4302      	orrs	r2, r0
 800430a:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800430c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800430e:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004310:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004312:	4d39      	ldr	r5, [pc, #228]	; (80043f8 <UART_SetConfig+0x118>)
 8004314:	4028      	ands	r0, r5
 8004316:	4302      	orrs	r2, r0
 8004318:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800431a:	4a38      	ldr	r2, [pc, #224]	; (80043fc <UART_SetConfig+0x11c>)
 800431c:	4291      	cmp	r1, r2
 800431e:	d115      	bne.n	800434c <UART_SetConfig+0x6c>
 8004320:	2103      	movs	r1, #3
 8004322:	4a37      	ldr	r2, [pc, #220]	; (8004400 <UART_SetConfig+0x120>)
 8004324:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004326:	400a      	ands	r2, r1
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	3a01      	subs	r2, #1
 800432c:	0209      	lsls	r1, r1, #8
 800432e:	2a02      	cmp	r2, #2
 8004330:	d852      	bhi.n	80043d8 <UART_SetConfig+0xf8>
 8004332:	4834      	ldr	r0, [pc, #208]	; (8004404 <UART_SetConfig+0x124>)
 8004334:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004336:	428b      	cmp	r3, r1
 8004338:	d014      	beq.n	8004364 <UART_SetConfig+0x84>
    switch (clocksource)
 800433a:	2808      	cmp	r0, #8
 800433c:	d84a      	bhi.n	80043d4 <UART_SetConfig+0xf4>
 800433e:	f7fb fee3 	bl	8000108 <__gnu_thumb1_case_uqi>
 8004342:	490c      	.short	0x490c
 8004344:	49444947 	.word	0x49444947
 8004348:	4949      	.short	0x4949
 800434a:	34          	.byte	0x34
 800434b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800434c:	4a2e      	ldr	r2, [pc, #184]	; (8004408 <UART_SetConfig+0x128>)
 800434e:	4291      	cmp	r1, r2
 8004350:	d140      	bne.n	80043d4 <UART_SetConfig+0xf4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	0212      	lsls	r2, r2, #8
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <UART_SetConfig+0xfc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800435a:	f7ff fba9 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800435e:	2800      	cmp	r0, #0
 8004360:	d040      	beq.n	80043e4 <UART_SetConfig+0x104>
 8004362:	e024      	b.n	80043ae <UART_SetConfig+0xce>
    switch (clocksource)
 8004364:	2808      	cmp	r0, #8
 8004366:	d835      	bhi.n	80043d4 <UART_SetConfig+0xf4>
 8004368:	f7fb fece 	bl	8000108 <__gnu_thumb1_case_uqi>
 800436c:	34083438 	.word	0x34083438
 8004370:	34343405 	.word	0x34343405
 8004374:	09          	.byte	0x09
 8004375:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7ff fadb 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 800437a:	e031      	b.n	80043e0 <UART_SetConfig+0x100>
    switch (clocksource)
 800437c:	4b23      	ldr	r3, [pc, #140]	; (800440c <UART_SetConfig+0x12c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800437e:	0058      	lsls	r0, r3, #1
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	6861      	ldr	r1, [r4, #4]
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	18c0      	adds	r0, r0, r3
 8004388:	f7fb fec8 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438c:	0002      	movs	r2, r0
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <UART_SetConfig+0x130>)
 8004390:	3a10      	subs	r2, #16
 8004392:	429a      	cmp	r2, r3
 8004394:	d81e      	bhi.n	80043d4 <UART_SetConfig+0xf4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004396:	230f      	movs	r3, #15
 8004398:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800439a:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800439c:	439a      	bics	r2, r3
 800439e:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a0:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	4318      	orrs	r0, r3
 80043a6:	60d0      	str	r0, [r2, #12]
 80043a8:	e01c      	b.n	80043e4 <UART_SetConfig+0x104>
    switch (clocksource)
 80043aa:	2080      	movs	r0, #128	; 0x80
 80043ac:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	6861      	ldr	r1, [r4, #4]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	1818      	adds	r0, r3, r0
 80043b6:	f7fb feb1 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ba:	0002      	movs	r2, r0
 80043bc:	4b14      	ldr	r3, [pc, #80]	; (8004410 <UART_SetConfig+0x130>)
 80043be:	3a10      	subs	r2, #16
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d807      	bhi.n	80043d4 <UART_SetConfig+0xf4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	60d8      	str	r0, [r3, #12]
 80043c8:	e00c      	b.n	80043e4 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7ff fab1 	bl	8003930 <HAL_RCC_GetSysClockFreq>
        break;
 80043ce:	e7c6      	b.n	800435e <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 80043d0:	480e      	ldr	r0, [pc, #56]	; (800440c <UART_SetConfig+0x12c>)
 80043d2:	e7ec      	b.n	80043ae <UART_SetConfig+0xce>
    switch (clocksource)
 80043d4:	2001      	movs	r0, #1
 80043d6:	e006      	b.n	80043e6 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d8:	428b      	cmp	r3, r1
 80043da:	d1be      	bne.n	800435a <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7ff fb68 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80043e0:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80043e2:	d1cc      	bne.n	800437e <UART_SetConfig+0x9e>
 80043e4:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80043ea:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80043ec:	bd70      	pop	{r4, r5, r6, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	efff69f3 	.word	0xefff69f3
 80043f4:	ffffcfff 	.word	0xffffcfff
 80043f8:	fffff4ff 	.word	0xfffff4ff
 80043fc:	40013800 	.word	0x40013800
 8004400:	40021000 	.word	0x40021000
 8004404:	08004880 	.word	0x08004880
 8004408:	40004400 	.word	0x40004400
 800440c:	007a1200 	.word	0x007a1200
 8004410:	0000ffef 	.word	0x0000ffef

08004414 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004414:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004416:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004418:	07da      	lsls	r2, r3, #31
 800441a:	d506      	bpl.n	800442a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800441c:	6801      	ldr	r1, [r0, #0]
 800441e:	4c28      	ldr	r4, [pc, #160]	; (80044c0 <UART_AdvFeatureConfig+0xac>)
 8004420:	684a      	ldr	r2, [r1, #4]
 8004422:	4022      	ands	r2, r4
 8004424:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004426:	4322      	orrs	r2, r4
 8004428:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800442a:	079a      	lsls	r2, r3, #30
 800442c:	d506      	bpl.n	800443c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800442e:	6801      	ldr	r1, [r0, #0]
 8004430:	4c24      	ldr	r4, [pc, #144]	; (80044c4 <UART_AdvFeatureConfig+0xb0>)
 8004432:	684a      	ldr	r2, [r1, #4]
 8004434:	4022      	ands	r2, r4
 8004436:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004438:	4322      	orrs	r2, r4
 800443a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800443c:	075a      	lsls	r2, r3, #29
 800443e:	d506      	bpl.n	800444e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004440:	6801      	ldr	r1, [r0, #0]
 8004442:	4c21      	ldr	r4, [pc, #132]	; (80044c8 <UART_AdvFeatureConfig+0xb4>)
 8004444:	684a      	ldr	r2, [r1, #4]
 8004446:	4022      	ands	r2, r4
 8004448:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800444a:	4322      	orrs	r2, r4
 800444c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800444e:	071a      	lsls	r2, r3, #28
 8004450:	d506      	bpl.n	8004460 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004452:	6801      	ldr	r1, [r0, #0]
 8004454:	4c1d      	ldr	r4, [pc, #116]	; (80044cc <UART_AdvFeatureConfig+0xb8>)
 8004456:	684a      	ldr	r2, [r1, #4]
 8004458:	4022      	ands	r2, r4
 800445a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800445c:	4322      	orrs	r2, r4
 800445e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004460:	06da      	lsls	r2, r3, #27
 8004462:	d506      	bpl.n	8004472 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004464:	6801      	ldr	r1, [r0, #0]
 8004466:	4c1a      	ldr	r4, [pc, #104]	; (80044d0 <UART_AdvFeatureConfig+0xbc>)
 8004468:	688a      	ldr	r2, [r1, #8]
 800446a:	4022      	ands	r2, r4
 800446c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800446e:	4322      	orrs	r2, r4
 8004470:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004472:	069a      	lsls	r2, r3, #26
 8004474:	d506      	bpl.n	8004484 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004476:	6801      	ldr	r1, [r0, #0]
 8004478:	4c16      	ldr	r4, [pc, #88]	; (80044d4 <UART_AdvFeatureConfig+0xc0>)
 800447a:	688a      	ldr	r2, [r1, #8]
 800447c:	4022      	ands	r2, r4
 800447e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004480:	4322      	orrs	r2, r4
 8004482:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004484:	065a      	lsls	r2, r3, #25
 8004486:	d510      	bpl.n	80044aa <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004488:	6801      	ldr	r1, [r0, #0]
 800448a:	4d13      	ldr	r5, [pc, #76]	; (80044d8 <UART_AdvFeatureConfig+0xc4>)
 800448c:	684a      	ldr	r2, [r1, #4]
 800448e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004490:	402a      	ands	r2, r5
 8004492:	4322      	orrs	r2, r4
 8004494:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004496:	2280      	movs	r2, #128	; 0x80
 8004498:	0352      	lsls	r2, r2, #13
 800449a:	4294      	cmp	r4, r2
 800449c:	d105      	bne.n	80044aa <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800449e:	684a      	ldr	r2, [r1, #4]
 80044a0:	4c0e      	ldr	r4, [pc, #56]	; (80044dc <UART_AdvFeatureConfig+0xc8>)
 80044a2:	4022      	ands	r2, r4
 80044a4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80044a6:	4322      	orrs	r2, r4
 80044a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	d506      	bpl.n	80044bc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ae:	6802      	ldr	r2, [r0, #0]
 80044b0:	490b      	ldr	r1, [pc, #44]	; (80044e0 <UART_AdvFeatureConfig+0xcc>)
 80044b2:	6853      	ldr	r3, [r2, #4]
 80044b4:	400b      	ands	r3, r1
 80044b6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6053      	str	r3, [r2, #4]
}
 80044bc:	bd30      	pop	{r4, r5, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	fffdffff 	.word	0xfffdffff
 80044c4:	fffeffff 	.word	0xfffeffff
 80044c8:	fffbffff 	.word	0xfffbffff
 80044cc:	ffff7fff 	.word	0xffff7fff
 80044d0:	ffffefff 	.word	0xffffefff
 80044d4:	ffffdfff 	.word	0xffffdfff
 80044d8:	ffefffff 	.word	0xffefffff
 80044dc:	ff9fffff 	.word	0xff9fffff
 80044e0:	fff7ffff 	.word	0xfff7ffff

080044e4 <UART_WaitOnFlagUntilTimeout>:
{
 80044e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044e6:	0004      	movs	r4, r0
 80044e8:	000d      	movs	r5, r1
 80044ea:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ec:	2608      	movs	r6, #8
{
 80044ee:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	69d3      	ldr	r3, [r2, #28]
 80044f4:	402b      	ands	r3, r5
 80044f6:	1b5b      	subs	r3, r3, r5
 80044f8:	4259      	negs	r1, r3
 80044fa:	414b      	adcs	r3, r1
 80044fc:	42bb      	cmp	r3, r7
 80044fe:	d001      	beq.n	8004504 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8004500:	2000      	movs	r0, #0
 8004502:	e021      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8004504:	9b08      	ldr	r3, [sp, #32]
 8004506:	3301      	adds	r3, #1
 8004508:	d0f3      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe faeb 	bl	8002ae4 <HAL_GetTick>
 800450e:	9b00      	ldr	r3, [sp, #0]
 8004510:	1ac0      	subs	r0, r0, r3
 8004512:	9b08      	ldr	r3, [sp, #32]
 8004514:	4298      	cmp	r0, r3
 8004516:	d828      	bhi.n	800456a <UART_WaitOnFlagUntilTimeout+0x86>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d026      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800451c:	2104      	movs	r1, #4
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	420a      	tst	r2, r1
 8004524:	d0e4      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	0011      	movs	r1, r2
 800452a:	4031      	ands	r1, r6
 800452c:	9101      	str	r1, [sp, #4]
 800452e:	4232      	tst	r2, r6
 8004530:	d00b      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8004532:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004534:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8004536:	f7ff fea5 	bl	8004284 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800453a:	0023      	movs	r3, r4
 800453c:	3308      	adds	r3, #8
 800453e:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8004540:	2300      	movs	r3, #0
           return HAL_ERROR;
 8004542:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8004544:	3478      	adds	r4, #120	; 0x78
 8004546:	7023      	strb	r3, [r4, #0]
}
 8004548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	69d9      	ldr	r1, [r3, #28]
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	4211      	tst	r1, r2
 8004552:	d0cd      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004554:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004556:	0020      	movs	r0, r4
 8004558:	f7ff fe94 	bl	8004284 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800455c:	0023      	movs	r3, r4
 800455e:	2220      	movs	r2, #32
 8004560:	3308      	adds	r3, #8
 8004562:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004564:	9b01      	ldr	r3, [sp, #4]
 8004566:	3478      	adds	r4, #120	; 0x78
 8004568:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800456a:	2003      	movs	r0, #3
 800456c:	e7ec      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0x64>
	...

08004570 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004570:	0003      	movs	r3, r0
{
 8004572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	2500      	movs	r5, #0
{
 8004576:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	3308      	adds	r3, #8
 800457a:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800457c:	f7fe fab2 	bl	8002ae4 <HAL_GetTick>
 8004580:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004582:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004584:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3678      	adds	r6, #120	; 0x78
 800458a:	071b      	lsls	r3, r3, #28
 800458c:	d51b      	bpl.n	80045c6 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	4b26      	ldr	r3, [pc, #152]	; (800462c <UART_CheckIdleState+0xbc>)
 8004592:	002a      	movs	r2, r5
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	0389      	lsls	r1, r1, #14
 8004598:	0003      	movs	r3, r0
 800459a:	0020      	movs	r0, r4
 800459c:	f7ff ffa2 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 80045a0:	42a8      	cmp	r0, r5
 80045a2:	d010      	beq.n	80045c6 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a8:	2301      	movs	r3, #1
 80045aa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045ae:	2080      	movs	r0, #128	; 0x80
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	4383      	bics	r3, r0
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80045bc:	2320      	movs	r3, #32
 80045be:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80045c0:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 80045c2:	2003      	movs	r0, #3
}
 80045c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045c6:	0025      	movs	r5, r4
 80045c8:	cd08      	ldmia	r5!, {r3}
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	075b      	lsls	r3, r3, #29
 80045ce:	d525      	bpl.n	800461c <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <UART_CheckIdleState+0xbc>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	0020      	movs	r0, r4
 80045da:	003b      	movs	r3, r7
 80045dc:	03c9      	lsls	r1, r1, #15
 80045de:	f7ff ff81 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d01a      	beq.n	800461c <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ea:	2201      	movs	r2, #1
 80045ec:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f0:	6821      	ldr	r1, [r4, #0]
 80045f2:	4f0f      	ldr	r7, [pc, #60]	; (8004630 <UART_CheckIdleState+0xc0>)
 80045f4:	680b      	ldr	r3, [r1, #0]
 80045f6:	403b      	ands	r3, r7
 80045f8:	600b      	str	r3, [r1, #0]
 80045fa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004602:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	6821      	ldr	r1, [r4, #0]
 8004608:	688b      	ldr	r3, [r1, #8]
 800460a:	4393      	bics	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
 800460e:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004612:	2320      	movs	r3, #32
 8004614:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004616:	2300      	movs	r3, #0
 8004618:	7033      	strb	r3, [r6, #0]
 800461a:	e7d2      	b.n	80045c2 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800461e:	2320      	movs	r3, #32
 8004620:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004622:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004626:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004628:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 800462a:	e7cb      	b.n	80045c4 <UART_CheckIdleState+0x54>
 800462c:	01ffffff 	.word	0x01ffffff
 8004630:	fffffedf 	.word	0xfffffedf

08004634 <HAL_UART_Init>:
{
 8004634:	b510      	push	{r4, lr}
 8004636:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004638:	d101      	bne.n	800463e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800463a:	2001      	movs	r0, #1
}
 800463c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800463e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004644:	0002      	movs	r2, r0
 8004646:	3278      	adds	r2, #120	; 0x78
 8004648:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800464a:	f7fe f977 	bl	800293c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800464e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004650:	2101      	movs	r1, #1
 8004652:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004656:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004658:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800465a:	438b      	bics	r3, r1
 800465c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465e:	f7ff fe3f 	bl	80042e0 <UART_SetConfig>
 8004662:	2801      	cmp	r0, #1
 8004664:	d0e9      	beq.n	800463a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800466c:	0020      	movs	r0, r4
 800466e:	f7ff fed1 	bl	8004414 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	4907      	ldr	r1, [pc, #28]	; (8004694 <HAL_UART_Init+0x60>)
 8004676:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004678:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	438a      	bics	r2, r1
 8004684:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004686:	2201      	movs	r2, #1
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800468e:	f7ff ff6f 	bl	8004570 <UART_CheckIdleState>
 8004692:	e7d3      	b.n	800463c <HAL_UART_Init+0x8>
 8004694:	ffffb7ff 	.word	0xffffb7ff

08004698 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004698:	3002      	adds	r0, #2
 800469a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800469c:	4a02      	ldr	r2, [pc, #8]	; (80046a8 <USB_DisableGlobalInt+0x10>)
 800469e:	4013      	ands	r3, r2
 80046a0:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 80046a2:	2000      	movs	r0, #0
 80046a4:	4770      	bx	lr
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	0000407f 	.word	0x0000407f

080046ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046ac:	b084      	sub	sp, #16
 80046ae:	b510      	push	{r4, lr}
 80046b0:	0004      	movs	r4, r0
 80046b2:	9204      	str	r2, [sp, #16]
 80046b4:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046b6:	2201      	movs	r2, #1
 80046b8:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046ba:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 80046be:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046c0:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80046c2:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 80046c4:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 80046c6:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 80046c8:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 80046ca:	bc10      	pop	{r4}
 80046cc:	bc08      	pop	{r3}
 80046ce:	b004      	add	sp, #16
 80046d0:	4718      	bx	r3
	...

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	2600      	movs	r6, #0
 80046d8:	4d0c      	ldr	r5, [pc, #48]	; (800470c <__libc_init_array+0x38>)
 80046da:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	2600      	movs	r6, #0
 80046e6:	f000 f821 	bl	800472c <_init>
 80046ea:	4d0a      	ldr	r5, [pc, #40]	; (8004714 <__libc_init_array+0x40>)
 80046ec:	4c0a      	ldr	r4, [pc, #40]	; (8004718 <__libc_init_array+0x44>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	00b3      	lsls	r3, r6, #2
 80046fa:	58eb      	ldr	r3, [r5, r3]
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	00b3      	lsls	r3, r6, #2
 8004704:	58eb      	ldr	r3, [r5, r3]
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	08004884 	.word	0x08004884
 8004710:	08004884 	.word	0x08004884
 8004714:	08004884 	.word	0x08004884
 8004718:	08004888 	.word	0x08004888

0800471c <memset>:
 800471c:	0003      	movs	r3, r0
 800471e:	1882      	adds	r2, r0, r2
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	7019      	strb	r1, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <_init>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr

08004738 <_fini>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr
